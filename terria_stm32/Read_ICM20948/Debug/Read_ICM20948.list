
Read_ICM20948.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b85c  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  0800ba48  0800ba48  0000ca48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be50  0800be50  0000d230  2**0
                  CONTENTS
  4 .ARM          00000008  0800be50  0800be50  0000ce50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be58  0800be58  0000d230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be58  0800be58  0000ce58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be5c  0800be5c  0000ce5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800be60  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  20000230  0800c090  0000d230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  0800c090  0000d6fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d230  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a20  00000000  00000000  0000d259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b2d  00000000  00000000  00022c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  000267a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000109c  00000000  00000000  00027d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ddf3  00000000  00000000  00028dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce49  00000000  00000000  00046b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0c95  00000000  00000000  000639e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010467d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bb0  00000000  00000000  001046c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0010b270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000230 	.word	0x20000230
 8000204:	00000000 	.word	0x00000000
 8000208:	0800ba2c 	.word	0x0800ba2c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000234 	.word	0x20000234
 8000224:	0800ba2c 	.word	0x0800ba2c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_frsub>:
 8000c00:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c04:	e002      	b.n	8000c0c <__addsf3>
 8000c06:	bf00      	nop

08000c08 <__aeabi_fsub>:
 8000c08:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c0c <__addsf3>:
 8000c0c:	0042      	lsls	r2, r0, #1
 8000c0e:	bf1f      	itttt	ne
 8000c10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c14:	ea92 0f03 	teqne	r2, r3
 8000c18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c20:	d06a      	beq.n	8000cf8 <__addsf3+0xec>
 8000c22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c2a:	bfc1      	itttt	gt
 8000c2c:	18d2      	addgt	r2, r2, r3
 8000c2e:	4041      	eorgt	r1, r0
 8000c30:	4048      	eorgt	r0, r1
 8000c32:	4041      	eorgt	r1, r0
 8000c34:	bfb8      	it	lt
 8000c36:	425b      	neglt	r3, r3
 8000c38:	2b19      	cmp	r3, #25
 8000c3a:	bf88      	it	hi
 8000c3c:	4770      	bxhi	lr
 8000c3e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c46:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4240      	negne	r0, r0
 8000c4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c52:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c56:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c5a:	bf18      	it	ne
 8000c5c:	4249      	negne	r1, r1
 8000c5e:	ea92 0f03 	teq	r2, r3
 8000c62:	d03f      	beq.n	8000ce4 <__addsf3+0xd8>
 8000c64:	f1a2 0201 	sub.w	r2, r2, #1
 8000c68:	fa41 fc03 	asr.w	ip, r1, r3
 8000c6c:	eb10 000c 	adds.w	r0, r0, ip
 8000c70:	f1c3 0320 	rsb	r3, r3, #32
 8000c74:	fa01 f103 	lsl.w	r1, r1, r3
 8000c78:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c7c:	d502      	bpl.n	8000c84 <__addsf3+0x78>
 8000c7e:	4249      	negs	r1, r1
 8000c80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c84:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c88:	d313      	bcc.n	8000cb2 <__addsf3+0xa6>
 8000c8a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c8e:	d306      	bcc.n	8000c9e <__addsf3+0x92>
 8000c90:	0840      	lsrs	r0, r0, #1
 8000c92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c96:	f102 0201 	add.w	r2, r2, #1
 8000c9a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c9c:	d251      	bcs.n	8000d42 <__addsf3+0x136>
 8000c9e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000ca2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca6:	bf08      	it	eq
 8000ca8:	f020 0001 	biceq.w	r0, r0, #1
 8000cac:	ea40 0003 	orr.w	r0, r0, r3
 8000cb0:	4770      	bx	lr
 8000cb2:	0049      	lsls	r1, r1, #1
 8000cb4:	eb40 0000 	adc.w	r0, r0, r0
 8000cb8:	3a01      	subs	r2, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cc0:	d2ed      	bcs.n	8000c9e <__addsf3+0x92>
 8000cc2:	fab0 fc80 	clz	ip, r0
 8000cc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cca:	ebb2 020c 	subs.w	r2, r2, ip
 8000cce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cd2:	bfaa      	itet	ge
 8000cd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd8:	4252      	neglt	r2, r2
 8000cda:	4318      	orrge	r0, r3
 8000cdc:	bfbc      	itt	lt
 8000cde:	40d0      	lsrlt	r0, r2
 8000ce0:	4318      	orrlt	r0, r3
 8000ce2:	4770      	bx	lr
 8000ce4:	f092 0f00 	teq	r2, #0
 8000ce8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cec:	bf06      	itte	eq
 8000cee:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cf2:	3201      	addeq	r2, #1
 8000cf4:	3b01      	subne	r3, #1
 8000cf6:	e7b5      	b.n	8000c64 <__addsf3+0x58>
 8000cf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d00:	bf18      	it	ne
 8000d02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d06:	d021      	beq.n	8000d4c <__addsf3+0x140>
 8000d08:	ea92 0f03 	teq	r2, r3
 8000d0c:	d004      	beq.n	8000d18 <__addsf3+0x10c>
 8000d0e:	f092 0f00 	teq	r2, #0
 8000d12:	bf08      	it	eq
 8000d14:	4608      	moveq	r0, r1
 8000d16:	4770      	bx	lr
 8000d18:	ea90 0f01 	teq	r0, r1
 8000d1c:	bf1c      	itt	ne
 8000d1e:	2000      	movne	r0, #0
 8000d20:	4770      	bxne	lr
 8000d22:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d26:	d104      	bne.n	8000d32 <__addsf3+0x126>
 8000d28:	0040      	lsls	r0, r0, #1
 8000d2a:	bf28      	it	cs
 8000d2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d30:	4770      	bx	lr
 8000d32:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d36:	bf3c      	itt	cc
 8000d38:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d3c:	4770      	bxcc	lr
 8000d3e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d42:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d46:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d4a:	4770      	bx	lr
 8000d4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d50:	bf16      	itet	ne
 8000d52:	4608      	movne	r0, r1
 8000d54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d58:	4601      	movne	r1, r0
 8000d5a:	0242      	lsls	r2, r0, #9
 8000d5c:	bf06      	itte	eq
 8000d5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d62:	ea90 0f01 	teqeq	r0, r1
 8000d66:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_ui2f>:
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	e004      	b.n	8000d7c <__aeabi_i2f+0x8>
 8000d72:	bf00      	nop

08000d74 <__aeabi_i2f>:
 8000d74:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d78:	bf48      	it	mi
 8000d7a:	4240      	negmi	r0, r0
 8000d7c:	ea5f 0c00 	movs.w	ip, r0
 8000d80:	bf08      	it	eq
 8000d82:	4770      	bxeq	lr
 8000d84:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d88:	4601      	mov	r1, r0
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	e01c      	b.n	8000dca <__aeabi_l2f+0x2a>

08000d90 <__aeabi_ul2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e00a      	b.n	8000db4 <__aeabi_l2f+0x14>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_l2f>:
 8000da0:	ea50 0201 	orrs.w	r2, r0, r1
 8000da4:	bf08      	it	eq
 8000da6:	4770      	bxeq	lr
 8000da8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000dac:	d502      	bpl.n	8000db4 <__aeabi_l2f+0x14>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	ea5f 0c01 	movs.w	ip, r1
 8000db8:	bf02      	ittt	eq
 8000dba:	4684      	moveq	ip, r0
 8000dbc:	4601      	moveq	r1, r0
 8000dbe:	2000      	moveq	r0, #0
 8000dc0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dc4:	bf08      	it	eq
 8000dc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dca:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dce:	fabc f28c 	clz	r2, ip
 8000dd2:	3a08      	subs	r2, #8
 8000dd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd8:	db10      	blt.n	8000dfc <__aeabi_l2f+0x5c>
 8000dda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dde:	4463      	add	r3, ip
 8000de0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dec:	fa20 f202 	lsr.w	r2, r0, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	f020 0001 	biceq.w	r0, r0, #1
 8000dfa:	4770      	bx	lr
 8000dfc:	f102 0220 	add.w	r2, r2, #32
 8000e00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e04:	f1c2 0220 	rsb	r2, r2, #32
 8000e08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e10:	eb43 0002 	adc.w	r0, r3, r2
 8000e14:	bf08      	it	eq
 8000e16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1a:	4770      	bx	lr

08000e1c <__aeabi_fmul>:
 8000e1c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e24:	bf1e      	ittt	ne
 8000e26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2a:	ea92 0f0c 	teqne	r2, ip
 8000e2e:	ea93 0f0c 	teqne	r3, ip
 8000e32:	d06f      	beq.n	8000f14 <__aeabi_fmul+0xf8>
 8000e34:	441a      	add	r2, r3
 8000e36:	ea80 0c01 	eor.w	ip, r0, r1
 8000e3a:	0240      	lsls	r0, r0, #9
 8000e3c:	bf18      	it	ne
 8000e3e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e42:	d01e      	beq.n	8000e82 <__aeabi_fmul+0x66>
 8000e44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e48:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e4c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e50:	fba0 3101 	umull	r3, r1, r0, r1
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e58:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e5c:	bf3e      	ittt	cc
 8000e5e:	0049      	lslcc	r1, r1, #1
 8000e60:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e64:	005b      	lslcc	r3, r3, #1
 8000e66:	ea40 0001 	orr.w	r0, r0, r1
 8000e6a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e6e:	2afd      	cmp	r2, #253	@ 0xfd
 8000e70:	d81d      	bhi.n	8000eae <__aeabi_fmul+0x92>
 8000e72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7a:	bf08      	it	eq
 8000e7c:	f020 0001 	biceq.w	r0, r0, #1
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e8a:	bf08      	it	eq
 8000e8c:	0249      	lsleq	r1, r1, #9
 8000e8e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e92:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e96:	3a7f      	subs	r2, #127	@ 0x7f
 8000e98:	bfc2      	ittt	gt
 8000e9a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e9e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea2:	4770      	bxgt	lr
 8000ea4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	3a01      	subs	r2, #1
 8000eae:	dc5d      	bgt.n	8000f6c <__aeabi_fmul+0x150>
 8000eb0:	f112 0f19 	cmn.w	r2, #25
 8000eb4:	bfdc      	itt	le
 8000eb6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000eba:	4770      	bxle	lr
 8000ebc:	f1c2 0200 	rsb	r2, r2, #0
 8000ec0:	0041      	lsls	r1, r0, #1
 8000ec2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ec6:	f1c2 0220 	rsb	r2, r2, #32
 8000eca:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ece:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ed2:	f140 0000 	adc.w	r0, r0, #0
 8000ed6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eda:	bf08      	it	eq
 8000edc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee0:	4770      	bx	lr
 8000ee2:	f092 0f00 	teq	r2, #0
 8000ee6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0040      	lsleq	r0, r0, #1
 8000eee:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ef2:	3a01      	subeq	r2, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fmul+0xce>
 8000ef6:	ea40 000c 	orr.w	r0, r0, ip
 8000efa:	f093 0f00 	teq	r3, #0
 8000efe:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f02:	bf02      	ittt	eq
 8000f04:	0049      	lsleq	r1, r1, #1
 8000f06:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f0a:	3b01      	subeq	r3, #1
 8000f0c:	d0f9      	beq.n	8000f02 <__aeabi_fmul+0xe6>
 8000f0e:	ea41 010c 	orr.w	r1, r1, ip
 8000f12:	e78f      	b.n	8000e34 <__aeabi_fmul+0x18>
 8000f14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f18:	ea92 0f0c 	teq	r2, ip
 8000f1c:	bf18      	it	ne
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d00a      	beq.n	8000f3a <__aeabi_fmul+0x11e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1d8      	bne.n	8000ee2 <__aeabi_fmul+0xc6>
 8000f30:	ea80 0001 	eor.w	r0, r0, r1
 8000f34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f38:	4770      	bx	lr
 8000f3a:	f090 0f00 	teq	r0, #0
 8000f3e:	bf17      	itett	ne
 8000f40:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f44:	4608      	moveq	r0, r1
 8000f46:	f091 0f00 	teqne	r1, #0
 8000f4a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f4e:	d014      	beq.n	8000f7a <__aeabi_fmul+0x15e>
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d101      	bne.n	8000f5a <__aeabi_fmul+0x13e>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	d10f      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f5a:	ea93 0f0c 	teq	r3, ip
 8000f5e:	d103      	bne.n	8000f68 <__aeabi_fmul+0x14c>
 8000f60:	024b      	lsls	r3, r1, #9
 8000f62:	bf18      	it	ne
 8000f64:	4608      	movne	r0, r1
 8000f66:	d108      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f78:	4770      	bx	lr
 8000f7a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f7e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_fdiv>:
 8000f84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f8c:	bf1e      	ittt	ne
 8000f8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f92:	ea92 0f0c 	teqne	r2, ip
 8000f96:	ea93 0f0c 	teqne	r3, ip
 8000f9a:	d069      	beq.n	8001070 <__aeabi_fdiv+0xec>
 8000f9c:	eba2 0203 	sub.w	r2, r2, r3
 8000fa0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fa4:	0249      	lsls	r1, r1, #9
 8000fa6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000faa:	d037      	beq.n	800101c <__aeabi_fdiv+0x98>
 8000fac:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000fb0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fb4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000fbc:	428b      	cmp	r3, r1
 8000fbe:	bf38      	it	cc
 8000fc0:	005b      	lslcc	r3, r3, #1
 8000fc2:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000fc6:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	bf24      	itt	cs
 8000fce:	1a5b      	subcs	r3, r3, r1
 8000fd0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fd4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd8:	bf24      	itt	cs
 8000fda:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fde:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fe2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fe6:	bf24      	itt	cs
 8000fe8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ff0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ff4:	bf24      	itt	cs
 8000ff6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ffa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	bf18      	it	ne
 8001002:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001006:	d1e0      	bne.n	8000fca <__aeabi_fdiv+0x46>
 8001008:	2afd      	cmp	r2, #253	@ 0xfd
 800100a:	f63f af50 	bhi.w	8000eae <__aeabi_fmul+0x92>
 800100e:	428b      	cmp	r3, r1
 8001010:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001014:	bf08      	it	eq
 8001016:	f020 0001 	biceq.w	r0, r0, #1
 800101a:	4770      	bx	lr
 800101c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001020:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001024:	327f      	adds	r2, #127	@ 0x7f
 8001026:	bfc2      	ittt	gt
 8001028:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800102c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001030:	4770      	bxgt	lr
 8001032:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	3a01      	subs	r2, #1
 800103c:	e737      	b.n	8000eae <__aeabi_fmul+0x92>
 800103e:	f092 0f00 	teq	r2, #0
 8001042:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8001046:	bf02      	ittt	eq
 8001048:	0040      	lsleq	r0, r0, #1
 800104a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800104e:	3a01      	subeq	r2, #1
 8001050:	d0f9      	beq.n	8001046 <__aeabi_fdiv+0xc2>
 8001052:	ea40 000c 	orr.w	r0, r0, ip
 8001056:	f093 0f00 	teq	r3, #0
 800105a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800105e:	bf02      	ittt	eq
 8001060:	0049      	lsleq	r1, r1, #1
 8001062:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8001066:	3b01      	subeq	r3, #1
 8001068:	d0f9      	beq.n	800105e <__aeabi_fdiv+0xda>
 800106a:	ea41 010c 	orr.w	r1, r1, ip
 800106e:	e795      	b.n	8000f9c <__aeabi_fdiv+0x18>
 8001070:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001074:	ea92 0f0c 	teq	r2, ip
 8001078:	d108      	bne.n	800108c <__aeabi_fdiv+0x108>
 800107a:	0242      	lsls	r2, r0, #9
 800107c:	f47f af7d 	bne.w	8000f7a <__aeabi_fmul+0x15e>
 8001080:	ea93 0f0c 	teq	r3, ip
 8001084:	f47f af70 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 8001088:	4608      	mov	r0, r1
 800108a:	e776      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800108c:	ea93 0f0c 	teq	r3, ip
 8001090:	d104      	bne.n	800109c <__aeabi_fdiv+0x118>
 8001092:	024b      	lsls	r3, r1, #9
 8001094:	f43f af4c 	beq.w	8000f30 <__aeabi_fmul+0x114>
 8001098:	4608      	mov	r0, r1
 800109a:	e76e      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800109c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010a0:	bf18      	it	ne
 80010a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80010a6:	d1ca      	bne.n	800103e <__aeabi_fdiv+0xba>
 80010a8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010ac:	f47f af5c 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 80010b0:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010b4:	f47f af3c 	bne.w	8000f30 <__aeabi_fmul+0x114>
 80010b8:	e75f      	b.n	8000f7a <__aeabi_fmul+0x15e>
 80010ba:	bf00      	nop

080010bc <__gesf2>:
 80010bc:	f04f 3cff 	mov.w	ip, #4294967295
 80010c0:	e006      	b.n	80010d0 <__cmpsf2+0x4>
 80010c2:	bf00      	nop

080010c4 <__lesf2>:
 80010c4:	f04f 0c01 	mov.w	ip, #1
 80010c8:	e002      	b.n	80010d0 <__cmpsf2+0x4>
 80010ca:	bf00      	nop

080010cc <__cmpsf2>:
 80010cc:	f04f 0c01 	mov.w	ip, #1
 80010d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e0:	bf18      	it	ne
 80010e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010e6:	d011      	beq.n	800110c <__cmpsf2+0x40>
 80010e8:	b001      	add	sp, #4
 80010ea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010ee:	bf18      	it	ne
 80010f0:	ea90 0f01 	teqne	r0, r1
 80010f4:	bf58      	it	pl
 80010f6:	ebb2 0003 	subspl.w	r0, r2, r3
 80010fa:	bf88      	it	hi
 80010fc:	17c8      	asrhi	r0, r1, #31
 80010fe:	bf38      	it	cc
 8001100:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001104:	bf18      	it	ne
 8001106:	f040 0001 	orrne.w	r0, r0, #1
 800110a:	4770      	bx	lr
 800110c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001110:	d102      	bne.n	8001118 <__cmpsf2+0x4c>
 8001112:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001116:	d105      	bne.n	8001124 <__cmpsf2+0x58>
 8001118:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800111c:	d1e4      	bne.n	80010e8 <__cmpsf2+0x1c>
 800111e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001122:	d0e1      	beq.n	80010e8 <__cmpsf2+0x1c>
 8001124:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop

0800112c <__aeabi_cfrcmple>:
 800112c:	4684      	mov	ip, r0
 800112e:	4608      	mov	r0, r1
 8001130:	4661      	mov	r1, ip
 8001132:	e7ff      	b.n	8001134 <__aeabi_cfcmpeq>

08001134 <__aeabi_cfcmpeq>:
 8001134:	b50f      	push	{r0, r1, r2, r3, lr}
 8001136:	f7ff ffc9 	bl	80010cc <__cmpsf2>
 800113a:	2800      	cmp	r0, #0
 800113c:	bf48      	it	mi
 800113e:	f110 0f00 	cmnmi.w	r0, #0
 8001142:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001144 <__aeabi_fcmpeq>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff fff4 	bl	8001134 <__aeabi_cfcmpeq>
 800114c:	bf0c      	ite	eq
 800114e:	2001      	moveq	r0, #1
 8001150:	2000      	movne	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmplt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffea 	bl	8001134 <__aeabi_cfcmpeq>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_fcmple>:
 800116c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001170:	f7ff ffe0 	bl	8001134 <__aeabi_cfcmpeq>
 8001174:	bf94      	ite	ls
 8001176:	2001      	movls	r0, #1
 8001178:	2000      	movhi	r0, #0
 800117a:	f85d fb08 	ldr.w	pc, [sp], #8
 800117e:	bf00      	nop

08001180 <__aeabi_fcmpge>:
 8001180:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001184:	f7ff ffd2 	bl	800112c <__aeabi_cfrcmple>
 8001188:	bf94      	ite	ls
 800118a:	2001      	movls	r0, #1
 800118c:	2000      	movhi	r0, #0
 800118e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001192:	bf00      	nop

08001194 <__aeabi_fcmpgt>:
 8001194:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001198:	f7ff ffc8 	bl	800112c <__aeabi_cfrcmple>
 800119c:	bf34      	ite	cc
 800119e:	2001      	movcc	r0, #1
 80011a0:	2000      	movcs	r0, #0
 80011a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011a6:	bf00      	nop

080011a8 <__aeabi_f2iz>:
 80011a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011b0:	d30f      	bcc.n	80011d2 <__aeabi_f2iz+0x2a>
 80011b2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ba:	d90d      	bls.n	80011d8 <__aeabi_f2iz+0x30>
 80011bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011c4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80011c8:	fa23 f002 	lsr.w	r0, r3, r2
 80011cc:	bf18      	it	ne
 80011ce:	4240      	negne	r0, r0
 80011d0:	4770      	bx	lr
 80011d2:	f04f 0000 	mov.w	r0, #0
 80011d6:	4770      	bx	lr
 80011d8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011dc:	d101      	bne.n	80011e2 <__aeabi_f2iz+0x3a>
 80011de:	0242      	lsls	r2, r0, #9
 80011e0:	d105      	bne.n	80011ee <__aeabi_f2iz+0x46>
 80011e2:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80011e6:	bf08      	it	eq
 80011e8:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80011ec:	4770      	bx	lr
 80011ee:	f04f 0000 	mov.w	r0, #0
 80011f2:	4770      	bx	lr

080011f4 <__aeabi_f2uiz>:
 80011f4:	0042      	lsls	r2, r0, #1
 80011f6:	d20e      	bcs.n	8001216 <__aeabi_f2uiz+0x22>
 80011f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011fc:	d30b      	bcc.n	8001216 <__aeabi_f2uiz+0x22>
 80011fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001202:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001206:	d409      	bmi.n	800121c <__aeabi_f2uiz+0x28>
 8001208:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800120c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001210:	fa23 f002 	lsr.w	r0, r3, r2
 8001214:	4770      	bx	lr
 8001216:	f04f 0000 	mov.w	r0, #0
 800121a:	4770      	bx	lr
 800121c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001220:	d101      	bne.n	8001226 <__aeabi_f2uiz+0x32>
 8001222:	0242      	lsls	r2, r0, #9
 8001224:	d102      	bne.n	800122c <__aeabi_f2uiz+0x38>
 8001226:	f04f 30ff 	mov.w	r0, #4294967295
 800122a:	4770      	bx	lr
 800122c:	f04f 0000 	mov.w	r0, #0
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <Bsp_Led_Show_State_Handle>:
#include "stdlib.h"


// The LED displays the current operating status, which is invoked every 10 milliseconds, and the LED blinks every 200 milliseconds.  
void Bsp_Led_Show_State_Handle(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
	static uint8_t led_count = 0;
	led_count++;
 8001238:	4b08      	ldr	r3, [pc, #32]	@ (800125c <Bsp_Led_Show_State_Handle+0x28>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	3301      	adds	r3, #1
 800123e:	b2da      	uxtb	r2, r3
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <Bsp_Led_Show_State_Handle+0x28>)
 8001242:	701a      	strb	r2, [r3, #0]
	if (led_count > 20)
 8001244:	4b05      	ldr	r3, [pc, #20]	@ (800125c <Bsp_Led_Show_State_Handle+0x28>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b14      	cmp	r3, #20
 800124a:	d902      	bls.n	8001252 <Bsp_Led_Show_State_Handle+0x1e>
	{
		led_count = 0;
 800124c:	4b03      	ldr	r3, [pc, #12]	@ (800125c <Bsp_Led_Show_State_Handle+0x28>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
//		LED_TOGGLE();
	}
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000250 	.word	0x20000250

08001260 <Bsp_Init>:


// The peripheral device is initialized
void Bsp_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	USART1_Init();
 8001264:	f001 fd08 	bl	8002c78 <USART1_Init>
	ICM20948_init();
 8001268:	f000 fd00 	bl	8001c6c <ICM20948_init>
	AK09916_init();
 800126c:	f000 fd28 	bl	8001cc0 <AK09916_init>
	Encoder_Init();
 8001270:	f000 fa3a 	bl	80016e8 <Encoder_Init>
	PwmServo_Init();
 8001274:	f001 fc6c 	bl	8002b50 <PwmServo_Init>
	Beep_On_Time(50);
 8001278:	2032      	movs	r0, #50	@ 0x32
 800127a:	f000 f97b 	bl	8001574 <Beep_On_Time>
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <Bsp_Loop>:
int state = 0;
int jump = 0;
// main.c。
// This function is called in a loop in main.c to avoid multiple modifications to the main.c file
void Bsp_Loop(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0



	HAL_UART_RxCpltCallback(&huart1);
 800128a:	4866      	ldr	r0, [pc, #408]	@ (8001424 <Bsp_Loop+0x1a0>)
 800128c:	f001 fd14 	bl	8002cb8 <HAL_UART_RxCpltCallback>

	if(RxComplete)
 8001290:	4b65      	ldr	r3, [pc, #404]	@ (8001428 <Bsp_Loop+0x1a4>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d05f      	beq.n	8001358 <Bsp_Loop+0xd4>
	{
		if(RxTemp == '0') //start
 8001298:	4b64      	ldr	r3, [pc, #400]	@ (800142c <Bsp_Loop+0x1a8>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b30      	cmp	r3, #48	@ 0x30
 800129e:	d102      	bne.n	80012a6 <Bsp_Loop+0x22>
				{
					state=1;
 80012a0:	4b63      	ldr	r3, [pc, #396]	@ (8001430 <Bsp_Loop+0x1ac>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]

				}
		if(RxTemp == '1') //end
 80012a6:	4b61      	ldr	r3, [pc, #388]	@ (800142c <Bsp_Loop+0x1a8>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b31      	cmp	r3, #49	@ 0x31
 80012ac:	d10a      	bne.n	80012c4 <Bsp_Loop+0x40>
				{
					state=0;
 80012ae:	4b60      	ldr	r3, [pc, #384]	@ (8001430 <Bsp_Loop+0x1ac>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
					Motor_Set_Pwm(MOTOR_ID_M1, 0);
 80012b4:	2100      	movs	r1, #0
 80012b6:	2000      	movs	r0, #0
 80012b8:	f001 fb4c 	bl	8002954 <Motor_Set_Pwm>
					Motor_Set_Pwm(MOTOR_ID_M2, 0);
 80012bc:	2100      	movs	r1, #0
 80012be:	2001      	movs	r0, #1
 80012c0:	f001 fb48 	bl	8002954 <Motor_Set_Pwm>

				}

		if(RxTemp == '6') //forward
 80012c4:	4b59      	ldr	r3, [pc, #356]	@ (800142c <Bsp_Loop+0x1a8>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b36      	cmp	r3, #54	@ 0x36
 80012ca:	d102      	bne.n	80012d2 <Bsp_Loop+0x4e>
				{
					setvel=50;
 80012cc:	4b59      	ldr	r3, [pc, #356]	@ (8001434 <Bsp_Loop+0x1b0>)
 80012ce:	4a5a      	ldr	r2, [pc, #360]	@ (8001438 <Bsp_Loop+0x1b4>)
 80012d0:	601a      	str	r2, [r3, #0]

				}
		if(RxTemp == '7') //backward
 80012d2:	4b56      	ldr	r3, [pc, #344]	@ (800142c <Bsp_Loop+0x1a8>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b37      	cmp	r3, #55	@ 0x37
 80012d8:	d102      	bne.n	80012e0 <Bsp_Loop+0x5c>
		{
			setvel=-50;
 80012da:	4b56      	ldr	r3, [pc, #344]	@ (8001434 <Bsp_Loop+0x1b0>)
 80012dc:	4a57      	ldr	r2, [pc, #348]	@ (800143c <Bsp_Loop+0x1b8>)
 80012de:	601a      	str	r2, [r3, #0]
		}
		if(RxTemp == '5') //stop
 80012e0:	4b52      	ldr	r3, [pc, #328]	@ (800142c <Bsp_Loop+0x1a8>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b35      	cmp	r3, #53	@ 0x35
 80012e6:	d103      	bne.n	80012f0 <Bsp_Loop+0x6c>
		{
			setvel=0;
 80012e8:	4b52      	ldr	r3, [pc, #328]	@ (8001434 <Bsp_Loop+0x1b0>)
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
		}
		if(RxTemp == '8')//left
 80012f0:	4b4e      	ldr	r3, [pc, #312]	@ (800142c <Bsp_Loop+0x1a8>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b38      	cmp	r3, #56	@ 0x38
 80012f6:	d115      	bne.n	8001324 <Bsp_Loop+0xa0>
		{
			setvel=0;
 80012f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001434 <Bsp_Loop+0x1b0>)
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
			for(int i=1;i<300;i++){
 8001300:	2301      	movs	r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	e00a      	b.n	800131c <Bsp_Loop+0x98>
			setpoint_encoder+=3;
 8001306:	4b4e      	ldr	r3, [pc, #312]	@ (8001440 <Bsp_Loop+0x1bc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3303      	adds	r3, #3
 800130c:	4a4c      	ldr	r2, [pc, #304]	@ (8001440 <Bsp_Loop+0x1bc>)
 800130e:	6013      	str	r3, [r2, #0]
			HAL_Delay(2);
 8001310:	2002      	movs	r0, #2
 8001312:	f002 fca3 	bl	8003c5c <HAL_Delay>
			for(int i=1;i<300;i++){
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	3301      	adds	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001322:	dbf0      	blt.n	8001306 <Bsp_Loop+0x82>
			}
		}
		if(RxTemp == '9')//right
 8001324:	4b41      	ldr	r3, [pc, #260]	@ (800142c <Bsp_Loop+0x1a8>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b39      	cmp	r3, #57	@ 0x39
 800132a:	d115      	bne.n	8001358 <Bsp_Loop+0xd4>
		{
			setvel=0;
 800132c:	4b41      	ldr	r3, [pc, #260]	@ (8001434 <Bsp_Loop+0x1b0>)
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
			for(int i=1;i<300;i++){
 8001334:	2301      	movs	r3, #1
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	e00a      	b.n	8001350 <Bsp_Loop+0xcc>
			setpoint_encoder-=3;
 800133a:	4b41      	ldr	r3, [pc, #260]	@ (8001440 <Bsp_Loop+0x1bc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	3b03      	subs	r3, #3
 8001340:	4a3f      	ldr	r2, [pc, #252]	@ (8001440 <Bsp_Loop+0x1bc>)
 8001342:	6013      	str	r3, [r2, #0]
			HAL_Delay(2);
 8001344:	2002      	movs	r0, #2
 8001346:	f002 fc89 	bl	8003c5c <HAL_Delay>
			for(int i=1;i<300;i++){
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	3301      	adds	r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001356:	dbf0      	blt.n	800133a <Bsp_Loop+0xb6>
		}


	}

	RxComplete = 0;
 8001358:	4b33      	ldr	r3, [pc, #204]	@ (8001428 <Bsp_Loop+0x1a4>)
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, &RxTemp, 1);
 800135e:	2201      	movs	r2, #1
 8001360:	4932      	ldr	r1, [pc, #200]	@ (800142c <Bsp_Loop+0x1a8>)
 8001362:	4830      	ldr	r0, [pc, #192]	@ (8001424 <Bsp_Loop+0x1a0>)
 8001364:	f006 f86c 	bl	8007440 <HAL_UART_Receive_IT>

	if (Key1_State(KEY_MODE_ONE_TIME))
 8001368:	2001      	movs	r0, #1
 800136a:	f001 fa35 	bl	80027d8 <Key1_State>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d004      	beq.n	800137e <Bsp_Loop+0xfa>
	{

		state++;
 8001374:	4b2e      	ldr	r3, [pc, #184]	@ (8001430 <Bsp_Loop+0x1ac>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	4a2d      	ldr	r2, [pc, #180]	@ (8001430 <Bsp_Loop+0x1ac>)
 800137c:	6013      	str	r3, [r2, #0]
	}
	if(state==2){
 800137e:	4b2c      	ldr	r3, [pc, #176]	@ (8001430 <Bsp_Loop+0x1ac>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b02      	cmp	r3, #2
 8001384:	d10a      	bne.n	800139c <Bsp_Loop+0x118>
				setvel=30;
 8001386:	4b2b      	ldr	r3, [pc, #172]	@ (8001434 <Bsp_Loop+0x1b0>)
 8001388:	4a2e      	ldr	r2, [pc, #184]	@ (8001444 <Bsp_Loop+0x1c0>)
 800138a:	601a      	str	r2, [r3, #0]
				HAL_Delay(2000);
 800138c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001390:	f002 fc64 	bl	8003c5c <HAL_Delay>
				leftdown(30);
 8001394:	201e      	movs	r0, #30
 8001396:	f000 f857 	bl	8001448 <leftdown>
 800139a:	e038      	b.n	800140e <Bsp_Loop+0x18a>
//				HAL_Delay(2);
//				}
//				leftup(30);

		}
	else if(state==3){
 800139c:	4b24      	ldr	r3, [pc, #144]	@ (8001430 <Bsp_Loop+0x1ac>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b03      	cmp	r3, #3
 80013a2:	d117      	bne.n	80013d4 <Bsp_Loop+0x150>
		for(int i=1;i<1000;i++){
 80013a4:	2301      	movs	r3, #1
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	e00a      	b.n	80013c0 <Bsp_Loop+0x13c>
		setpoint_encoder-=10;
 80013aa:	4b25      	ldr	r3, [pc, #148]	@ (8001440 <Bsp_Loop+0x1bc>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	3b0a      	subs	r3, #10
 80013b0:	4a23      	ldr	r2, [pc, #140]	@ (8001440 <Bsp_Loop+0x1bc>)
 80013b2:	6013      	str	r3, [r2, #0]
		HAL_Delay(2);
 80013b4:	2002      	movs	r0, #2
 80013b6:	f002 fc51 	bl	8003c5c <HAL_Delay>
		for(int i=1;i<1000;i++){
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3301      	adds	r3, #1
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013c6:	dbf0      	blt.n	80013aa <Bsp_Loop+0x126>
		}
		state++;
 80013c8:	4b19      	ldr	r3, [pc, #100]	@ (8001430 <Bsp_Loop+0x1ac>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	3301      	adds	r3, #1
 80013ce:	4a18      	ldr	r2, [pc, #96]	@ (8001430 <Bsp_Loop+0x1ac>)
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e01c      	b.n	800140e <Bsp_Loop+0x18a>
		}
	else if(state==4){
 80013d4:	4b16      	ldr	r3, [pc, #88]	@ (8001430 <Bsp_Loop+0x1ac>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b04      	cmp	r3, #4
 80013da:	d118      	bne.n	800140e <Bsp_Loop+0x18a>
		setvel=0;
 80013dc:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <Bsp_Loop+0x1b0>)
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
		//HAL_Delay(5000);
		for(int i=1;i<1000;i++){
 80013e4:	2301      	movs	r3, #1
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	e00a      	b.n	8001400 <Bsp_Loop+0x17c>
		setpoint_encoder+=10;
 80013ea:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <Bsp_Loop+0x1bc>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	330a      	adds	r3, #10
 80013f0:	4a13      	ldr	r2, [pc, #76]	@ (8001440 <Bsp_Loop+0x1bc>)
 80013f2:	6013      	str	r3, [r2, #0]
		HAL_Delay(2);
 80013f4:	2002      	movs	r0, #2
 80013f6:	f002 fc31 	bl	8003c5c <HAL_Delay>
		for(int i=1;i<1000;i++){
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001406:	dbf0      	blt.n	80013ea <Bsp_Loop+0x166>
		}
		state=3;
 8001408:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <Bsp_Loop+0x1ac>)
 800140a:	2203      	movs	r2, #3
 800140c:	601a      	str	r2, [r3, #0]
	}



	Bsp_Led_Show_State_Handle();
 800140e:	f7ff ff11 	bl	8001234 <Bsp_Led_Show_State_Handle>
	Beep_Timeout_Close_Handle();
 8001412:	f000 f8ef 	bl	80015f4 <Beep_Timeout_Close_Handle>
	HAL_Delay(10);
 8001416:	200a      	movs	r0, #10
 8001418:	f002 fc20 	bl	8003c5c <HAL_Delay>
}
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000520 	.word	0x20000520
 8001428:	20000305 	.word	0x20000305
 800142c:	20000304 	.word	0x20000304
 8001430:	2000024c 	.word	0x2000024c
 8001434:	200002e8 	.word	0x200002e8
 8001438:	42480000 	.word	0x42480000
 800143c:	c2480000 	.word	0xc2480000
 8001440:	200002d8 	.word	0x200002d8
 8001444:	41f00000 	.word	0x41f00000

08001448 <leftdown>:
		max_setpoint+=0.308;
		setpoint+=0.308;
		HAL_Delay(sit_speed);
	}
}
void leftdown(int sit_speed){
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	for(int i=1;i<41;i++){
 8001450:	2301      	movs	r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	e048      	b.n	80014e8 <leftdown+0xa0>
		PwmServo_Set_Angle_All(40, 140+i, 30, 30);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	3b74      	subs	r3, #116	@ 0x74
 800145c:	b2d9      	uxtb	r1, r3
 800145e:	231e      	movs	r3, #30
 8001460:	221e      	movs	r2, #30
 8001462:	2028      	movs	r0, #40	@ 0x28
 8001464:	f001 fb94 	bl	8002b90 <PwmServo_Set_Angle_All>
		min_setpoint-=0.184;
 8001468:	4b25      	ldr	r3, [pc, #148]	@ (8001500 <leftdown+0xb8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f847 	bl	8000500 <__aeabi_f2d>
 8001472:	a321      	add	r3, pc, #132	@ (adr r3, 80014f8 <leftdown+0xb0>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7fe fee2 	bl	8000240 <__aeabi_dsub>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff fb6c 	bl	8000b60 <__aeabi_d2f>
 8001488:	4603      	mov	r3, r0
 800148a:	4a1d      	ldr	r2, [pc, #116]	@ (8001500 <leftdown+0xb8>)
 800148c:	6013      	str	r3, [r2, #0]
		max_setpoint-=0.184;
 800148e:	4b1d      	ldr	r3, [pc, #116]	@ (8001504 <leftdown+0xbc>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f834 	bl	8000500 <__aeabi_f2d>
 8001498:	a317      	add	r3, pc, #92	@ (adr r3, 80014f8 <leftdown+0xb0>)
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	f7fe fecf 	bl	8000240 <__aeabi_dsub>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	f7ff fb59 	bl	8000b60 <__aeabi_d2f>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4a14      	ldr	r2, [pc, #80]	@ (8001504 <leftdown+0xbc>)
 80014b2:	6013      	str	r3, [r2, #0]
		setpoint-=0.184;
 80014b4:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <leftdown+0xc0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f821 	bl	8000500 <__aeabi_f2d>
 80014be:	a30e      	add	r3, pc, #56	@ (adr r3, 80014f8 <leftdown+0xb0>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7fe febc 	bl	8000240 <__aeabi_dsub>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	f7ff fb46 	bl	8000b60 <__aeabi_d2f>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001508 <leftdown+0xc0>)
 80014d8:	6013      	str	r3, [r2, #0]
		HAL_Delay(sit_speed);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4618      	mov	r0, r3
 80014de:	f002 fbbd 	bl	8003c5c <HAL_Delay>
	for(int i=1;i<41;i++){
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	3301      	adds	r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b28      	cmp	r3, #40	@ 0x28
 80014ec:	ddb3      	ble.n	8001456 <leftdown+0xe>
	}
}
 80014ee:	bf00      	nop
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	df3b645a 	.word	0xdf3b645a
 80014fc:	3fc78d4f 	.word	0x3fc78d4f
 8001500:	20000034 	.word	0x20000034
 8001504:	20000030 	.word	0x20000030
 8001508:	20000014 	.word	0x20000014

0800150c <Beep_Set_Time>:
uint8_t beep_state = 0;

// 刷新蜂鸣器打开的时间
// Refreshes the buzzer time
static void Beep_Set_Time(uint16_t time)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	80fb      	strh	r3, [r7, #6]
	beep_on_time = time;
 8001516:	4a04      	ldr	r2, [pc, #16]	@ (8001528 <Beep_Set_Time+0x1c>)
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	8013      	strh	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000252 	.word	0x20000252

0800152c <Beep_Get_Time>:

// 获取当前蜂鸣器打开的剩余时间
// Gets the remaining time of the current buzzer on
static uint16_t Beep_Get_Time(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
	return beep_on_time;
 8001530:	4b02      	ldr	r3, [pc, #8]	@ (800153c <Beep_Get_Time+0x10>)
 8001532:	881b      	ldrh	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	20000252 	.word	0x20000252

08001540 <Beep_Set_State>:

// 刷新蜂鸣器的状态
// Refreshes the buzzer status
static void Beep_Set_State(uint8_t state)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
	beep_state = state;
 800154a:	4a04      	ldr	r2, [pc, #16]	@ (800155c <Beep_Set_State+0x1c>)
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	7013      	strb	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000254 	.word	0x20000254

08001560 <Beep_Get_State>:

// 获取蜂鸣器的状态
// Gets the status of the buzzer
static uint8_t Beep_Get_State(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
	return beep_state;
 8001564:	4b02      	ldr	r3, [pc, #8]	@ (8001570 <Beep_Get_State+0x10>)
 8001566:	781b      	ldrb	r3, [r3, #0]
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	20000254 	.word	0x20000254

08001574 <Beep_On_Time>:

// 设置蜂鸣器开启时间，time=0时关闭，time=1时一直响，time>=10，延迟xx毫秒后自动关闭
// Set the buzzer start time. The buzzer is disabled when time is 0, keeps ringing when time is 1, and automatically shuts down after time>=10  
void Beep_On_Time(uint16_t time)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	80fb      	strh	r3, [r7, #6]
	if (time == BEEP_STATE_ON_ALWAYS)
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d10b      	bne.n	800159c <Beep_On_Time+0x28>
	{
		Beep_Set_State(BEEP_STATE_ON_ALWAYS);
 8001584:	2001      	movs	r0, #1
 8001586:	f7ff ffdb 	bl	8001540 <Beep_Set_State>
		Beep_Set_Time(0);
 800158a:	2000      	movs	r0, #0
 800158c:	f7ff ffbe 	bl	800150c <Beep_Set_Time>
		BEEP_ON();
 8001590:	2201      	movs	r2, #1
 8001592:	2120      	movs	r1, #32
 8001594:	4815      	ldr	r0, [pc, #84]	@ (80015ec <Beep_On_Time+0x78>)
 8001596:	f003 fa34 	bl	8004a02 <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
			Beep_Set_Time(time / 10);
			BEEP_ON();
		}
	}
}
 800159a:	e022      	b.n	80015e2 <Beep_On_Time+0x6e>
	else if (time == BEEP_STATE_OFF)
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10b      	bne.n	80015ba <Beep_On_Time+0x46>
		Beep_Set_State(BEEP_STATE_OFF);
 80015a2:	2000      	movs	r0, #0
 80015a4:	f7ff ffcc 	bl	8001540 <Beep_Set_State>
		Beep_Set_Time(0);
 80015a8:	2000      	movs	r0, #0
 80015aa:	f7ff ffaf 	bl	800150c <Beep_Set_Time>
		BEEP_OFF();
 80015ae:	2200      	movs	r2, #0
 80015b0:	2120      	movs	r1, #32
 80015b2:	480e      	ldr	r0, [pc, #56]	@ (80015ec <Beep_On_Time+0x78>)
 80015b4:	f003 fa25 	bl	8004a02 <HAL_GPIO_WritePin>
}
 80015b8:	e013      	b.n	80015e2 <Beep_On_Time+0x6e>
		if (time >= 10)
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	2b09      	cmp	r3, #9
 80015be:	d910      	bls.n	80015e2 <Beep_On_Time+0x6e>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
 80015c0:	2002      	movs	r0, #2
 80015c2:	f7ff ffbd 	bl	8001540 <Beep_Set_State>
			Beep_Set_Time(time / 10);
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	4a09      	ldr	r2, [pc, #36]	@ (80015f0 <Beep_On_Time+0x7c>)
 80015ca:	fba2 2303 	umull	r2, r3, r2, r3
 80015ce:	08db      	lsrs	r3, r3, #3
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff ff9a 	bl	800150c <Beep_Set_Time>
			BEEP_ON();
 80015d8:	2201      	movs	r2, #1
 80015da:	2120      	movs	r1, #32
 80015dc:	4803      	ldr	r0, [pc, #12]	@ (80015ec <Beep_On_Time+0x78>)
 80015de:	f003 fa10 	bl	8004a02 <HAL_GPIO_WritePin>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40011000 	.word	0x40011000
 80015f0:	cccccccd 	.word	0xcccccccd

080015f4 <Beep_Timeout_Close_Handle>:

// 蜂鸣器超时自动关闭程序, 10毫秒调用一次 
// Buzzer timeout automatically shut down the program, 10 milliseconds to call once
void Beep_Timeout_Close_Handle(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	if (Beep_Get_State() == BEEP_STATE_ON_DELAY)
 80015f8:	f7ff ffb2 	bl	8001560 <Beep_Get_State>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d113      	bne.n	800162a <Beep_Timeout_Close_Handle+0x36>
	{
		if (Beep_Get_Time())
 8001602:	f7ff ff93 	bl	800152c <Beep_Get_Time>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d006      	beq.n	800161a <Beep_Timeout_Close_Handle+0x26>
		{
			beep_on_time--;
 800160c:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <Beep_Timeout_Close_Handle+0x3c>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	3b01      	subs	r3, #1
 8001612:	b29a      	uxth	r2, r3
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <Beep_Timeout_Close_Handle+0x3c>)
 8001616:	801a      	strh	r2, [r3, #0]
		{
			BEEP_OFF();
			Beep_Set_State(BEEP_STATE_OFF);
		}
	}
}
 8001618:	e007      	b.n	800162a <Beep_Timeout_Close_Handle+0x36>
			BEEP_OFF();
 800161a:	2200      	movs	r2, #0
 800161c:	2120      	movs	r1, #32
 800161e:	4805      	ldr	r0, [pc, #20]	@ (8001634 <Beep_Timeout_Close_Handle+0x40>)
 8001620:	f003 f9ef 	bl	8004a02 <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_OFF);
 8001624:	2000      	movs	r0, #0
 8001626:	f7ff ff8b 	bl	8001540 <Beep_Set_State>
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000252 	.word	0x20000252
 8001634:	40011000 	.word	0x40011000

08001638 <Encoder_Read_CNT>:
 * @Note: 
 * @Parm: Motor id：电机的ID号:MOTOR_ID_M1, MOTOR_ID_M2, MOTOR_ID_M3, MOTOR_ID_M4
 * @Retval: Returns encoder count data  返回编码器计数数据
 */
static int16_t Encoder_Read_CNT(uint8_t Motor_id)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
	int16_t Encoder_TIM = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	81fb      	strh	r3, [r7, #14]
	switch(Motor_id)
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <Encoder_Read_CNT+0x1a>
 800164c:	2b01      	cmp	r3, #1
 800164e:	d009      	beq.n	8001664 <Encoder_Read_CNT+0x2c>
	{
	case MOTOR_ID_M1:  Encoder_TIM = (short)TIM2 -> CNT; TIM2 -> CNT = 0; break;
	case MOTOR_ID_M2:  Encoder_TIM = (short)TIM4 -> CNT; TIM4 -> CNT = 0; break;

	default:  break;
 8001650:	e00f      	b.n	8001672 <Encoder_Read_CNT+0x3a>
	case MOTOR_ID_M1:  Encoder_TIM = (short)TIM2 -> CNT; TIM2 -> CNT = 0; break;
 8001652:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001658:	81fb      	strh	r3, [r7, #14]
 800165a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	@ 0x24
 8001662:	e006      	b.n	8001672 <Encoder_Read_CNT+0x3a>
	case MOTOR_ID_M2:  Encoder_TIM = (short)TIM4 -> CNT; TIM4 -> CNT = 0; break;
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <Encoder_Read_CNT+0x48>)
 8001666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001668:	81fb      	strh	r3, [r7, #14]
 800166a:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <Encoder_Read_CNT+0x48>)
 800166c:	2200      	movs	r2, #0
 800166e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001670:	bf00      	nop
	}
	return Encoder_TIM;
 8001672:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	40000800 	.word	0x40000800

08001684 <Encoder_Get_ALL>:
}

// 获取开机到现在总共的四路编码器计数。
// Get the total four - way encoder count up to now
void Encoder_Get_ALL(int* Encoder_all)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	Encoder_all[0] = g_Encoder_M1_Now;
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <Encoder_Get_ALL+0x24>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	601a      	str	r2, [r3, #0]
	Encoder_all[1] = g_Encoder_M2_Now;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3304      	adds	r3, #4
 8001698:	4a04      	ldr	r2, [pc, #16]	@ (80016ac <Encoder_Get_ALL+0x28>)
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	601a      	str	r2, [r3, #0]

}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	20000258 	.word	0x20000258
 80016ac:	2000025c 	.word	0x2000025c

080016b0 <Encoder_Update_Count>:

// 更新编码器的计数总值。需每10毫秒调用一次
// Update the count value of the encoder. call every 10 milliseconds
void Encoder_Update_Count(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	// g_Encoder_M1_Now += Encoder_Read_CNT(MOTOR_ID_M1);
	g_Encoder_M1_Now += Encoder_Read_CNT(MOTOR_ID_M1);
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff ffbf 	bl	8001638 <Encoder_Read_CNT>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <Encoder_Update_Count+0x30>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	4a06      	ldr	r2, [pc, #24]	@ (80016e0 <Encoder_Update_Count+0x30>)
 80016c6:	6013      	str	r3, [r2, #0]

	g_Encoder_M2_Now += Encoder_Read_CNT(MOTOR_ID_M2);
 80016c8:	2001      	movs	r0, #1
 80016ca:	f7ff ffb5 	bl	8001638 <Encoder_Read_CNT>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b04      	ldr	r3, [pc, #16]	@ (80016e4 <Encoder_Update_Count+0x34>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	4a02      	ldr	r2, [pc, #8]	@ (80016e4 <Encoder_Update_Count+0x34>)
 80016da:	6013      	str	r3, [r2, #0]
	// g_Encoder_M2_Now -= Encoder_Read_CNT(MOTOR_ID_M2);


}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000258 	.word	0x20000258
 80016e4:	2000025c 	.word	0x2000025c

080016e8 <Encoder_Init>:

// Initializing timer  初始化定时器
void Encoder_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80016ec:	2104      	movs	r1, #4
 80016ee:	4804      	ldr	r0, [pc, #16]	@ (8001700 <Encoder_Init+0x18>)
 80016f0:	f004 fee0 	bl	80064b4 <HAL_TIM_Encoder_Start>

	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80016f4:	2104      	movs	r1, #4
 80016f6:	4803      	ldr	r0, [pc, #12]	@ (8001704 <Encoder_Init+0x1c>)
 80016f8:	f004 fedc 	bl	80064b4 <HAL_TIM_Encoder_Start>

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200003b8 	.word	0x200003b8
 8001704:	20000400 	.word	0x20000400

08001708 <ICM20948_NoActive>:
uint16_t print_count = 0;
int m_speed=0;


static void ICM20948_NoActive()
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, SET);
 800170c:	2201      	movs	r2, #1
 800170e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001712:	4802      	ldr	r0, [pc, #8]	@ (800171c <ICM20948_NoActive+0x14>)
 8001714:	f003 f975 	bl	8004a02 <HAL_GPIO_WritePin>
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40010c00 	.word	0x40010c00

08001720 <ICM20948_Active>:

static void ICM20948_Active()
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800172a:	4802      	ldr	r0, [pc, #8]	@ (8001734 <ICM20948_Active+0x14>)
 800172c:	f003 f969 	bl	8004a02 <HAL_GPIO_WritePin>
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40010c00 	.word	0x40010c00

08001738 <select_user_bank>:

static void select_user_bank(userbank_t ub)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001742:	237f      	movs	r3, #127	@ 0x7f
 8001744:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	737b      	strb	r3, [r7, #13]

	ICM20948_Active();
 800174a:	f7ff ffe9 	bl	8001720 <ICM20948_Active>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 800174e:	f107 010c 	add.w	r1, r7, #12
 8001752:	230a      	movs	r3, #10
 8001754:	2202      	movs	r2, #2
 8001756:	4804      	ldr	r0, [pc, #16]	@ (8001768 <select_user_bank+0x30>)
 8001758:	f003 ff44 	bl	80055e4 <HAL_SPI_Transmit>
	ICM20948_NoActive();
 800175c:	f7ff ffd4 	bl	8001708 <ICM20948_NoActive>
}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	2000035c 	.word	0x2000035c

0800176c <read_single_reg>:

static uint8_t read_single_reg(userbank_t ub, uint8_t reg)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	460a      	mov	r2, r1
 8001776:	71fb      	strb	r3, [r7, #7]
 8001778:	4613      	mov	r3, r2
 800177a:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 800177c:	79bb      	ldrb	r3, [r7, #6]
 800177e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001782:	b2db      	uxtb	r3, r3
 8001784:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ffd5 	bl	8001738 <select_user_bank>

	ICM20948_Active();
 800178e:	f7ff ffc7 	bl	8001720 <ICM20948_Active>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8001792:	f107 010f 	add.w	r1, r7, #15
 8001796:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800179a:	2201      	movs	r2, #1
 800179c:	4808      	ldr	r0, [pc, #32]	@ (80017c0 <read_single_reg+0x54>)
 800179e:	f003 ff21 	bl	80055e4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 80017a2:	f107 010e 	add.w	r1, r7, #14
 80017a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017aa:	2201      	movs	r2, #1
 80017ac:	4804      	ldr	r0, [pc, #16]	@ (80017c0 <read_single_reg+0x54>)
 80017ae:	f004 f85c 	bl	800586a <HAL_SPI_Receive>
	ICM20948_NoActive();
 80017b2:	f7ff ffa9 	bl	8001708 <ICM20948_NoActive>
	return reg_val;
 80017b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	2000035c 	.word	0x2000035c

080017c4 <write_single_reg>:

static void write_single_reg(userbank_t ub, uint8_t reg, uint8_t val)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
 80017ce:	460b      	mov	r3, r1
 80017d0:	71bb      	strb	r3, [r7, #6]
 80017d2:	4613      	mov	r3, r2
 80017d4:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 80017d6:	79bb      	ldrb	r3, [r7, #6]
 80017d8:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 80017da:	797b      	ldrb	r3, [r7, #5]
 80017dc:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ffa9 	bl	8001738 <select_user_bank>

	ICM20948_Active();
 80017e6:	f7ff ff9b 	bl	8001720 <ICM20948_Active>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 80017ea:	f107 010c 	add.w	r1, r7, #12
 80017ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017f2:	2202      	movs	r2, #2
 80017f4:	4804      	ldr	r0, [pc, #16]	@ (8001808 <write_single_reg+0x44>)
 80017f6:	f003 fef5 	bl	80055e4 <HAL_SPI_Transmit>
	ICM20948_NoActive();
 80017fa:	f7ff ff85 	bl	8001708 <ICM20948_NoActive>
}
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2000035c 	.word	0x2000035c

0800180c <read_multiple_reg>:

static uint8_t* read_multiple_reg(userbank_t ub, uint8_t reg, uint8_t len)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
 8001816:	460b      	mov	r3, r1
 8001818:	71bb      	strb	r3, [r7, #6]
 800181a:	4613      	mov	r3, r2
 800181c:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 800181e:	79bb      	ldrb	r3, [r7, #6]
 8001820:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001824:	b2db      	uxtb	r3, r3
 8001826:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ff84 	bl	8001738 <select_user_bank>

	ICM20948_Active();
 8001830:	f7ff ff76 	bl	8001720 <ICM20948_Active>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8001834:	f107 010f 	add.w	r1, r7, #15
 8001838:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800183c:	2201      	movs	r2, #1
 800183e:	4809      	ldr	r0, [pc, #36]	@ (8001864 <read_multiple_reg+0x58>)
 8001840:	f003 fed0 	bl	80055e4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 8001844:	797b      	ldrb	r3, [r7, #5]
 8001846:	b29a      	uxth	r2, r3
 8001848:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800184c:	4906      	ldr	r1, [pc, #24]	@ (8001868 <read_multiple_reg+0x5c>)
 800184e:	4805      	ldr	r0, [pc, #20]	@ (8001864 <read_multiple_reg+0x58>)
 8001850:	f004 f80b 	bl	800586a <HAL_SPI_Receive>
	ICM20948_NoActive();
 8001854:	f7ff ff58 	bl	8001708 <ICM20948_NoActive>

	return reg_val;
 8001858:	4b03      	ldr	r3, [pc, #12]	@ (8001868 <read_multiple_reg+0x5c>)
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2000035c 	.word	0x2000035c
 8001868:	200002f4 	.word	0x200002f4

0800186c <read_single_mag_reg>:
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
	ICM20948_NoActive();
}

static uint8_t read_single_mag_reg(uint8_t reg)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
	write_single_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8001876:	228c      	movs	r2, #140	@ 0x8c
 8001878:	2103      	movs	r1, #3
 800187a:	2030      	movs	r0, #48	@ 0x30
 800187c:	f7ff ffa2 	bl	80017c4 <write_single_reg>
	write_single_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	461a      	mov	r2, r3
 8001884:	2104      	movs	r1, #4
 8001886:	2030      	movs	r0, #48	@ 0x30
 8001888:	f7ff ff9c 	bl	80017c4 <write_single_reg>
	write_single_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 800188c:	2281      	movs	r2, #129	@ 0x81
 800188e:	2105      	movs	r1, #5
 8001890:	2030      	movs	r0, #48	@ 0x30
 8001892:	f7ff ff97 	bl	80017c4 <write_single_reg>

	HAL_Delay(1);
 8001896:	2001      	movs	r0, #1
 8001898:	f002 f9e0 	bl	8003c5c <HAL_Delay>
	return read_single_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 800189c:	213b      	movs	r1, #59	@ 0x3b
 800189e:	2000      	movs	r0, #0
 80018a0:	f7ff ff64 	bl	800176c <read_single_reg>
 80018a4:	4603      	mov	r3, r0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <write_single_mag_reg>:

static void write_single_mag_reg(uint8_t reg, uint8_t val)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	460a      	mov	r2, r1
 80018b8:	71fb      	strb	r3, [r7, #7]
 80018ba:	4613      	mov	r3, r2
 80018bc:	71bb      	strb	r3, [r7, #6]
	write_single_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 80018be:	220c      	movs	r2, #12
 80018c0:	2103      	movs	r1, #3
 80018c2:	2030      	movs	r0, #48	@ 0x30
 80018c4:	f7ff ff7e 	bl	80017c4 <write_single_reg>
	write_single_reg(ub_3, B3_I2C_SLV0_REG, reg);
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	461a      	mov	r2, r3
 80018cc:	2104      	movs	r1, #4
 80018ce:	2030      	movs	r0, #48	@ 0x30
 80018d0:	f7ff ff78 	bl	80017c4 <write_single_reg>
	write_single_reg(ub_3, B3_I2C_SLV0_DO, val);
 80018d4:	79bb      	ldrb	r3, [r7, #6]
 80018d6:	461a      	mov	r2, r3
 80018d8:	2106      	movs	r1, #6
 80018da:	2030      	movs	r0, #48	@ 0x30
 80018dc:	f7ff ff72 	bl	80017c4 <write_single_reg>
	write_single_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 80018e0:	2281      	movs	r2, #129	@ 0x81
 80018e2:	2105      	movs	r1, #5
 80018e4:	2030      	movs	r0, #48	@ 0x30
 80018e6:	f7ff ff6d 	bl	80017c4 <write_single_reg>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <ICM20948_device_reset>:
	return read_multiple_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
}


static void ICM20948_device_reset()
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	af00      	add	r7, sp, #0
	write_single_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 80018f6:	22c1      	movs	r2, #193	@ 0xc1
 80018f8:	2106      	movs	r1, #6
 80018fa:	2000      	movs	r0, #0
 80018fc:	f7ff ff62 	bl	80017c4 <write_single_reg>
	HAL_Delay(100);
 8001900:	2064      	movs	r0, #100	@ 0x64
 8001902:	f002 f9ab 	bl	8003c5c <HAL_Delay>
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}

0800190a <AK09916_soft_reset>:

static void AK09916_soft_reset()
{
 800190a:	b580      	push	{r7, lr}
 800190c:	af00      	add	r7, sp, #0
	write_single_mag_reg(MAG_CNTL3, 0x01);
 800190e:	2101      	movs	r1, #1
 8001910:	2032      	movs	r0, #50	@ 0x32
 8001912:	f7ff ffcc 	bl	80018ae <write_single_mag_reg>
	HAL_Delay(100);
 8001916:	2064      	movs	r0, #100	@ 0x64
 8001918:	f002 f9a0 	bl	8003c5c <HAL_Delay>
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}

08001920 <ICM20948_wakeup>:

static void ICM20948_wakeup()
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_reg(ub_0, B0_PWR_MGMT_1);
 8001926:	2106      	movs	r1, #6
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff ff1f 	bl	800176c <read_single_reg>
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001938:	71fb      	strb	r3, [r7, #7]

	write_single_reg(ub_0, B0_PWR_MGMT_1, new_val);
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	461a      	mov	r2, r3
 800193e:	2106      	movs	r1, #6
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff ff3f 	bl	80017c4 <write_single_reg>
	HAL_Delay(100);
 8001946:	2064      	movs	r0, #100	@ 0x64
 8001948:	f002 f988 	bl	8003c5c <HAL_Delay>
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <ICM20948_spi_slave_enable>:

static void ICM20948_spi_slave_enable()
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_reg(ub_0, B0_USER_CTRL);
 800195a:	2103      	movs	r1, #3
 800195c:	2000      	movs	r0, #0
 800195e:	f7ff ff05 	bl	800176c <read_single_reg>
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	f043 0310 	orr.w	r3, r3, #16
 800196c:	71fb      	strb	r3, [r7, #7]

	write_single_reg(ub_0, B0_USER_CTRL, new_val);
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	461a      	mov	r2, r3
 8001972:	2103      	movs	r1, #3
 8001974:	2000      	movs	r0, #0
 8001976:	f7ff ff25 	bl	80017c4 <write_single_reg>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <ICM20948_i2c_master_reset>:

static void ICM20948_i2c_master_reset()
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_reg(ub_0, B0_USER_CTRL);
 8001988:	2103      	movs	r1, #3
 800198a:	2000      	movs	r0, #0
 800198c:	f7ff feee 	bl	800176c <read_single_reg>
 8001990:	4603      	mov	r3, r0
 8001992:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	f043 0302 	orr.w	r3, r3, #2
 800199a:	71fb      	strb	r3, [r7, #7]

	write_single_reg(ub_0, B0_USER_CTRL, new_val);
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	461a      	mov	r2, r3
 80019a0:	2103      	movs	r1, #3
 80019a2:	2000      	movs	r0, #0
 80019a4:	f7ff ff0e 	bl	80017c4 <write_single_reg>
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <ICM20948_i2c_master_enable>:

static void ICM20948_i2c_master_enable()
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_reg(ub_0, B0_USER_CTRL);
 80019b6:	2103      	movs	r1, #3
 80019b8:	2000      	movs	r0, #0
 80019ba:	f7ff fed7 	bl	800176c <read_single_reg>
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	f043 0320 	orr.w	r3, r3, #32
 80019c8:	71fb      	strb	r3, [r7, #7]

	write_single_reg(ub_0, B0_USER_CTRL, new_val);
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	461a      	mov	r2, r3
 80019ce:	2103      	movs	r1, #3
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7ff fef7 	bl	80017c4 <write_single_reg>
	HAL_Delay(100);
 80019d6:	2064      	movs	r0, #100	@ 0x64
 80019d8:	f002 f940 	bl	8003c5c <HAL_Delay>
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <ICM20948_i2c_master_clk_frq>:

static void ICM20948_i2c_master_clk_frq(uint8_t config)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_reg(ub_3, B3_I2C_MST_CTRL);
 80019ee:	2101      	movs	r1, #1
 80019f0:	2030      	movs	r0, #48	@ 0x30
 80019f2:	f7ff febb 	bl	800176c <read_single_reg>
 80019f6:	4603      	mov	r3, r0
 80019f8:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 80019fa:	7bfa      	ldrb	r2, [r7, #15]
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	73fb      	strb	r3, [r7, #15]

	write_single_reg(ub_3, B3_I2C_MST_CTRL, new_val);
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	461a      	mov	r2, r3
 8001a06:	2101      	movs	r1, #1
 8001a08:	2030      	movs	r0, #48	@ 0x30
 8001a0a:	f7ff fedb 	bl	80017c4 <write_single_reg>
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <ICM20948_clock_source>:

static void ICM20948_clock_source(uint8_t source)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_reg(ub_0, B0_PWR_MGMT_1);
 8001a20:	2106      	movs	r1, #6
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff fea2 	bl	800176c <read_single_reg>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8001a2c:	7bfa      	ldrb	r2, [r7, #15]
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	73fb      	strb	r3, [r7, #15]

	write_single_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	461a      	mov	r2, r3
 8001a38:	2106      	movs	r1, #6
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f7ff fec2 	bl	80017c4 <write_single_reg>
}
 8001a40:	bf00      	nop
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <ICM20948_odr_align_enable>:

static void ICM20948_odr_align_enable()
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	write_single_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2109      	movs	r1, #9
 8001a50:	2020      	movs	r0, #32
 8001a52:	f7ff feb7 	bl	80017c4 <write_single_reg>
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <ICM20948_gyro_low_pass_filter>:

static void ICM20948_gyro_low_pass_filter(uint8_t config)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_reg(ub_2, B2_GYRO_CONFIG_1);
 8001a64:	2101      	movs	r1, #1
 8001a66:	2020      	movs	r0, #32
 8001a68:	f7ff fe80 	bl	800176c <read_single_reg>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	b25a      	sxtb	r2, r3
 8001a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	b25b      	sxtb	r3, r3
 8001a7e:	73fb      	strb	r3, [r7, #15]

	write_single_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	461a      	mov	r2, r3
 8001a84:	2101      	movs	r1, #1
 8001a86:	2020      	movs	r0, #32
 8001a88:	f7ff fe9c 	bl	80017c4 <write_single_reg>
}
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <ICM20948_accel_low_pass_filter>:

static void ICM20948_accel_low_pass_filter(uint8_t config)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_reg(ub_2, B2_ACCEL_CONFIG);
 8001a9e:	2114      	movs	r1, #20
 8001aa0:	2020      	movs	r0, #32
 8001aa2:	f7ff fe63 	bl	800176c <read_single_reg>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	b25a      	sxtb	r2, r3
 8001ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	b25b      	sxtb	r3, r3
 8001ab8:	73fb      	strb	r3, [r7, #15]

	write_single_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	461a      	mov	r2, r3
 8001abe:	2101      	movs	r1, #1
 8001ac0:	2020      	movs	r0, #32
 8001ac2:	f7ff fe7f 	bl	80017c4 <write_single_reg>
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <ICM20948_gyro_sample_rate_divider>:

static void ICM20948_gyro_sample_rate_divider(uint8_t divider)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	71fb      	strb	r3, [r7, #7]
	write_single_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	461a      	mov	r2, r3
 8001adc:	2100      	movs	r1, #0
 8001ade:	2020      	movs	r0, #32
 8001ae0:	f7ff fe70 	bl	80017c4 <write_single_reg>
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <ICM20948_accel_sample_rate_divider>:

static void ICM20948_accel_sample_rate_divider(uint16_t divider)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	73bb      	strb	r3, [r7, #14]

	write_single_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	2110      	movs	r1, #16
 8001b0e:	2020      	movs	r0, #32
 8001b10:	f7ff fe58 	bl	80017c4 <write_single_reg>
	write_single_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8001b14:	7bbb      	ldrb	r3, [r7, #14]
 8001b16:	461a      	mov	r2, r3
 8001b18:	2111      	movs	r1, #17
 8001b1a:	2020      	movs	r0, #32
 8001b1c:	f7ff fe52 	bl	80017c4 <write_single_reg>
}
 8001b20:	bf00      	nop
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <AK09916_operation_mode_setting>:

static void AK09916_operation_mode_setting(operation_mode_t mode)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
	write_single_mag_reg(MAG_CNTL2, mode);
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	4619      	mov	r1, r3
 8001b36:	2031      	movs	r0, #49	@ 0x31
 8001b38:	f7ff feb9 	bl	80018ae <write_single_mag_reg>
	HAL_Delay(100);
 8001b3c:	2064      	movs	r0, #100	@ 0x64
 8001b3e:	f002 f88d 	bl	8003c5c <HAL_Delay>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <ICM20948_gyro_full_scale_select>:
	write_multiple_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
	write_multiple_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
}

static void ICM20948_gyro_full_scale_select(gyro_scale_t full_scale)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_reg(ub_2, B2_GYRO_CONFIG_1);
 8001b56:	2101      	movs	r1, #1
 8001b58:	2020      	movs	r0, #32
 8001b5a:	f7ff fe07 	bl	800176c <read_single_reg>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	73fb      	strb	r3, [r7, #15]

	switch(full_scale)
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d827      	bhi.n	8001bb8 <ICM20948_gyro_full_scale_select+0x6c>
 8001b68:	a201      	add	r2, pc, #4	@ (adr r2, 8001b70 <ICM20948_gyro_full_scale_select+0x24>)
 8001b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6e:	bf00      	nop
 8001b70:	08001b81 	.word	0x08001b81
 8001b74:	08001b89 	.word	0x08001b89
 8001b78:	08001b99 	.word	0x08001b99
 8001b7c:	08001ba9 	.word	0x08001ba9
	{
		case _250dps :
			new_val |= 0x00;
			g_scale_gyro = 131.0;
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <ICM20948_gyro_full_scale_select+0x80>)
 8001b82:	4a13      	ldr	r2, [pc, #76]	@ (8001bd0 <ICM20948_gyro_full_scale_select+0x84>)
 8001b84:	601a      	str	r2, [r3, #0]
			break;
 8001b86:	e017      	b.n	8001bb8 <ICM20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	f043 0302 	orr.w	r3, r3, #2
 8001b8e:	73fb      	strb	r3, [r7, #15]
			g_scale_gyro = 65.5;
 8001b90:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <ICM20948_gyro_full_scale_select+0x80>)
 8001b92:	4a10      	ldr	r2, [pc, #64]	@ (8001bd4 <ICM20948_gyro_full_scale_select+0x88>)
 8001b94:	601a      	str	r2, [r3, #0]
			break;
 8001b96:	e00f      	b.n	8001bb8 <ICM20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	73fb      	strb	r3, [r7, #15]
			g_scale_gyro = 32.8;
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bcc <ICM20948_gyro_full_scale_select+0x80>)
 8001ba2:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd8 <ICM20948_gyro_full_scale_select+0x8c>)
 8001ba4:	601a      	str	r2, [r3, #0]
			break;
 8001ba6:	e007      	b.n	8001bb8 <ICM20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	f043 0306 	orr.w	r3, r3, #6
 8001bae:	73fb      	strb	r3, [r7, #15]
			g_scale_gyro = 16.4;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <ICM20948_gyro_full_scale_select+0x80>)
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <ICM20948_gyro_full_scale_select+0x90>)
 8001bb4:	601a      	str	r2, [r3, #0]
			break;
 8001bb6:	bf00      	nop
	}

	write_single_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	2020      	movs	r0, #32
 8001bc0:	f7ff fe00 	bl	80017c4 <write_single_reg>
}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	43030000 	.word	0x43030000
 8001bd4:	42830000 	.word	0x42830000
 8001bd8:	42033333 	.word	0x42033333
 8001bdc:	41833333 	.word	0x41833333

08001be0 <ICM20948_accel_full_scale_select>:

static void ICM20948_accel_full_scale_select(accel_scale_t full_scale)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_reg(ub_2, B2_ACCEL_CONFIG);
 8001bea:	2114      	movs	r1, #20
 8001bec:	2020      	movs	r0, #32
 8001bee:	f7ff fdbd 	bl	800176c <read_single_reg>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	73fb      	strb	r3, [r7, #15]

	switch(full_scale)
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d82b      	bhi.n	8001c54 <ICM20948_accel_full_scale_select+0x74>
 8001bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8001c04 <ICM20948_accel_full_scale_select+0x24>)
 8001bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c02:	bf00      	nop
 8001c04:	08001c15 	.word	0x08001c15
 8001c08:	08001c1f 	.word	0x08001c1f
 8001c0c:	08001c31 	.word	0x08001c31
 8001c10:	08001c43 	.word	0x08001c43
	{
		case _2g :
			new_val |= 0x00;
			g_scale_accel = 16384;
 8001c14:	4b14      	ldr	r3, [pc, #80]	@ (8001c68 <ICM20948_accel_full_scale_select+0x88>)
 8001c16:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8001c1a:	601a      	str	r2, [r3, #0]
			break;
 8001c1c:	e01a      	b.n	8001c54 <ICM20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	f043 0302 	orr.w	r3, r3, #2
 8001c24:	73fb      	strb	r3, [r7, #15]
			g_scale_accel = 8192;
 8001c26:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <ICM20948_accel_full_scale_select+0x88>)
 8001c28:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8001c2c:	601a      	str	r2, [r3, #0]
			break;
 8001c2e:	e011      	b.n	8001c54 <ICM20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	f043 0304 	orr.w	r3, r3, #4
 8001c36:	73fb      	strb	r3, [r7, #15]
			g_scale_accel = 4096;
 8001c38:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <ICM20948_accel_full_scale_select+0x88>)
 8001c3a:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8001c3e:	601a      	str	r2, [r3, #0]
			break;
 8001c40:	e008      	b.n	8001c54 <ICM20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	f043 0306 	orr.w	r3, r3, #6
 8001c48:	73fb      	strb	r3, [r7, #15]
			g_scale_accel = 2048;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	@ (8001c68 <ICM20948_accel_full_scale_select+0x88>)
 8001c4c:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8001c50:	601a      	str	r2, [r3, #0]
			break;
 8001c52:	bf00      	nop
	}

	write_single_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	461a      	mov	r2, r3
 8001c58:	2114      	movs	r1, #20
 8001c5a:	2020      	movs	r0, #32
 8001c5c:	f7ff fdb2 	bl	80017c4 <write_single_reg>
}
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000004 	.word	0x20000004

08001c6c <ICM20948_init>:




void ICM20948_init()
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
	while(!ICM20948_who_am_i());
 8001c70:	bf00      	nop
 8001c72:	f000 f83e 	bl	8001cf2 <ICM20948_who_am_i>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f083 0301 	eor.w	r3, r3, #1
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f7      	bne.n	8001c72 <ICM20948_init+0x6>

	ICM20948_device_reset();
 8001c82:	f7ff fe36 	bl	80018f2 <ICM20948_device_reset>
	ICM20948_wakeup();
 8001c86:	f7ff fe4b 	bl	8001920 <ICM20948_wakeup>

	ICM20948_clock_source(1);
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f7ff fec3 	bl	8001a16 <ICM20948_clock_source>
	ICM20948_odr_align_enable();
 8001c90:	f7ff feda 	bl	8001a48 <ICM20948_odr_align_enable>

	ICM20948_spi_slave_enable();
 8001c94:	f7ff fe5e 	bl	8001954 <ICM20948_spi_slave_enable>

	ICM20948_gyro_low_pass_filter(0);
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f7ff fede 	bl	8001a5a <ICM20948_gyro_low_pass_filter>
	ICM20948_accel_low_pass_filter(0);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f7ff fef8 	bl	8001a94 <ICM20948_accel_low_pass_filter>

	ICM20948_gyro_sample_rate_divider(0);
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f7ff ff12 	bl	8001ace <ICM20948_gyro_sample_rate_divider>
	ICM20948_accel_sample_rate_divider(0);
 8001caa:	2000      	movs	r0, #0
 8001cac:	f7ff ff1e 	bl	8001aec <ICM20948_accel_sample_rate_divider>

	//ICM20948_gyro_calibration();
	//ICM20948_accel_calibration();

	ICM20948_gyro_full_scale_select(_2000dps);
 8001cb0:	2003      	movs	r0, #3
 8001cb2:	f7ff ff4b 	bl	8001b4c <ICM20948_gyro_full_scale_select>
	ICM20948_accel_full_scale_select(_16g);
 8001cb6:	2003      	movs	r0, #3
 8001cb8:	f7ff ff92 	bl	8001be0 <ICM20948_accel_full_scale_select>
}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <AK09916_init>:

void AK09916_init()
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
	ICM20948_i2c_master_reset();
 8001cc4:	f7ff fe5d 	bl	8001982 <ICM20948_i2c_master_reset>
	ICM20948_i2c_master_enable();
 8001cc8:	f7ff fe72 	bl	80019b0 <ICM20948_i2c_master_enable>
	ICM20948_i2c_master_clk_frq(7);
 8001ccc:	2007      	movs	r0, #7
 8001cce:	f7ff fe89 	bl	80019e4 <ICM20948_i2c_master_clk_frq>

	while(!AK09916_who_am_i());
 8001cd2:	bf00      	nop
 8001cd4:	f000 f820 	bl	8001d18 <AK09916_who_am_i>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f083 0301 	eor.w	r3, r3, #1
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1f7      	bne.n	8001cd4 <AK09916_init+0x14>

	AK09916_soft_reset();
 8001ce4:	f7ff fe11 	bl	800190a <AK09916_soft_reset>
	AK09916_operation_mode_setting(continuous_measurement_100hz);
 8001ce8:	2008      	movs	r0, #8
 8001cea:	f7ff ff1d 	bl	8001b28 <AK09916_operation_mode_setting>
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <ICM20948_who_am_i>:

bool ICM20948_who_am_i()
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
	uint8_t ICM20948_id = read_single_reg(ub_0, B0_WHO_AM_I);
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f7ff fd36 	bl	800176c <read_single_reg>
 8001d00:	4603      	mov	r3, r0
 8001d02:	71fb      	strb	r3, [r7, #7]

	if(ICM20948_id == ICM20948_ID)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	2bea      	cmp	r3, #234	@ 0xea
 8001d08:	d101      	bne.n	8001d0e <ICM20948_who_am_i+0x1c>
		return true;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <ICM20948_who_am_i+0x1e>
	else
		return false;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <AK09916_who_am_i>:

bool AK09916_who_am_i()
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
	uint8_t AK09916_id = read_single_mag_reg(MAG_WIA2);
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f7ff fda4 	bl	800186c <read_single_mag_reg>
 8001d24:	4603      	mov	r3, r0
 8001d26:	71fb      	strb	r3, [r7, #7]

	if(AK09916_id == AK09916_ID)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	2b09      	cmp	r3, #9
 8001d2c:	d101      	bne.n	8001d32 <AK09916_who_am_i+0x1a>
		return true;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <AK09916_who_am_i+0x1c>
	else
		return false;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <ICM20948_gyro_read>:

void ICM20948_gyro_read(raw_data_t* data)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8001d44:	2206      	movs	r2, #6
 8001d46:	2133      	movs	r1, #51	@ 0x33
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f7ff fd5f 	bl	800180c <read_multiple_reg>
 8001d4e:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	b21a      	sxth	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	b21b      	sxth	r3, r3
 8001d60:	4313      	orrs	r3, r2
 8001d62:	b21a      	sxth	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	801a      	strh	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	b21a      	sxth	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	3303      	adds	r3, #3
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	b21a      	sxth	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	805a      	strh	r2, [r3, #2]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3304      	adds	r3, #4
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	b21a      	sxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	3305      	adds	r3, #5
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	4313      	orrs	r3, r2
 8001d96:	b21a      	sxth	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	809a      	strh	r2, [r3, #4]
}
 8001d9c:	bf00      	nop
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <ICM20948_accel_read>:

void ICM20948_accel_read(raw_data_t* data)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8001dac:	2206      	movs	r2, #6
 8001dae:	212d      	movs	r1, #45	@ 0x2d
 8001db0:	2000      	movs	r0, #0
 8001db2:	f7ff fd2b 	bl	800180c <read_multiple_reg>
 8001db6:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	b21a      	sxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	b21b      	sxth	r3, r3
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	b21a      	sxth	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	801a      	strh	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	b21a      	sxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	3303      	adds	r3, #3
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	4313      	orrs	r3, r2
 8001de4:	b21a      	sxth	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	805a      	strh	r2, [r3, #2]
	// data->z = (int16_t)(temp[4] << 8 | temp[5]);
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + g_scale_accel;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	3304      	adds	r3, #4
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	b21a      	sxth	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	3305      	adds	r3, #5
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	b21b      	sxth	r3, r3
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe ffb7 	bl	8000d74 <__aeabi_i2f>
 8001e06:	4602      	mov	r2, r0
 8001e08:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <ICM20948_accel_read+0x88>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4610      	mov	r0, r2
 8001e10:	f7fe fefc 	bl	8000c0c <__addsf3>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff f9c6 	bl	80011a8 <__aeabi_f2iz>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	b21a      	sxth	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	809a      	strh	r2, [r3, #4]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8001e24:	bf00      	nop
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20000004 	.word	0x20000004

08001e30 <ICM20948_gyro_read_dps>:

	return true;
}

void ICM20948_gyro_read_dps(axises_t* data)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	ICM20948_gyro_read(&g_raw_gyro);
 8001e38:	481c      	ldr	r0, [pc, #112]	@ (8001eac <ICM20948_gyro_read_dps+0x7c>)
 8001e3a:	f7ff ff7f 	bl	8001d3c <ICM20948_gyro_read>

	data->x = (float)(g_raw_gyro.x / g_scale_gyro);
 8001e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001eac <ICM20948_gyro_read_dps+0x7c>)
 8001e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe ff95 	bl	8000d74 <__aeabi_i2f>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	4b18      	ldr	r3, [pc, #96]	@ (8001eb0 <ICM20948_gyro_read_dps+0x80>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4619      	mov	r1, r3
 8001e52:	4610      	mov	r0, r2
 8001e54:	f7ff f896 	bl	8000f84 <__aeabi_fdiv>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	601a      	str	r2, [r3, #0]
	data->y = (float)(g_raw_gyro.y / g_scale_gyro);
 8001e60:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <ICM20948_gyro_read_dps+0x7c>)
 8001e62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe ff84 	bl	8000d74 <__aeabi_i2f>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b10      	ldr	r3, [pc, #64]	@ (8001eb0 <ICM20948_gyro_read_dps+0x80>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4619      	mov	r1, r3
 8001e74:	4610      	mov	r0, r2
 8001e76:	f7ff f885 	bl	8000f84 <__aeabi_fdiv>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	605a      	str	r2, [r3, #4]
	data->z = (float)(g_raw_gyro.z / g_scale_gyro);
 8001e82:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <ICM20948_gyro_read_dps+0x7c>)
 8001e84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe ff73 	bl	8000d74 <__aeabi_i2f>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <ICM20948_gyro_read_dps+0x80>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4619      	mov	r1, r3
 8001e96:	4610      	mov	r0, r2
 8001e98:	f7ff f874 	bl	8000f84 <__aeabi_fdiv>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000278 	.word	0x20000278
 8001eb0:	20000000 	.word	0x20000000

08001eb4 <ICM20948_accel_read_g>:

void ICM20948_accel_read_g(axises_t* data)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	ICM20948_accel_read(&g_raw_accel);
 8001ebc:	481c      	ldr	r0, [pc, #112]	@ (8001f30 <ICM20948_accel_read_g+0x7c>)
 8001ebe:	f7ff ff71 	bl	8001da4 <ICM20948_accel_read>

	data->x = (float)(g_raw_accel.x / g_scale_accel);
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f30 <ICM20948_accel_read_g+0x7c>)
 8001ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe ff53 	bl	8000d74 <__aeabi_i2f>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	4b18      	ldr	r3, [pc, #96]	@ (8001f34 <ICM20948_accel_read_g+0x80>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	f7ff f854 	bl	8000f84 <__aeabi_fdiv>
 8001edc:	4603      	mov	r3, r0
 8001ede:	461a      	mov	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	601a      	str	r2, [r3, #0]
	data->y = (float)(g_raw_accel.y / g_scale_accel);
 8001ee4:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <ICM20948_accel_read_g+0x7c>)
 8001ee6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe ff42 	bl	8000d74 <__aeabi_i2f>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b10      	ldr	r3, [pc, #64]	@ (8001f34 <ICM20948_accel_read_g+0x80>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4610      	mov	r0, r2
 8001efa:	f7ff f843 	bl	8000f84 <__aeabi_fdiv>
 8001efe:	4603      	mov	r3, r0
 8001f00:	461a      	mov	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	605a      	str	r2, [r3, #4]
	data->z = (float)(g_raw_accel.z / g_scale_accel);
 8001f06:	4b0a      	ldr	r3, [pc, #40]	@ (8001f30 <ICM20948_accel_read_g+0x7c>)
 8001f08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe ff31 	bl	8000d74 <__aeabi_i2f>
 8001f12:	4602      	mov	r2, r0
 8001f14:	4b07      	ldr	r3, [pc, #28]	@ (8001f34 <ICM20948_accel_read_g+0x80>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	f7ff f832 	bl	8000f84 <__aeabi_fdiv>
 8001f20:	4603      	mov	r3, r0
 8001f22:	461a      	mov	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	609a      	str	r2, [r3, #8]
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000280 	.word	0x20000280
 8001f34:	20000004 	.word	0x20000004

08001f38 <PID>:
	y_prev = y;
	return y;
}

float PID(float pitch) //모터 출력 피아이디
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	float error = setpoint - pitch;
 8001f40:	4b3b      	ldr	r3, [pc, #236]	@ (8002030 <PID+0xf8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fe5e 	bl	8000c08 <__aeabi_fsub>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	617b      	str	r3, [r7, #20]

	integral += error * dt;
 8001f50:	4b38      	ldr	r3, [pc, #224]	@ (8002034 <PID+0xfc>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6979      	ldr	r1, [r7, #20]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe ff60 	bl	8000e1c <__aeabi_fmul>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4b35      	ldr	r3, [pc, #212]	@ (8002038 <PID+0x100>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4619      	mov	r1, r3
 8001f66:	4610      	mov	r0, r2
 8001f68:	f7fe fe50 	bl	8000c0c <__addsf3>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4b31      	ldr	r3, [pc, #196]	@ (8002038 <PID+0x100>)
 8001f72:	601a      	str	r2, [r3, #0]

	float integral_limit = 1.0f;
 8001f74:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f78:	613b      	str	r3, [r7, #16]
	if(integral > integral_limit)
 8001f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8002038 <PID+0x100>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	6938      	ldr	r0, [r7, #16]
 8001f82:	f7ff f8e9 	bl	8001158 <__aeabi_fcmplt>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <PID+0x5c>
	{
		integral = integral_limit;
 8001f8c:	4a2a      	ldr	r2, [pc, #168]	@ (8002038 <PID+0x100>)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e010      	b.n	8001fb6 <PID+0x7e>
	}
	else if(integral < -integral_limit)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001f9a:	4a27      	ldr	r2, [pc, #156]	@ (8002038 <PID+0x100>)
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff f8f7 	bl	8001194 <__aeabi_fcmpgt>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d004      	beq.n	8001fb6 <PID+0x7e>
	{
		integral = -integral_limit;
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001fb2:	4a21      	ldr	r2, [pc, #132]	@ (8002038 <PID+0x100>)
 8001fb4:	6013      	str	r3, [r2, #0]
	}

	float derivative = (error - previous_error) / dt;
 8001fb6:	4b21      	ldr	r3, [pc, #132]	@ (800203c <PID+0x104>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4619      	mov	r1, r3
 8001fbc:	6978      	ldr	r0, [r7, #20]
 8001fbe:	f7fe fe23 	bl	8000c08 <__aeabi_fsub>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <PID+0xfc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4610      	mov	r0, r2
 8001fce:	f7fe ffd9 	bl	8000f84 <__aeabi_fdiv>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	60fb      	str	r3, [r7, #12]

	float output = kp*error + ki*integral + kd*derivative;
 8001fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8002040 <PID+0x108>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6979      	ldr	r1, [r7, #20]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe ff1d 	bl	8000e1c <__aeabi_fmul>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	461c      	mov	r4, r3
 8001fe6:	4b17      	ldr	r3, [pc, #92]	@ (8002044 <PID+0x10c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a13      	ldr	r2, [pc, #76]	@ (8002038 <PID+0x100>)
 8001fec:	6812      	ldr	r2, [r2, #0]
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe ff13 	bl	8000e1c <__aeabi_fmul>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	f7fe fe06 	bl	8000c0c <__addsf3>
 8002000:	4603      	mov	r3, r0
 8002002:	461c      	mov	r4, r3
 8002004:	4b10      	ldr	r3, [pc, #64]	@ (8002048 <PID+0x110>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68f9      	ldr	r1, [r7, #12]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe ff06 	bl	8000e1c <__aeabi_fmul>
 8002010:	4603      	mov	r3, r0
 8002012:	4619      	mov	r1, r3
 8002014:	4620      	mov	r0, r4
 8002016:	f7fe fdf9 	bl	8000c0c <__addsf3>
 800201a:	4603      	mov	r3, r0
 800201c:	60bb      	str	r3, [r7, #8]

	previous_error = error;
 800201e:	4a07      	ldr	r2, [pc, #28]	@ (800203c <PID+0x104>)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	6013      	str	r3, [r2, #0]

	return output;
 8002024:	68bb      	ldr	r3, [r7, #8]
}
 8002026:	4618      	mov	r0, r3
 8002028:	371c      	adds	r7, #28
 800202a:	46bd      	mov	sp, r7
 800202c:	bd90      	pop	{r4, r7, pc}
 800202e:	bf00      	nop
 8002030:	20000014 	.word	0x20000014
 8002034:	20000018 	.word	0x20000018
 8002038:	2000028c 	.word	0x2000028c
 800203c:	20000288 	.word	0x20000288
 8002040:	20000008 	.word	0x20000008
 8002044:	2000000c 	.word	0x2000000c
 8002048:	20000010 	.word	0x20000010

0800204c <PID_e>:
int speed_e2_prev=0;
int show_encoder = 0;
int setpoint_encoder=0;
/////////////////////////////////////////////////
float PID_e(float error) //조향용 엔코더 피아이디
{
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]


	integral_e += (error-setpoint_encoder) * dt;
 8002054:	4b4e      	ldr	r3, [pc, #312]	@ (8002190 <PID_e+0x144>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe fe8b 	bl	8000d74 <__aeabi_i2f>
 800205e:	4603      	mov	r3, r0
 8002060:	4619      	mov	r1, r3
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7fe fdd0 	bl	8000c08 <__aeabi_fsub>
 8002068:	4603      	mov	r3, r0
 800206a:	461a      	mov	r2, r3
 800206c:	4b49      	ldr	r3, [pc, #292]	@ (8002194 <PID_e+0x148>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f7fe fed2 	bl	8000e1c <__aeabi_fmul>
 8002078:	4603      	mov	r3, r0
 800207a:	461a      	mov	r2, r3
 800207c:	4b46      	ldr	r3, [pc, #280]	@ (8002198 <PID_e+0x14c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4619      	mov	r1, r3
 8002082:	4610      	mov	r0, r2
 8002084:	f7fe fdc2 	bl	8000c0c <__addsf3>
 8002088:	4603      	mov	r3, r0
 800208a:	461a      	mov	r2, r3
 800208c:	4b42      	ldr	r3, [pc, #264]	@ (8002198 <PID_e+0x14c>)
 800208e:	601a      	str	r2, [r3, #0]

	float integral_limit = 4.0f;
 8002090:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8002094:	617b      	str	r3, [r7, #20]
	if(integral_e > integral_limit)
 8002096:	4b40      	ldr	r3, [pc, #256]	@ (8002198 <PID_e+0x14c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4619      	mov	r1, r3
 800209c:	6978      	ldr	r0, [r7, #20]
 800209e:	f7ff f85b 	bl	8001158 <__aeabi_fcmplt>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <PID_e+0x64>
	{
		integral_e = integral_limit;
 80020a8:	4a3b      	ldr	r2, [pc, #236]	@ (8002198 <PID_e+0x14c>)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e010      	b.n	80020d2 <PID_e+0x86>
	}
	else if(integral_e < -integral_limit)
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80020b6:	4a38      	ldr	r2, [pc, #224]	@ (8002198 <PID_e+0x14c>)
 80020b8:	6812      	ldr	r2, [r2, #0]
 80020ba:	4611      	mov	r1, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff f869 	bl	8001194 <__aeabi_fcmpgt>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d004      	beq.n	80020d2 <PID_e+0x86>
	{
		integral_e = -integral_limit;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80020ce:	4a32      	ldr	r2, [pc, #200]	@ (8002198 <PID_e+0x14c>)
 80020d0:	6013      	str	r3, [r2, #0]
	}

	float derivative = ((error-setpoint_encoder) - previous_error_e) / dt;
 80020d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002190 <PID_e+0x144>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fe4c 	bl	8000d74 <__aeabi_i2f>
 80020dc:	4603      	mov	r3, r0
 80020de:	4619      	mov	r1, r3
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7fe fd91 	bl	8000c08 <__aeabi_fsub>
 80020e6:	4603      	mov	r3, r0
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b2c      	ldr	r3, [pc, #176]	@ (800219c <PID_e+0x150>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4619      	mov	r1, r3
 80020f0:	4610      	mov	r0, r2
 80020f2:	f7fe fd89 	bl	8000c08 <__aeabi_fsub>
 80020f6:	4603      	mov	r3, r0
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b26      	ldr	r3, [pc, #152]	@ (8002194 <PID_e+0x148>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4619      	mov	r1, r3
 8002100:	4610      	mov	r0, r2
 8002102:	f7fe ff3f 	bl	8000f84 <__aeabi_fdiv>
 8002106:	4603      	mov	r3, r0
 8002108:	613b      	str	r3, [r7, #16]

	float output = kp_e*(error-setpoint_encoder) + ki_e*integral_e + kd_e*derivative;
 800210a:	4b21      	ldr	r3, [pc, #132]	@ (8002190 <PID_e+0x144>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fe30 	bl	8000d74 <__aeabi_i2f>
 8002114:	4603      	mov	r3, r0
 8002116:	4619      	mov	r1, r3
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7fe fd75 	bl	8000c08 <__aeabi_fsub>
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	4b1f      	ldr	r3, [pc, #124]	@ (80021a0 <PID_e+0x154>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4619      	mov	r1, r3
 8002128:	4610      	mov	r0, r2
 800212a:	f7fe fe77 	bl	8000e1c <__aeabi_fmul>
 800212e:	4603      	mov	r3, r0
 8002130:	461c      	mov	r4, r3
 8002132:	4b1c      	ldr	r3, [pc, #112]	@ (80021a4 <PID_e+0x158>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a18      	ldr	r2, [pc, #96]	@ (8002198 <PID_e+0x14c>)
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fe6d 	bl	8000e1c <__aeabi_fmul>
 8002142:	4603      	mov	r3, r0
 8002144:	4619      	mov	r1, r3
 8002146:	4620      	mov	r0, r4
 8002148:	f7fe fd60 	bl	8000c0c <__addsf3>
 800214c:	4603      	mov	r3, r0
 800214e:	461c      	mov	r4, r3
 8002150:	4b15      	ldr	r3, [pc, #84]	@ (80021a8 <PID_e+0x15c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6939      	ldr	r1, [r7, #16]
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fe60 	bl	8000e1c <__aeabi_fmul>
 800215c:	4603      	mov	r3, r0
 800215e:	4619      	mov	r1, r3
 8002160:	4620      	mov	r0, r4
 8002162:	f7fe fd53 	bl	8000c0c <__addsf3>
 8002166:	4603      	mov	r3, r0
 8002168:	60fb      	str	r3, [r7, #12]

	previous_error_e = error-setpoint_encoder;
 800216a:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <PID_e+0x144>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe fe00 	bl	8000d74 <__aeabi_i2f>
 8002174:	4603      	mov	r3, r0
 8002176:	4619      	mov	r1, r3
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7fe fd45 	bl	8000c08 <__aeabi_fsub>
 800217e:	4603      	mov	r3, r0
 8002180:	461a      	mov	r2, r3
 8002182:	4b06      	ldr	r3, [pc, #24]	@ (800219c <PID_e+0x150>)
 8002184:	601a      	str	r2, [r3, #0]

	return output;
 8002186:	68fb      	ldr	r3, [r7, #12]
}
 8002188:	4618      	mov	r0, r3
 800218a:	371c      	adds	r7, #28
 800218c:	46bd      	mov	sp, r7
 800218e:	bd90      	pop	{r4, r7, pc}
 8002190:	200002d8 	.word	0x200002d8
 8002194:	20000018 	.word	0x20000018
 8002198:	200002b0 	.word	0x200002b0
 800219c:	200002ac 	.word	0x200002ac
 80021a0:	2000001c 	.word	0x2000001c
 80021a4:	20000020 	.word	0x20000020
 80021a8:	20000024 	.word	0x20000024

080021ac <PID_p>:
float setvel=0;
float max_setpoint=10.0f;
float min_setpoint=2.0f;

float PID_p(float speed)//for setpoint PID
{
 80021ac:	b590      	push	{r4, r7, lr}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	float error_p = speed+setvel;
 80021b4:	4b3d      	ldr	r3, [pc, #244]	@ (80022ac <PID_p+0x100>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4619      	mov	r1, r3
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fe fd26 	bl	8000c0c <__addsf3>
 80021c0:	4603      	mov	r3, r0
 80021c2:	617b      	str	r3, [r7, #20]

	integral_p += error_p * dt;
 80021c4:	4b3a      	ldr	r3, [pc, #232]	@ (80022b0 <PID_p+0x104>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6979      	ldr	r1, [r7, #20]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fe26 	bl	8000e1c <__aeabi_fmul>
 80021d0:	4603      	mov	r3, r0
 80021d2:	461a      	mov	r2, r3
 80021d4:	4b37      	ldr	r3, [pc, #220]	@ (80022b4 <PID_p+0x108>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4619      	mov	r1, r3
 80021da:	4610      	mov	r0, r2
 80021dc:	f7fe fd16 	bl	8000c0c <__addsf3>
 80021e0:	4603      	mov	r3, r0
 80021e2:	461a      	mov	r2, r3
 80021e4:	4b33      	ldr	r3, [pc, #204]	@ (80022b4 <PID_p+0x108>)
 80021e6:	601a      	str	r2, [r3, #0]

	float integral_p_limit = 1.0f;
 80021e8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80021ec:	613b      	str	r3, [r7, #16]
	if(integral_p > integral_p_limit)
 80021ee:	4b31      	ldr	r3, [pc, #196]	@ (80022b4 <PID_p+0x108>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4619      	mov	r1, r3
 80021f4:	6938      	ldr	r0, [r7, #16]
 80021f6:	f7fe ffaf 	bl	8001158 <__aeabi_fcmplt>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <PID_p+0x5c>
	{
		integral_p = integral_p_limit;
 8002200:	4a2c      	ldr	r2, [pc, #176]	@ (80022b4 <PID_p+0x108>)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e010      	b.n	800222a <PID_p+0x7e>
	}
	else if(integral_p < -integral_p_limit)
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800220e:	4a29      	ldr	r2, [pc, #164]	@ (80022b4 <PID_p+0x108>)
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe ffbd 	bl	8001194 <__aeabi_fcmpgt>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d004      	beq.n	800222a <PID_p+0x7e>
	{
		integral_p = -integral_p_limit;
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002226:	4a23      	ldr	r2, [pc, #140]	@ (80022b4 <PID_p+0x108>)
 8002228:	6013      	str	r3, [r2, #0]
	}

	float derivative_p = (error_p - previous_error_p) / dt;
 800222a:	4b23      	ldr	r3, [pc, #140]	@ (80022b8 <PID_p+0x10c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4619      	mov	r1, r3
 8002230:	6978      	ldr	r0, [r7, #20]
 8002232:	f7fe fce9 	bl	8000c08 <__aeabi_fsub>
 8002236:	4603      	mov	r3, r0
 8002238:	461a      	mov	r2, r3
 800223a:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <PID_p+0x104>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4619      	mov	r1, r3
 8002240:	4610      	mov	r0, r2
 8002242:	f7fe fe9f 	bl	8000f84 <__aeabi_fdiv>
 8002246:	4603      	mov	r3, r0
 8002248:	60fb      	str	r3, [r7, #12]

	float output_p = (kp_p*error_p + ki_p*integral_p + kd_p*derivative_p)/10000;
 800224a:	4b1c      	ldr	r3, [pc, #112]	@ (80022bc <PID_p+0x110>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6979      	ldr	r1, [r7, #20]
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe fde3 	bl	8000e1c <__aeabi_fmul>
 8002256:	4603      	mov	r3, r0
 8002258:	461c      	mov	r4, r3
 800225a:	4b19      	ldr	r3, [pc, #100]	@ (80022c0 <PID_p+0x114>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a15      	ldr	r2, [pc, #84]	@ (80022b4 <PID_p+0x108>)
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe fdd9 	bl	8000e1c <__aeabi_fmul>
 800226a:	4603      	mov	r3, r0
 800226c:	4619      	mov	r1, r3
 800226e:	4620      	mov	r0, r4
 8002270:	f7fe fccc 	bl	8000c0c <__addsf3>
 8002274:	4603      	mov	r3, r0
 8002276:	461c      	mov	r4, r3
 8002278:	4b12      	ldr	r3, [pc, #72]	@ (80022c4 <PID_p+0x118>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68f9      	ldr	r1, [r7, #12]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe fdcc 	bl	8000e1c <__aeabi_fmul>
 8002284:	4603      	mov	r3, r0
 8002286:	4619      	mov	r1, r3
 8002288:	4620      	mov	r0, r4
 800228a:	f7fe fcbf 	bl	8000c0c <__addsf3>
 800228e:	4603      	mov	r3, r0
 8002290:	490d      	ldr	r1, [pc, #52]	@ (80022c8 <PID_p+0x11c>)
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe fe76 	bl	8000f84 <__aeabi_fdiv>
 8002298:	4603      	mov	r3, r0
 800229a:	60bb      	str	r3, [r7, #8]

	previous_error_p = error_p;
 800229c:	4a06      	ldr	r2, [pc, #24]	@ (80022b8 <PID_p+0x10c>)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	6013      	str	r3, [r2, #0]

	return output_p;
 80022a2:	68bb      	ldr	r3, [r7, #8]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	371c      	adds	r7, #28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd90      	pop	{r4, r7, pc}
 80022ac:	200002e8 	.word	0x200002e8
 80022b0:	20000018 	.word	0x20000018
 80022b4:	200002e4 	.word	0x200002e4
 80022b8:	200002e0 	.word	0x200002e0
 80022bc:	20000028 	.word	0x20000028
 80022c0:	200002dc 	.word	0x200002dc
 80022c4:	2000002c 	.word	0x2000002c
 80022c8:	461c4000 	.word	0x461c4000
 80022cc:	00000000 	.word	0x00000000

080022d0 <ICM20948_Read_Data_Handle>:
float speed = 0;
float speed_e_pid = 0;
extern int state;

void ICM20948_Read_Data_Handle(void)
{if(state>0){
 80022d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022d4:	b086      	sub	sp, #24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	4bbb      	ldr	r3, [pc, #748]	@ (80025c8 <ICM20948_Read_Data_Handle+0x2f8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f340 8245 	ble.w	800276c <ICM20948_Read_Data_Handle+0x49c>
	print_count++;
 80022e2:	4bba      	ldr	r3, [pc, #744]	@ (80025cc <ICM20948_Read_Data_Handle+0x2fc>)
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	3301      	adds	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	4bb8      	ldr	r3, [pc, #736]	@ (80025cc <ICM20948_Read_Data_Handle+0x2fc>)
 80022ec:	801a      	strh	r2, [r3, #0]
	ICM20948_gyro_read_dps(&g_axises_gyro);
 80022ee:	48b8      	ldr	r0, [pc, #736]	@ (80025d0 <ICM20948_Read_Data_Handle+0x300>)
 80022f0:	f7ff fd9e 	bl	8001e30 <ICM20948_gyro_read_dps>
	ICM20948_accel_read_g(&g_axises_accel);
 80022f4:	48b7      	ldr	r0, [pc, #732]	@ (80025d4 <ICM20948_Read_Data_Handle+0x304>)
 80022f6:	f7ff fddd 	bl	8001eb4 <ICM20948_accel_read_g>
	//AK09916_mag_read_uT(&g_axises_mag);

	float ax = g_axises_accel.x;
 80022fa:	4bb6      	ldr	r3, [pc, #728]	@ (80025d4 <ICM20948_Read_Data_Handle+0x304>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	617b      	str	r3, [r7, #20]
	float ay = g_axises_accel.y;
 8002300:	4bb4      	ldr	r3, [pc, #720]	@ (80025d4 <ICM20948_Read_Data_Handle+0x304>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	613b      	str	r3, [r7, #16]
	float az = g_axises_accel.z;
 8002306:	4bb3      	ldr	r3, [pc, #716]	@ (80025d4 <ICM20948_Read_Data_Handle+0x304>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	60fb      	str	r3, [r7, #12]
	float gx = g_axises_gyro.x;
 800230c:	4bb0      	ldr	r3, [pc, #704]	@ (80025d0 <ICM20948_Read_Data_Handle+0x300>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60bb      	str	r3, [r7, #8]
	float gy = g_axises_gyro.y;
 8002312:	4baf      	ldr	r3, [pc, #700]	@ (80025d0 <ICM20948_Read_Data_Handle+0x300>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	607b      	str	r3, [r7, #4]
	//	float mx = g_axises_mag.x;
//	float my = g_axises_mag.y;
//	float mz = g_axises_mag.z;

	pitch_g = pitch + gx*0.01;
 8002318:	4baf      	ldr	r3, [pc, #700]	@ (80025d8 <ICM20948_Read_Data_Handle+0x308>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe f8ef 	bl	8000500 <__aeabi_f2d>
 8002322:	4604      	mov	r4, r0
 8002324:	460d      	mov	r5, r1
 8002326:	68b8      	ldr	r0, [r7, #8]
 8002328:	f7fe f8ea 	bl	8000500 <__aeabi_f2d>
 800232c:	a39e      	add	r3, pc, #632	@ (adr r3, 80025a8 <ICM20948_Read_Data_Handle+0x2d8>)
 800232e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002332:	f7fe f93d 	bl	80005b0 <__aeabi_dmul>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4620      	mov	r0, r4
 800233c:	4629      	mov	r1, r5
 800233e:	f7fd ff81 	bl	8000244 <__adddf3>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4610      	mov	r0, r2
 8002348:	4619      	mov	r1, r3
 800234a:	f7fe fc09 	bl	8000b60 <__aeabi_d2f>
 800234e:	4603      	mov	r3, r0
 8002350:	4aa2      	ldr	r2, [pc, #648]	@ (80025dc <ICM20948_Read_Data_Handle+0x30c>)
 8002352:	6013      	str	r3, [r2, #0]
	pitch_a = atan(ay/sqrt(pow(ax, 2)+pow(az, 2))) * 180.0/M_PI;
 8002354:	6938      	ldr	r0, [r7, #16]
 8002356:	f7fe f8d3 	bl	8000500 <__aeabi_f2d>
 800235a:	4604      	mov	r4, r0
 800235c:	460d      	mov	r5, r1
 800235e:	6978      	ldr	r0, [r7, #20]
 8002360:	f7fe f8ce 	bl	8000500 <__aeabi_f2d>
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800236c:	f008 fa9a 	bl	800a8a4 <pow>
 8002370:	4680      	mov	r8, r0
 8002372:	4689      	mov	r9, r1
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f7fe f8c3 	bl	8000500 <__aeabi_f2d>
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002382:	f008 fa8f 	bl	800a8a4 <pow>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4640      	mov	r0, r8
 800238c:	4649      	mov	r1, r9
 800238e:	f7fd ff59 	bl	8000244 <__adddf3>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4610      	mov	r0, r2
 8002398:	4619      	mov	r1, r3
 800239a:	f008 faeb 	bl	800a974 <sqrt>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4620      	mov	r0, r4
 80023a4:	4629      	mov	r1, r5
 80023a6:	f7fe fa2d 	bl	8000804 <__aeabi_ddiv>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4610      	mov	r0, r2
 80023b0:	4619      	mov	r1, r3
 80023b2:	f008 fb05 	bl	800a9c0 <atan>
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	4b89      	ldr	r3, [pc, #548]	@ (80025e0 <ICM20948_Read_Data_Handle+0x310>)
 80023bc:	f7fe f8f8 	bl	80005b0 <__aeabi_dmul>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	a379      	add	r3, pc, #484	@ (adr r3, 80025b0 <ICM20948_Read_Data_Handle+0x2e0>)
 80023ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ce:	f7fe fa19 	bl	8000804 <__aeabi_ddiv>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	f7fe fbc1 	bl	8000b60 <__aeabi_d2f>
 80023de:	4603      	mov	r3, r0
 80023e0:	4a80      	ldr	r2, [pc, #512]	@ (80025e4 <ICM20948_Read_Data_Handle+0x314>)
 80023e2:	6013      	str	r3, [r2, #0]
	pitch = 0.98*pitch_g + 0.02*pitch_a;
 80023e4:	4b7d      	ldr	r3, [pc, #500]	@ (80025dc <ICM20948_Read_Data_Handle+0x30c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe f889 	bl	8000500 <__aeabi_f2d>
 80023ee:	a372      	add	r3, pc, #456	@ (adr r3, 80025b8 <ICM20948_Read_Data_Handle+0x2e8>)
 80023f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f4:	f7fe f8dc 	bl	80005b0 <__aeabi_dmul>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4614      	mov	r4, r2
 80023fe:	461d      	mov	r5, r3
 8002400:	4b78      	ldr	r3, [pc, #480]	@ (80025e4 <ICM20948_Read_Data_Handle+0x314>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe f87b 	bl	8000500 <__aeabi_f2d>
 800240a:	a36d      	add	r3, pc, #436	@ (adr r3, 80025c0 <ICM20948_Read_Data_Handle+0x2f0>)
 800240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002410:	f7fe f8ce 	bl	80005b0 <__aeabi_dmul>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4620      	mov	r0, r4
 800241a:	4629      	mov	r1, r5
 800241c:	f7fd ff12 	bl	8000244 <__adddf3>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	f7fe fb9a 	bl	8000b60 <__aeabi_d2f>
 800242c:	4603      	mov	r3, r0
 800242e:	4a6a      	ldr	r2, [pc, #424]	@ (80025d8 <ICM20948_Read_Data_Handle+0x308>)
 8002430:	6013      	str	r3, [r2, #0]

	roll_g = roll + gy*0.01;
 8002432:	4b6d      	ldr	r3, [pc, #436]	@ (80025e8 <ICM20948_Read_Data_Handle+0x318>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe f862 	bl	8000500 <__aeabi_f2d>
 800243c:	4604      	mov	r4, r0
 800243e:	460d      	mov	r5, r1
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7fe f85d 	bl	8000500 <__aeabi_f2d>
 8002446:	a358      	add	r3, pc, #352	@ (adr r3, 80025a8 <ICM20948_Read_Data_Handle+0x2d8>)
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	f7fe f8b0 	bl	80005b0 <__aeabi_dmul>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4620      	mov	r0, r4
 8002456:	4629      	mov	r1, r5
 8002458:	f7fd fef4 	bl	8000244 <__adddf3>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f7fe fb7c 	bl	8000b60 <__aeabi_d2f>
 8002468:	4603      	mov	r3, r0
 800246a:	4a60      	ldr	r2, [pc, #384]	@ (80025ec <ICM20948_Read_Data_Handle+0x31c>)
 800246c:	6013      	str	r3, [r2, #0]
	roll_a = atan(ax/az) * 180.0/M_PI;
 800246e:	68f9      	ldr	r1, [r7, #12]
 8002470:	6978      	ldr	r0, [r7, #20]
 8002472:	f7fe fd87 	bl	8000f84 <__aeabi_fdiv>
 8002476:	4603      	mov	r3, r0
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe f841 	bl	8000500 <__aeabi_f2d>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4610      	mov	r0, r2
 8002484:	4619      	mov	r1, r3
 8002486:	f008 fa9b 	bl	800a9c0 <atan>
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	4b54      	ldr	r3, [pc, #336]	@ (80025e0 <ICM20948_Read_Data_Handle+0x310>)
 8002490:	f7fe f88e 	bl	80005b0 <__aeabi_dmul>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	a344      	add	r3, pc, #272	@ (adr r3, 80025b0 <ICM20948_Read_Data_Handle+0x2e0>)
 800249e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a2:	f7fe f9af 	bl	8000804 <__aeabi_ddiv>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	f7fe fb57 	bl	8000b60 <__aeabi_d2f>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4a4e      	ldr	r2, [pc, #312]	@ (80025f0 <ICM20948_Read_Data_Handle+0x320>)
 80024b6:	6013      	str	r3, [r2, #0]
	roll = 0.98*roll_g + 0.02*roll_a;
 80024b8:	4b4c      	ldr	r3, [pc, #304]	@ (80025ec <ICM20948_Read_Data_Handle+0x31c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe f81f 	bl	8000500 <__aeabi_f2d>
 80024c2:	a33d      	add	r3, pc, #244	@ (adr r3, 80025b8 <ICM20948_Read_Data_Handle+0x2e8>)
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	f7fe f872 	bl	80005b0 <__aeabi_dmul>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4614      	mov	r4, r2
 80024d2:	461d      	mov	r5, r3
 80024d4:	4b46      	ldr	r3, [pc, #280]	@ (80025f0 <ICM20948_Read_Data_Handle+0x320>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe f811 	bl	8000500 <__aeabi_f2d>
 80024de:	a338      	add	r3, pc, #224	@ (adr r3, 80025c0 <ICM20948_Read_Data_Handle+0x2f0>)
 80024e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e4:	f7fe f864 	bl	80005b0 <__aeabi_dmul>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4620      	mov	r0, r4
 80024ee:	4629      	mov	r1, r5
 80024f0:	f7fd fea8 	bl	8000244 <__adddf3>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f7fe fb30 	bl	8000b60 <__aeabi_d2f>
 8002500:	4603      	mov	r3, r0
 8002502:	4a39      	ldr	r2, [pc, #228]	@ (80025e8 <ICM20948_Read_Data_Handle+0x318>)
 8002504:	6013      	str	r3, [r2, #0]
//					if(rightangle>40){rightangle=40;}
//					else if(rightangle<0){rightangle=0;}
//				}
//			}

	speed = PID(pitch);
 8002506:	4b34      	ldr	r3, [pc, #208]	@ (80025d8 <ICM20948_Read_Data_Handle+0x308>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fd14 	bl	8001f38 <PID>
 8002510:	4603      	mov	r3, r0
 8002512:	4a38      	ldr	r2, [pc, #224]	@ (80025f4 <ICM20948_Read_Data_Handle+0x324>)
 8002514:	6013      	str	r3, [r2, #0]
//	float speed1 = PID(pitch);
//	speed=LowPassFilter(speed1,dt,Tf_p);

	Encoder_Get_ALL(encoder);
 8002516:	4838      	ldr	r0, [pc, #224]	@ (80025f8 <ICM20948_Read_Data_Handle+0x328>)
 8002518:	f7ff f8b4 	bl	8001684 <Encoder_Get_ALL>
	speed_e = encoder[1] - encoder[0];
 800251c:	4b36      	ldr	r3, [pc, #216]	@ (80025f8 <ICM20948_Read_Data_Handle+0x328>)
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	4b35      	ldr	r3, [pc, #212]	@ (80025f8 <ICM20948_Read_Data_Handle+0x328>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe fc24 	bl	8000d74 <__aeabi_i2f>
 800252c:	4603      	mov	r3, r0
 800252e:	4a33      	ldr	r2, [pc, #204]	@ (80025fc <ICM20948_Read_Data_Handle+0x32c>)
 8002530:	6013      	str	r3, [r2, #0]
	speed_e_pid = PID_e(speed_e);
 8002532:	4b32      	ldr	r3, [pc, #200]	@ (80025fc <ICM20948_Read_Data_Handle+0x32c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fd88 	bl	800204c <PID_e>
 800253c:	4603      	mov	r3, r0
 800253e:	4a30      	ldr	r2, [pc, #192]	@ (8002600 <ICM20948_Read_Data_Handle+0x330>)
 8002540:	6013      	str	r3, [r2, #0]
//	if (show_encoder > 10)
//	{
//		show_encoder = 0;
//		printf("Encoder:%d, %d, %f, %f \r\n\n\n\n\n\n", encoder[0], encoder[1], speed_e, speed_e_pid);
//	}
	if(g_Encoder_M1_Now > 50000 && g_Encoder_M2_Now > 50000)
 8002542:	4b30      	ldr	r3, [pc, #192]	@ (8002604 <ICM20948_Read_Data_Handle+0x334>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800254a:	4293      	cmp	r3, r2
 800254c:	dd13      	ble.n	8002576 <ICM20948_Read_Data_Handle+0x2a6>
 800254e:	4b2e      	ldr	r3, [pc, #184]	@ (8002608 <ICM20948_Read_Data_Handle+0x338>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8002556:	4293      	cmp	r3, r2
 8002558:	dd0d      	ble.n	8002576 <ICM20948_Read_Data_Handle+0x2a6>
	{
		g_Encoder_M1_Now -= 50000;
 800255a:	4b2a      	ldr	r3, [pc, #168]	@ (8002604 <ICM20948_Read_Data_Handle+0x334>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f5a3 4343 	sub.w	r3, r3, #49920	@ 0xc300
 8002562:	3b50      	subs	r3, #80	@ 0x50
 8002564:	4a27      	ldr	r2, [pc, #156]	@ (8002604 <ICM20948_Read_Data_Handle+0x334>)
 8002566:	6013      	str	r3, [r2, #0]
		g_Encoder_M2_Now -= 50000;
 8002568:	4b27      	ldr	r3, [pc, #156]	@ (8002608 <ICM20948_Read_Data_Handle+0x338>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f5a3 4343 	sub.w	r3, r3, #49920	@ 0xc300
 8002570:	3b50      	subs	r3, #80	@ 0x50
 8002572:	4a25      	ldr	r2, [pc, #148]	@ (8002608 <ICM20948_Read_Data_Handle+0x338>)
 8002574:	6013      	str	r3, [r2, #0]
	}
	Encoder_Update_Count();
 8002576:	f7ff f89b 	bl	80016b0 <Encoder_Update_Count>

	if(print_count==5){
 800257a:	4b14      	ldr	r3, [pc, #80]	@ (80025cc <ICM20948_Read_Data_Handle+0x2fc>)
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	2b05      	cmp	r3, #5
 8002580:	f040 8094 	bne.w	80026ac <ICM20948_Read_Data_Handle+0x3dc>
		//밸런싱 셋포인트 pid
		speed_e1=encoder[0];
 8002584:	4b1c      	ldr	r3, [pc, #112]	@ (80025f8 <ICM20948_Read_Data_Handle+0x328>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a20      	ldr	r2, [pc, #128]	@ (800260c <ICM20948_Read_Data_Handle+0x33c>)
 800258a:	6013      	str	r3, [r2, #0]
		speed_e2=encoder[1];
 800258c:	4b1a      	ldr	r3, [pc, #104]	@ (80025f8 <ICM20948_Read_Data_Handle+0x328>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4a1f      	ldr	r2, [pc, #124]	@ (8002610 <ICM20948_Read_Data_Handle+0x340>)
 8002592:	6013      	str	r3, [r2, #0]

		speed_e1_c=speed_e1-speed_e1_prev;
 8002594:	4b1d      	ldr	r3, [pc, #116]	@ (800260c <ICM20948_Read_Data_Handle+0x33c>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b1e      	ldr	r3, [pc, #120]	@ (8002614 <ICM20948_Read_Data_Handle+0x344>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	4a1e      	ldr	r2, [pc, #120]	@ (8002618 <ICM20948_Read_Data_Handle+0x348>)
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e03b      	b.n	800261c <ICM20948_Read_Data_Handle+0x34c>
 80025a4:	f3af 8000 	nop.w
 80025a8:	47ae147b 	.word	0x47ae147b
 80025ac:	3f847ae1 	.word	0x3f847ae1
 80025b0:	54442d18 	.word	0x54442d18
 80025b4:	400921fb 	.word	0x400921fb
 80025b8:	f5c28f5c 	.word	0xf5c28f5c
 80025bc:	3fef5c28 	.word	0x3fef5c28
 80025c0:	47ae147b 	.word	0x47ae147b
 80025c4:	3f947ae1 	.word	0x3f947ae1
 80025c8:	2000024c 	.word	0x2000024c
 80025cc:	20000286 	.word	0x20000286
 80025d0:	20000260 	.word	0x20000260
 80025d4:	2000026c 	.word	0x2000026c
 80025d8:	20000290 	.word	0x20000290
 80025dc:	20000298 	.word	0x20000298
 80025e0:	40668000 	.word	0x40668000
 80025e4:	20000294 	.word	0x20000294
 80025e8:	2000029c 	.word	0x2000029c
 80025ec:	200002a4 	.word	0x200002a4
 80025f0:	200002a0 	.word	0x200002a0
 80025f4:	200002ec 	.word	0x200002ec
 80025f8:	200002b8 	.word	0x200002b8
 80025fc:	200002b4 	.word	0x200002b4
 8002600:	200002f0 	.word	0x200002f0
 8002604:	20000258 	.word	0x20000258
 8002608:	2000025c 	.word	0x2000025c
 800260c:	200002c8 	.word	0x200002c8
 8002610:	200002cc 	.word	0x200002cc
 8002614:	200002d0 	.word	0x200002d0
 8002618:	200002c0 	.word	0x200002c0
		speed_e2_c=speed_e2-speed_e2_prev;
 800261c:	4b56      	ldr	r3, [pc, #344]	@ (8002778 <ICM20948_Read_Data_Handle+0x4a8>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b56      	ldr	r3, [pc, #344]	@ (800277c <ICM20948_Read_Data_Handle+0x4ac>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	4a56      	ldr	r2, [pc, #344]	@ (8002780 <ICM20948_Read_Data_Handle+0x4b0>)
 8002628:	6013      	str	r3, [r2, #0]

		speed_e1_prev=speed_e1;
 800262a:	4b56      	ldr	r3, [pc, #344]	@ (8002784 <ICM20948_Read_Data_Handle+0x4b4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a56      	ldr	r2, [pc, #344]	@ (8002788 <ICM20948_Read_Data_Handle+0x4b8>)
 8002630:	6013      	str	r3, [r2, #0]
		speed_e2_prev=speed_e2;
 8002632:	4b51      	ldr	r3, [pc, #324]	@ (8002778 <ICM20948_Read_Data_Handle+0x4a8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a51      	ldr	r2, [pc, #324]	@ (800277c <ICM20948_Read_Data_Handle+0x4ac>)
 8002638:	6013      	str	r3, [r2, #0]
		setpoint+=PID_p(speed_e1_c+speed_e2_c);
 800263a:	4b54      	ldr	r3, [pc, #336]	@ (800278c <ICM20948_Read_Data_Handle+0x4bc>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4b50      	ldr	r3, [pc, #320]	@ (8002780 <ICM20948_Read_Data_Handle+0x4b0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4413      	add	r3, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe fb95 	bl	8000d74 <__aeabi_i2f>
 800264a:	4603      	mov	r3, r0
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fdad 	bl	80021ac <PID_p>
 8002652:	4602      	mov	r2, r0
 8002654:	4b4e      	ldr	r3, [pc, #312]	@ (8002790 <ICM20948_Read_Data_Handle+0x4c0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4619      	mov	r1, r3
 800265a:	4610      	mov	r0, r2
 800265c:	f7fe fad6 	bl	8000c0c <__addsf3>
 8002660:	4603      	mov	r3, r0
 8002662:	461a      	mov	r2, r3
 8002664:	4b4a      	ldr	r3, [pc, #296]	@ (8002790 <ICM20948_Read_Data_Handle+0x4c0>)
 8002666:	601a      	str	r2, [r3, #0]
//						rightangle+=servopid;
//						if(rightangle>40){rightangle=40;}
//						else if(rightangle<0){rightangle=0;}
//					}
//				}
		if(setpoint>max_setpoint){setpoint=max_setpoint;}
 8002668:	4b49      	ldr	r3, [pc, #292]	@ (8002790 <ICM20948_Read_Data_Handle+0x4c0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a49      	ldr	r2, [pc, #292]	@ (8002794 <ICM20948_Read_Data_Handle+0x4c4>)
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fd8e 	bl	8001194 <__aeabi_fcmpgt>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d004      	beq.n	8002688 <ICM20948_Read_Data_Handle+0x3b8>
 800267e:	4b45      	ldr	r3, [pc, #276]	@ (8002794 <ICM20948_Read_Data_Handle+0x4c4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a43      	ldr	r2, [pc, #268]	@ (8002790 <ICM20948_Read_Data_Handle+0x4c0>)
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e00e      	b.n	80026a6 <ICM20948_Read_Data_Handle+0x3d6>
		else if(setpoint<min_setpoint){setpoint=min_setpoint;}
 8002688:	4b41      	ldr	r3, [pc, #260]	@ (8002790 <ICM20948_Read_Data_Handle+0x4c0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a42      	ldr	r2, [pc, #264]	@ (8002798 <ICM20948_Read_Data_Handle+0x4c8>)
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fd60 	bl	8001158 <__aeabi_fcmplt>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <ICM20948_Read_Data_Handle+0x3d6>
 800269e:	4b3e      	ldr	r3, [pc, #248]	@ (8002798 <ICM20948_Read_Data_Handle+0x4c8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a3b      	ldr	r2, [pc, #236]	@ (8002790 <ICM20948_Read_Data_Handle+0x4c0>)
 80026a4:	6013      	str	r3, [r2, #0]
		//PwmServo_Set_Angle_All(40-leftangle,140+rightangle, 30, 30);
		print_count=0;
 80026a6:	4b3d      	ldr	r3, [pc, #244]	@ (800279c <ICM20948_Read_Data_Handle+0x4cc>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	801a      	strh	r2, [r3, #0]
	}
	if(pitch <35 && pitch > -30)
 80026ac:	4b3c      	ldr	r3, [pc, #240]	@ (80027a0 <ICM20948_Read_Data_Handle+0x4d0>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	493c      	ldr	r1, [pc, #240]	@ (80027a4 <ICM20948_Read_Data_Handle+0x4d4>)
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe fd50 	bl	8001158 <__aeabi_fcmplt>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d052      	beq.n	8002764 <ICM20948_Read_Data_Handle+0x494>
 80026be:	4b38      	ldr	r3, [pc, #224]	@ (80027a0 <ICM20948_Read_Data_Handle+0x4d0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4939      	ldr	r1, [pc, #228]	@ (80027a8 <ICM20948_Read_Data_Handle+0x4d8>)
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe fd65 	bl	8001194 <__aeabi_fcmpgt>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d049      	beq.n	8002764 <ICM20948_Read_Data_Handle+0x494>
	{
		if(spin == 0){
 80026d0:	4b36      	ldr	r3, [pc, #216]	@ (80027ac <ICM20948_Read_Data_Handle+0x4dc>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f04f 0100 	mov.w	r1, #0
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fe fd33 	bl	8001144 <__aeabi_fcmpeq>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d026      	beq.n	8002732 <ICM20948_Read_Data_Handle+0x462>
			Motor_Set_Pwm(MOTOR_ID_M1, speed+speed_e_pid);
 80026e4:	4b32      	ldr	r3, [pc, #200]	@ (80027b0 <ICM20948_Read_Data_Handle+0x4e0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a32      	ldr	r2, [pc, #200]	@ (80027b4 <ICM20948_Read_Data_Handle+0x4e4>)
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fe fa8c 	bl	8000c0c <__addsf3>
 80026f4:	4603      	mov	r3, r0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe fd56 	bl	80011a8 <__aeabi_f2iz>
 80026fc:	4603      	mov	r3, r0
 80026fe:	b21b      	sxth	r3, r3
 8002700:	4619      	mov	r1, r3
 8002702:	2000      	movs	r0, #0
 8002704:	f000 f926 	bl	8002954 <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M2, -(speed-speed_e_pid));
 8002708:	4b29      	ldr	r3, [pc, #164]	@ (80027b0 <ICM20948_Read_Data_Handle+0x4e0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a29      	ldr	r2, [pc, #164]	@ (80027b4 <ICM20948_Read_Data_Handle+0x4e4>)
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fa78 	bl	8000c08 <__aeabi_fsub>
 8002718:	4603      	mov	r3, r0
 800271a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe fd42 	bl	80011a8 <__aeabi_f2iz>
 8002724:	4603      	mov	r3, r0
 8002726:	b21b      	sxth	r3, r3
 8002728:	4619      	mov	r1, r3
 800272a:	2001      	movs	r0, #1
 800272c:	f000 f912 	bl	8002954 <Motor_Set_Pwm>
		if(spin == 0){
 8002730:	e01c      	b.n	800276c <ICM20948_Read_Data_Handle+0x49c>
			//PwmServo_Set_Angle_All(40-leftangle,140+rightangle, 30, 30);
		}
		else{
			Motor_Set_Pwm(MOTOR_ID_M1, speed);
 8002732:	4b1f      	ldr	r3, [pc, #124]	@ (80027b0 <ICM20948_Read_Data_Handle+0x4e0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe fd36 	bl	80011a8 <__aeabi_f2iz>
 800273c:	4603      	mov	r3, r0
 800273e:	b21b      	sxth	r3, r3
 8002740:	4619      	mov	r1, r3
 8002742:	2000      	movs	r0, #0
 8002744:	f000 f906 	bl	8002954 <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M2, -(speed));
 8002748:	4b19      	ldr	r3, [pc, #100]	@ (80027b0 <ICM20948_Read_Data_Handle+0x4e0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe fd29 	bl	80011a8 <__aeabi_f2iz>
 8002756:	4603      	mov	r3, r0
 8002758:	b21b      	sxth	r3, r3
 800275a:	4619      	mov	r1, r3
 800275c:	2001      	movs	r0, #1
 800275e:	f000 f8f9 	bl	8002954 <Motor_Set_Pwm>
		if(spin == 0){
 8002762:	e003      	b.n	800276c <ICM20948_Read_Data_Handle+0x49c>
		}

	}
	else {Motor_Stop(0);}
 8002764:	2000      	movs	r0, #0
 8002766:	f000 f89b 	bl	80028a0 <Motor_Stop>
}}
 800276a:	e7ff      	b.n	800276c <ICM20948_Read_Data_Handle+0x49c>
 800276c:	bf00      	nop
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002776:	bf00      	nop
 8002778:	200002cc 	.word	0x200002cc
 800277c:	200002d4 	.word	0x200002d4
 8002780:	200002c4 	.word	0x200002c4
 8002784:	200002c8 	.word	0x200002c8
 8002788:	200002d0 	.word	0x200002d0
 800278c:	200002c0 	.word	0x200002c0
 8002790:	20000014 	.word	0x20000014
 8002794:	20000030 	.word	0x20000030
 8002798:	20000034 	.word	0x20000034
 800279c:	20000286 	.word	0x20000286
 80027a0:	20000290 	.word	0x20000290
 80027a4:	420c0000 	.word	0x420c0000
 80027a8:	c1f00000 	.word	0xc1f00000
 80027ac:	200002a8 	.word	0x200002a8
 80027b0:	200002ec 	.word	0x200002ec
 80027b4:	200002f0 	.word	0x200002f0

080027b8 <Key1_is_Press>:


// 判断按键是否被按下，按下返回KEY_PRESS，松开返回KEY_RELEASE
// Determine if the key is pressed, press to return KEY_PRESS, release to return KEY_RELEASE  
static uint8_t Key1_is_Press(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin))
 80027bc:	2104      	movs	r1, #4
 80027be:	4805      	ldr	r0, [pc, #20]	@ (80027d4 <Key1_is_Press+0x1c>)
 80027c0:	f002 f908 	bl	80049d4 <HAL_GPIO_ReadPin>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <Key1_is_Press+0x16>
	{
		return KEY_PRESS; // 如果按键被按下，则返回KEY_PRESS
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <Key1_is_Press+0x18>
	}
	return KEY_RELEASE;   // 如果按键是松开状态，则返回KEY_RELEASE
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40011400 	.word	0x40011400

080027d8 <Key1_State>:
// 读取按键K1的状态，按下返回KEY_PRESS，松开返回KEY_RELEASE. 
// mode:设置模式，0：按下一直返回KEY_PRESS；1：按下只返回一次KEY_PRESS
// Read the state of key K1, press down to return KEY_PRESS, release to return key_release. 
// mode: setting mode, 0: press down to return KEY_PRESS;  1: KEY_PRESS is returned only once  
uint8_t Key1_State(uint8_t mode)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	71fb      	strb	r3, [r7, #7]
	static uint16_t key1_state = 0;

	if (Key1_is_Press() == KEY_PRESS)
 80027e2:	f7ff ffe9 	bl	80027b8 <Key1_is_Press>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d10e      	bne.n	800280a <Key1_State+0x32>
	{
		if (key1_state < (mode + 1) * 2)
 80027ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002828 <Key1_State+0x50>)
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	3301      	adds	r3, #1
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	429a      	cmp	r2, r3
 80027fa:	da09      	bge.n	8002810 <Key1_State+0x38>
		{
			key1_state++;
 80027fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <Key1_State+0x50>)
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	3301      	adds	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	4b08      	ldr	r3, [pc, #32]	@ (8002828 <Key1_State+0x50>)
 8002806:	801a      	strh	r2, [r3, #0]
 8002808:	e002      	b.n	8002810 <Key1_State+0x38>
		}
	}
	else
	{
		key1_state = 0;
 800280a:	4b07      	ldr	r3, [pc, #28]	@ (8002828 <Key1_State+0x50>)
 800280c:	2200      	movs	r2, #0
 800280e:	801a      	strh	r2, [r3, #0]
	}
	if (key1_state == 2)
 8002810:	4b05      	ldr	r3, [pc, #20]	@ (8002828 <Key1_State+0x50>)
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d101      	bne.n	800281c <Key1_State+0x44>
	{
		return KEY_PRESS;
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <Key1_State+0x46>
	}
	return KEY_RELEASE;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	200002fa 	.word	0x200002fa

0800282c <Motor_Ignore_Dead_Zone>:
float max = 1000;


// Ignore PWM dead band  忽略PWM信号死区
static int16_t Motor_Ignore_Dead_Zone(int16_t pulse)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	80fb      	strh	r3, [r7, #6]
    if (pulse > 0) return pulse + ignore;
 8002836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800283a:	2b00      	cmp	r3, #0
 800283c:	dd12      	ble.n	8002864 <Motor_Ignore_Dead_Zone+0x38>
 800283e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fa96 	bl	8000d74 <__aeabi_i2f>
 8002848:	4602      	mov	r2, r0
 800284a:	4b14      	ldr	r3, [pc, #80]	@ (800289c <Motor_Ignore_Dead_Zone+0x70>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4619      	mov	r1, r3
 8002850:	4610      	mov	r0, r2
 8002852:	f7fe f9db 	bl	8000c0c <__addsf3>
 8002856:	4603      	mov	r3, r0
 8002858:	4618      	mov	r0, r3
 800285a:	f7fe fca5 	bl	80011a8 <__aeabi_f2iz>
 800285e:	4603      	mov	r3, r0
 8002860:	b21b      	sxth	r3, r3
 8002862:	e017      	b.n	8002894 <Motor_Ignore_Dead_Zone+0x68>
    if (pulse < 0) return pulse - ignore;
 8002864:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002868:	2b00      	cmp	r3, #0
 800286a:	da12      	bge.n	8002892 <Motor_Ignore_Dead_Zone+0x66>
 800286c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe fa7f 	bl	8000d74 <__aeabi_i2f>
 8002876:	4602      	mov	r2, r0
 8002878:	4b08      	ldr	r3, [pc, #32]	@ (800289c <Motor_Ignore_Dead_Zone+0x70>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4619      	mov	r1, r3
 800287e:	4610      	mov	r0, r2
 8002880:	f7fe f9c2 	bl	8000c08 <__aeabi_fsub>
 8002884:	4603      	mov	r3, r0
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe fc8e 	bl	80011a8 <__aeabi_f2iz>
 800288c:	4603      	mov	r3, r0
 800288e:	b21b      	sxth	r3, r3
 8002890:	e000      	b.n	8002894 <Motor_Ignore_Dead_Zone+0x68>
    return 0;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000038 	.word	0x20000038

080028a0 <Motor_Stop>:
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
}

// All motors stopped  所有电机停止
void Motor_Stop(uint8_t brake)
{
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
    if (brake != 0) brake = 1;
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <Motor_Stop+0x14>
 80028b0:	2301      	movs	r3, #1
 80028b2:	71fb      	strb	r3, [r7, #7]
    PWM_M1_A = brake * max;
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fa5c 	bl	8000d74 <__aeabi_i2f>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b23      	ldr	r3, [pc, #140]	@ (800294c <Motor_Stop+0xac>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4619      	mov	r1, r3
 80028c4:	4610      	mov	r0, r2
 80028c6:	f7fe faa9 	bl	8000e1c <__aeabi_fmul>
 80028ca:	4603      	mov	r3, r0
 80028cc:	4c20      	ldr	r4, [pc, #128]	@ (8002950 <Motor_Stop+0xb0>)
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe fc90 	bl	80011f4 <__aeabi_f2uiz>
 80028d4:	4603      	mov	r3, r0
 80028d6:	6363      	str	r3, [r4, #52]	@ 0x34
    PWM_M1_B = brake * max;
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fa4a 	bl	8000d74 <__aeabi_i2f>
 80028e0:	4602      	mov	r2, r0
 80028e2:	4b1a      	ldr	r3, [pc, #104]	@ (800294c <Motor_Stop+0xac>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4619      	mov	r1, r3
 80028e8:	4610      	mov	r0, r2
 80028ea:	f7fe fa97 	bl	8000e1c <__aeabi_fmul>
 80028ee:	4603      	mov	r3, r0
 80028f0:	4c17      	ldr	r4, [pc, #92]	@ (8002950 <Motor_Stop+0xb0>)
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe fc7e 	bl	80011f4 <__aeabi_f2uiz>
 80028f8:	4603      	mov	r3, r0
 80028fa:	63a3      	str	r3, [r4, #56]	@ 0x38
    PWM_M2_A = brake * max;
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe fa38 	bl	8000d74 <__aeabi_i2f>
 8002904:	4602      	mov	r2, r0
 8002906:	4b11      	ldr	r3, [pc, #68]	@ (800294c <Motor_Stop+0xac>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4619      	mov	r1, r3
 800290c:	4610      	mov	r0, r2
 800290e:	f7fe fa85 	bl	8000e1c <__aeabi_fmul>
 8002912:	4603      	mov	r3, r0
 8002914:	4c0e      	ldr	r4, [pc, #56]	@ (8002950 <Motor_Stop+0xb0>)
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fc6c 	bl	80011f4 <__aeabi_f2uiz>
 800291c:	4603      	mov	r3, r0
 800291e:	63e3      	str	r3, [r4, #60]	@ 0x3c
    PWM_M2_B = brake * max;
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe fa26 	bl	8000d74 <__aeabi_i2f>
 8002928:	4602      	mov	r2, r0
 800292a:	4b08      	ldr	r3, [pc, #32]	@ (800294c <Motor_Stop+0xac>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4619      	mov	r1, r3
 8002930:	4610      	mov	r0, r2
 8002932:	f7fe fa73 	bl	8000e1c <__aeabi_fmul>
 8002936:	4603      	mov	r3, r0
 8002938:	4c05      	ldr	r4, [pc, #20]	@ (8002950 <Motor_Stop+0xb0>)
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe fc5a 	bl	80011f4 <__aeabi_f2uiz>
 8002940:	4603      	mov	r3, r0
 8002942:	6423      	str	r3, [r4, #64]	@ 0x40

}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	bd90      	pop	{r4, r7, pc}
 800294c:	2000003c 	.word	0x2000003c
 8002950:	40013400 	.word	0x40013400

08002954 <Motor_Set_Pwm>:

void Motor_Set_Pwm(uint8_t id, int16_t speed)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	460a      	mov	r2, r1
 800295e:	71fb      	strb	r3, [r7, #7]
 8002960:	4613      	mov	r3, r2
 8002962:	80bb      	strh	r3, [r7, #4]
    int16_t pulse = Motor_Ignore_Dead_Zone(speed);
 8002964:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff ff5f 	bl	800282c <Motor_Ignore_Dead_Zone>
 800296e:	4603      	mov	r3, r0
 8002970:	81fb      	strh	r3, [r7, #14]
    // Limit input  限制输入
    if (pulse >= max)
 8002972:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe f9fc 	bl	8000d74 <__aeabi_i2f>
 800297c:	4602      	mov	r2, r0
 800297e:	4b33      	ldr	r3, [pc, #204]	@ (8002a4c <Motor_Set_Pwm+0xf8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4619      	mov	r1, r3
 8002984:	4610      	mov	r0, r2
 8002986:	f7fe fbfb 	bl	8001180 <__aeabi_fcmpge>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d006      	beq.n	800299e <Motor_Set_Pwm+0x4a>
        pulse = max;
 8002990:	4b2e      	ldr	r3, [pc, #184]	@ (8002a4c <Motor_Set_Pwm+0xf8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7fe fc07 	bl	80011a8 <__aeabi_f2iz>
 800299a:	4603      	mov	r3, r0
 800299c:	81fb      	strh	r3, [r7, #14]
    if (pulse <= -max)
 800299e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe f9e6 	bl	8000d74 <__aeabi_i2f>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b28      	ldr	r3, [pc, #160]	@ (8002a4c <Motor_Set_Pwm+0xf8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80029b2:	4619      	mov	r1, r3
 80029b4:	4610      	mov	r0, r2
 80029b6:	f7fe fbd9 	bl	800116c <__aeabi_fcmple>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <Motor_Set_Pwm+0x7e>
        pulse = -max;
 80029c0:	4b22      	ldr	r3, [pc, #136]	@ (8002a4c <Motor_Set_Pwm+0xf8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe fbed 	bl	80011a8 <__aeabi_f2iz>
 80029ce:	4603      	mov	r3, r0
 80029d0:	81fb      	strh	r3, [r7, #14]

    switch (id)
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <Motor_Set_Pwm+0x8a>
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d019      	beq.n	8002a10 <Motor_Set_Pwm+0xbc>
    }



    default:
        break;
 80029dc:	e031      	b.n	8002a42 <Motor_Set_Pwm+0xee>
        pulse = -pulse;
 80029de:	89fb      	ldrh	r3, [r7, #14]
 80029e0:	425b      	negs	r3, r3
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 80029e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	db07      	blt.n	80029fe <Motor_Set_Pwm+0xaa>
            PWM_M1_A = pulse;
 80029ee:	4a18      	ldr	r2, [pc, #96]	@ (8002a50 <Motor_Set_Pwm+0xfc>)
 80029f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029f4:	6353      	str	r3, [r2, #52]	@ 0x34
            PWM_M1_B = 0;
 80029f6:	4b16      	ldr	r3, [pc, #88]	@ (8002a50 <Motor_Set_Pwm+0xfc>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80029fc:	e021      	b.n	8002a42 <Motor_Set_Pwm+0xee>
            PWM_M1_A = 0;
 80029fe:	4b14      	ldr	r3, [pc, #80]	@ (8002a50 <Motor_Set_Pwm+0xfc>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M1_B = -pulse;
 8002a04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a08:	425a      	negs	r2, r3
 8002a0a:	4b11      	ldr	r3, [pc, #68]	@ (8002a50 <Motor_Set_Pwm+0xfc>)
 8002a0c:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8002a0e:	e018      	b.n	8002a42 <Motor_Set_Pwm+0xee>
        pulse = -pulse;
 8002a10:	89fb      	ldrh	r3, [r7, #14]
 8002a12:	425b      	negs	r3, r3
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 8002a18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	db07      	blt.n	8002a30 <Motor_Set_Pwm+0xdc>
            PWM_M2_A = pulse;
 8002a20:	4a0b      	ldr	r2, [pc, #44]	@ (8002a50 <Motor_Set_Pwm+0xfc>)
 8002a22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a26:	63d3      	str	r3, [r2, #60]	@ 0x3c
            PWM_M2_B = 0;
 8002a28:	4b09      	ldr	r3, [pc, #36]	@ (8002a50 <Motor_Set_Pwm+0xfc>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 8002a2e:	e007      	b.n	8002a40 <Motor_Set_Pwm+0xec>
            PWM_M2_A = 0;
 8002a30:	4b07      	ldr	r3, [pc, #28]	@ (8002a50 <Motor_Set_Pwm+0xfc>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M2_B = -pulse;
 8002a36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a3a:	425a      	negs	r2, r3
 8002a3c:	4b04      	ldr	r3, [pc, #16]	@ (8002a50 <Motor_Set_Pwm+0xfc>)
 8002a3e:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 8002a40:	bf00      	nop
    }
}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	2000003c 	.word	0x2000003c
 8002a50:	40013400 	.word	0x40013400

08002a54 <PwmServo_Angle_To_Pulse>:
uint16_t g_angle_num[MAX_PWM_SERVO] = {94, 204, 149, 149};

// 角度转化为脉冲数, angle= [0, 180]
// The Angle is converted to the number of pulses, angle= [0, 180]
static uint16_t PwmServo_Angle_To_Pulse(uint8_t angle)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	71fb      	strb	r3, [r7, #7]
	uint16_t pulse = (angle * 11 + 500) / 10;
 8002a5e:	79fa      	ldrb	r2, [r7, #7]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002a6e:	4a06      	ldr	r2, [pc, #24]	@ (8002a88 <PwmServo_Angle_To_Pulse+0x34>)
 8002a70:	fb82 1203 	smull	r1, r2, r2, r3
 8002a74:	1092      	asrs	r2, r2, #2
 8002a76:	17db      	asrs	r3, r3, #31
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	81fb      	strh	r3, [r7, #14]
	return pulse;
 8002a7c:	89fb      	ldrh	r3, [r7, #14]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	66666667 	.word	0x66666667

08002a8c <PwmServo_Handle>:
extern int state;
// PWM舵机控制，在定时器中调用，模拟输出PWM信号
// PWM steering gear control, in the timer call, analog output PWM signal
void PwmServo_Handle(void)
{if(state>0){
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	4b2b      	ldr	r3, [pc, #172]	@ (8002b40 <PwmServo_Handle+0xb4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	dd51      	ble.n	8002b3c <PwmServo_Handle+0xb0>
	g_pwm_pulse++;
 8002a98:	4b2a      	ldr	r3, [pc, #168]	@ (8002b44 <PwmServo_Handle+0xb8>)
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	4b28      	ldr	r3, [pc, #160]	@ (8002b44 <PwmServo_Handle+0xb8>)
 8002aa2:	801a      	strh	r2, [r3, #0]

#ifdef USE_SERVO_J1
	if (g_pwm_pulse <= g_angle_num[0])
 8002aa4:	4b28      	ldr	r3, [pc, #160]	@ (8002b48 <PwmServo_Handle+0xbc>)
 8002aa6:	881a      	ldrh	r2, [r3, #0]
 8002aa8:	4b26      	ldr	r3, [pc, #152]	@ (8002b44 <PwmServo_Handle+0xb8>)
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d305      	bcc.n	8002abc <PwmServo_Handle+0x30>
		SERVO_1_HIGH();
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	2108      	movs	r1, #8
 8002ab4:	4825      	ldr	r0, [pc, #148]	@ (8002b4c <PwmServo_Handle+0xc0>)
 8002ab6:	f001 ffa4 	bl	8004a02 <HAL_GPIO_WritePin>
 8002aba:	e004      	b.n	8002ac6 <PwmServo_Handle+0x3a>
	else
		SERVO_1_LOW();
 8002abc:	2200      	movs	r2, #0
 8002abe:	2108      	movs	r1, #8
 8002ac0:	4822      	ldr	r0, [pc, #136]	@ (8002b4c <PwmServo_Handle+0xc0>)
 8002ac2:	f001 ff9e 	bl	8004a02 <HAL_GPIO_WritePin>
#endif

#ifdef USE_SERVO_J2
	if (g_pwm_pulse <= g_angle_num[1])
 8002ac6:	4b20      	ldr	r3, [pc, #128]	@ (8002b48 <PwmServo_Handle+0xbc>)
 8002ac8:	885a      	ldrh	r2, [r3, #2]
 8002aca:	4b1e      	ldr	r3, [pc, #120]	@ (8002b44 <PwmServo_Handle+0xb8>)
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d305      	bcc.n	8002ade <PwmServo_Handle+0x52>
		SERVO_2_HIGH();
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	2104      	movs	r1, #4
 8002ad6:	481d      	ldr	r0, [pc, #116]	@ (8002b4c <PwmServo_Handle+0xc0>)
 8002ad8:	f001 ff93 	bl	8004a02 <HAL_GPIO_WritePin>
 8002adc:	e004      	b.n	8002ae8 <PwmServo_Handle+0x5c>
	else
		SERVO_2_LOW();
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2104      	movs	r1, #4
 8002ae2:	481a      	ldr	r0, [pc, #104]	@ (8002b4c <PwmServo_Handle+0xc0>)
 8002ae4:	f001 ff8d 	bl	8004a02 <HAL_GPIO_WritePin>
#endif

#ifdef USE_SERVO_J3
	if (g_pwm_pulse <= g_angle_num[2])
 8002ae8:	4b17      	ldr	r3, [pc, #92]	@ (8002b48 <PwmServo_Handle+0xbc>)
 8002aea:	889a      	ldrh	r2, [r3, #4]
 8002aec:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <PwmServo_Handle+0xb8>)
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d305      	bcc.n	8002b00 <PwmServo_Handle+0x74>
		SERVO_3_HIGH();
 8002af4:	2201      	movs	r2, #1
 8002af6:	2102      	movs	r1, #2
 8002af8:	4814      	ldr	r0, [pc, #80]	@ (8002b4c <PwmServo_Handle+0xc0>)
 8002afa:	f001 ff82 	bl	8004a02 <HAL_GPIO_WritePin>
 8002afe:	e004      	b.n	8002b0a <PwmServo_Handle+0x7e>
	else
		SERVO_3_LOW();
 8002b00:	2200      	movs	r2, #0
 8002b02:	2102      	movs	r1, #2
 8002b04:	4811      	ldr	r0, [pc, #68]	@ (8002b4c <PwmServo_Handle+0xc0>)
 8002b06:	f001 ff7c 	bl	8004a02 <HAL_GPIO_WritePin>
#endif

#ifdef USE_SERVO_J4
	if (g_pwm_pulse <= g_angle_num[3])
 8002b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b48 <PwmServo_Handle+0xbc>)
 8002b0c:	88da      	ldrh	r2, [r3, #6]
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b44 <PwmServo_Handle+0xb8>)
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d305      	bcc.n	8002b22 <PwmServo_Handle+0x96>
		SERVO_4_HIGH();
 8002b16:	2201      	movs	r2, #1
 8002b18:	2101      	movs	r1, #1
 8002b1a:	480c      	ldr	r0, [pc, #48]	@ (8002b4c <PwmServo_Handle+0xc0>)
 8002b1c:	f001 ff71 	bl	8004a02 <HAL_GPIO_WritePin>
 8002b20:	e004      	b.n	8002b2c <PwmServo_Handle+0xa0>
	else
		SERVO_4_LOW();
 8002b22:	2200      	movs	r2, #0
 8002b24:	2101      	movs	r1, #1
 8002b26:	4809      	ldr	r0, [pc, #36]	@ (8002b4c <PwmServo_Handle+0xc0>)
 8002b28:	f001 ff6b 	bl	8004a02 <HAL_GPIO_WritePin>
#endif

	if (g_pwm_pulse >= 2000)
 8002b2c:	4b05      	ldr	r3, [pc, #20]	@ (8002b44 <PwmServo_Handle+0xb8>)
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002b34:	d302      	bcc.n	8002b3c <PwmServo_Handle+0xb0>
		g_pwm_pulse = 0;
 8002b36:	4b03      	ldr	r3, [pc, #12]	@ (8002b44 <PwmServo_Handle+0xb8>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	801a      	strh	r2, [r3, #0]
}
}
 8002b3c:	bf00      	nop
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	2000024c 	.word	0x2000024c
 8002b44:	200002fc 	.word	0x200002fc
 8002b48:	20000044 	.word	0x20000044
 8002b4c:	40011000 	.word	0x40011000

08002b50 <PwmServo_Init>:
// Initialize the steering gear  舵机初始化
void PwmServo_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
//	for (int i = 0; i < MAX_PWM_SERVO; i++)
//	{
//		g_pwm_angle[i] = 90;
//		g_angle_num[i] = PwmServo_Angle_To_Pulse(g_pwm_angle[i]);
//	}
	g_pwm_angle[0] = 40;
 8002b54:	4b0c      	ldr	r3, [pc, #48]	@ (8002b88 <PwmServo_Init+0x38>)
 8002b56:	2228      	movs	r2, #40	@ 0x28
 8002b58:	701a      	strb	r2, [r3, #0]
	g_angle_num[0] = PwmServo_Angle_To_Pulse(g_pwm_angle[0]);
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b88 <PwmServo_Init+0x38>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff ff78 	bl	8002a54 <PwmServo_Angle_To_Pulse>
 8002b64:	4603      	mov	r3, r0
 8002b66:	461a      	mov	r2, r3
 8002b68:	4b08      	ldr	r3, [pc, #32]	@ (8002b8c <PwmServo_Init+0x3c>)
 8002b6a:	801a      	strh	r2, [r3, #0]
	g_pwm_angle[1] = 140;
 8002b6c:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <PwmServo_Init+0x38>)
 8002b6e:	228c      	movs	r2, #140	@ 0x8c
 8002b70:	705a      	strb	r2, [r3, #1]
	g_angle_num[1] = PwmServo_Angle_To_Pulse(g_pwm_angle[1]);
 8002b72:	4b05      	ldr	r3, [pc, #20]	@ (8002b88 <PwmServo_Init+0x38>)
 8002b74:	785b      	ldrb	r3, [r3, #1]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff ff6c 	bl	8002a54 <PwmServo_Angle_To_Pulse>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4b02      	ldr	r3, [pc, #8]	@ (8002b8c <PwmServo_Init+0x3c>)
 8002b82:	805a      	strh	r2, [r3, #2]
}
 8002b84:	bf00      	nop
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20000040 	.word	0x20000040
 8002b8c:	20000044 	.word	0x20000044

08002b90 <PwmServo_Set_Angle_All>:
}

// 设置全部pwm舵机的角度
// Set the Angle of all PWM steering gear
void PwmServo_Set_Angle_All(uint8_t angle_s1, uint8_t angle_s2, uint8_t angle_s3, uint8_t angle_s4)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4604      	mov	r4, r0
 8002b98:	4608      	mov	r0, r1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4623      	mov	r3, r4
 8002ba0:	71fb      	strb	r3, [r7, #7]
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	71bb      	strb	r3, [r7, #6]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	717b      	strb	r3, [r7, #5]
 8002baa:	4613      	mov	r3, r2
 8002bac:	713b      	strb	r3, [r7, #4]
	if (angle_s1 <= 180)
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	2bb4      	cmp	r3, #180	@ 0xb4
 8002bb2:	d80a      	bhi.n	8002bca <PwmServo_Set_Angle_All+0x3a>
	{
		g_pwm_angle[0] = angle_s1;
 8002bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8002c28 <PwmServo_Set_Angle_All+0x98>)
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	7013      	strb	r3, [r2, #0]
		g_angle_num[0] = PwmServo_Angle_To_Pulse(angle_s1);
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff ff49 	bl	8002a54 <PwmServo_Angle_To_Pulse>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b19      	ldr	r3, [pc, #100]	@ (8002c2c <PwmServo_Set_Angle_All+0x9c>)
 8002bc8:	801a      	strh	r2, [r3, #0]
	}

	if (angle_s2 <= 180)
 8002bca:	79bb      	ldrb	r3, [r7, #6]
 8002bcc:	2bb4      	cmp	r3, #180	@ 0xb4
 8002bce:	d80a      	bhi.n	8002be6 <PwmServo_Set_Angle_All+0x56>
	{
		g_pwm_angle[1] = angle_s2;
 8002bd0:	4a15      	ldr	r2, [pc, #84]	@ (8002c28 <PwmServo_Set_Angle_All+0x98>)
 8002bd2:	79bb      	ldrb	r3, [r7, #6]
 8002bd4:	7053      	strb	r3, [r2, #1]
		g_angle_num[1] = PwmServo_Angle_To_Pulse(angle_s2);
 8002bd6:	79bb      	ldrb	r3, [r7, #6]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff ff3b 	bl	8002a54 <PwmServo_Angle_To_Pulse>
 8002bde:	4603      	mov	r3, r0
 8002be0:	461a      	mov	r2, r3
 8002be2:	4b12      	ldr	r3, [pc, #72]	@ (8002c2c <PwmServo_Set_Angle_All+0x9c>)
 8002be4:	805a      	strh	r2, [r3, #2]
	}

	if (angle_s3 <= 180)
 8002be6:	797b      	ldrb	r3, [r7, #5]
 8002be8:	2bb4      	cmp	r3, #180	@ 0xb4
 8002bea:	d80a      	bhi.n	8002c02 <PwmServo_Set_Angle_All+0x72>
	{
		g_pwm_angle[2] = angle_s3;
 8002bec:	4a0e      	ldr	r2, [pc, #56]	@ (8002c28 <PwmServo_Set_Angle_All+0x98>)
 8002bee:	797b      	ldrb	r3, [r7, #5]
 8002bf0:	7093      	strb	r3, [r2, #2]
		g_angle_num[2] = PwmServo_Angle_To_Pulse(angle_s3);
 8002bf2:	797b      	ldrb	r3, [r7, #5]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff2d 	bl	8002a54 <PwmServo_Angle_To_Pulse>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8002c2c <PwmServo_Set_Angle_All+0x9c>)
 8002c00:	809a      	strh	r2, [r3, #4]
	}

	if (angle_s4 <= 180)
 8002c02:	793b      	ldrb	r3, [r7, #4]
 8002c04:	2bb4      	cmp	r3, #180	@ 0xb4
 8002c06:	d80a      	bhi.n	8002c1e <PwmServo_Set_Angle_All+0x8e>
	{
		g_pwm_angle[3] = angle_s4;
 8002c08:	4a07      	ldr	r2, [pc, #28]	@ (8002c28 <PwmServo_Set_Angle_All+0x98>)
 8002c0a:	793b      	ldrb	r3, [r7, #4]
 8002c0c:	70d3      	strb	r3, [r2, #3]
		g_angle_num[3] = PwmServo_Angle_To_Pulse(angle_s4);
 8002c0e:	793b      	ldrb	r3, [r7, #4]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ff1f 	bl	8002a54 <PwmServo_Angle_To_Pulse>
 8002c16:	4603      	mov	r3, r0
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4b04      	ldr	r3, [pc, #16]	@ (8002c2c <PwmServo_Set_Angle_All+0x9c>)
 8002c1c:	80da      	strh	r2, [r3, #6]
	}
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd90      	pop	{r4, r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000040 	.word	0x20000040
 8002c2c:	20000044 	.word	0x20000044

08002c30 <HAL_TIM_PeriodElapsedCallback>:

int cnt = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim7.Instance)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c70 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d110      	bne.n	8002c66 <HAL_TIM_PeriodElapsedCallback+0x36>
	{


			PwmServo_Handle();
 8002c44:	f7ff ff22 	bl	8002a8c <PwmServo_Handle>
			cnt++;
 8002c48:	4b0a      	ldr	r3, [pc, #40]	@ (8002c74 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	4a09      	ldr	r2, [pc, #36]	@ (8002c74 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002c50:	6013      	str	r3, [r2, #0]
			if(cnt == 1000)
 8002c52:	4b08      	ldr	r3, [pc, #32]	@ (8002c74 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c5a:	d104      	bne.n	8002c66 <HAL_TIM_PeriodElapsedCallback+0x36>
			{
				ICM20948_Read_Data_Handle();
 8002c5c:	f7ff fb38 	bl	80022d0 <ICM20948_Read_Data_Handle>
				cnt = 0;
 8002c60:	4b04      	ldr	r3, [pc, #16]	@ (8002c74 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
			}

	}
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000490 	.word	0x20000490
 8002c74:	20000300 	.word	0x20000300

08002c78 <USART1_Init>:

uint8_t RxTemp = 0;

// Initialize USART1  初始化串口1
void USART1_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	4903      	ldr	r1, [pc, #12]	@ (8002c8c <USART1_Init+0x14>)
 8002c80:	4803      	ldr	r0, [pc, #12]	@ (8002c90 <USART1_Init+0x18>)
 8002c82:	f004 fbdd 	bl	8007440 <HAL_UART_Receive_IT>
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000304 	.word	0x20000304
 8002c90:	20000520 	.word	0x20000520

08002c94 <USART1_Send_U8>:

// The serial port sends one byte  串口发送一个字节
void USART1_Send_U8(uint8_t ch)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002c9e:	1df9      	adds	r1, r7, #7
 8002ca0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	4803      	ldr	r0, [pc, #12]	@ (8002cb4 <USART1_Send_U8+0x20>)
 8002ca8:	f004 fb47 	bl	800733a <HAL_UART_Transmit>
}
 8002cac:	bf00      	nop
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000520 	.word	0x20000520

08002cb8 <HAL_UART_RxCpltCallback>:
    #endif
}
uint8_t RxComplete;
// The serial port receiving is interrupted. Procedure  串口接收完成中断
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_UART_RxCpltCallback can be implemented in the user file
     */
    // 测试发送数据，实际应用中不应该在中断中发送数据
    // Test sending data. In practice, data should not be sent during interrupts  
    USART1_Send_U8(RxTemp);
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002cec <HAL_UART_RxCpltCallback+0x34>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ffe5 	bl	8002c94 <USART1_Send_U8>

    // Continue receiving data  继续接收数据
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 8002cca:	2201      	movs	r2, #1
 8002ccc:	4907      	ldr	r1, [pc, #28]	@ (8002cec <HAL_UART_RxCpltCallback+0x34>)
 8002cce:	4808      	ldr	r0, [pc, #32]	@ (8002cf0 <HAL_UART_RxCpltCallback+0x38>)
 8002cd0:	f004 fbb6 	bl	8007440 <HAL_UART_Receive_IT>

    if (huart->Instance == USART1) {
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a06      	ldr	r2, [pc, #24]	@ (8002cf4 <HAL_UART_RxCpltCallback+0x3c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d102      	bne.n	8002ce4 <HAL_UART_RxCpltCallback+0x2c>
        RxComplete = 1;  // 신호 수신 시 플래그 설정
 8002cde:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <HAL_UART_RxCpltCallback+0x40>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
    }
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20000304 	.word	0x20000304
 8002cf0:	20000520 	.word	0x20000520
 8002cf4:	40013800 	.word	0x40013800
 8002cf8:	20000305 	.word	0x20000305

08002cfc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002d04:	1d39      	adds	r1, r7, #4
 8002d06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	4803      	ldr	r0, [pc, #12]	@ (8002d1c <__io_putchar+0x20>)
 8002d0e:	f004 fb14 	bl	800733a <HAL_UART_Transmit>
    return ch;
 8002d12:	687b      	ldr	r3, [r7, #4]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20000520 	.word	0x20000520

08002d20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d26:	4b0c      	ldr	r3, [pc, #48]	@ (8002d58 <MX_DMA_Init+0x38>)
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	4a0b      	ldr	r2, [pc, #44]	@ (8002d58 <MX_DMA_Init+0x38>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	6153      	str	r3, [r2, #20]
 8002d32:	4b09      	ldr	r3, [pc, #36]	@ (8002d58 <MX_DMA_Init+0x38>)
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	607b      	str	r3, [r7, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2100      	movs	r1, #0
 8002d42:	200e      	movs	r0, #14
 8002d44:	f001 f885 	bl	8003e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002d48:	200e      	movs	r0, #14
 8002d4a:	f001 f89e 	bl	8003e8a <HAL_NVIC_EnableIRQ>

}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000

08002d5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d62:	f107 0310 	add.w	r3, r7, #16
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]
 8002d6c:	609a      	str	r2, [r3, #8]
 8002d6e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d70:	4b3b      	ldr	r3, [pc, #236]	@ (8002e60 <MX_GPIO_Init+0x104>)
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	4a3a      	ldr	r2, [pc, #232]	@ (8002e60 <MX_GPIO_Init+0x104>)
 8002d76:	f043 0310 	orr.w	r3, r3, #16
 8002d7a:	6193      	str	r3, [r2, #24]
 8002d7c:	4b38      	ldr	r3, [pc, #224]	@ (8002e60 <MX_GPIO_Init+0x104>)
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d88:	4b35      	ldr	r3, [pc, #212]	@ (8002e60 <MX_GPIO_Init+0x104>)
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	4a34      	ldr	r2, [pc, #208]	@ (8002e60 <MX_GPIO_Init+0x104>)
 8002d8e:	f043 0320 	orr.w	r3, r3, #32
 8002d92:	6193      	str	r3, [r2, #24]
 8002d94:	4b32      	ldr	r3, [pc, #200]	@ (8002e60 <MX_GPIO_Init+0x104>)
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002da0:	4b2f      	ldr	r3, [pc, #188]	@ (8002e60 <MX_GPIO_Init+0x104>)
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	4a2e      	ldr	r2, [pc, #184]	@ (8002e60 <MX_GPIO_Init+0x104>)
 8002da6:	f043 0308 	orr.w	r3, r3, #8
 8002daa:	6193      	str	r3, [r2, #24]
 8002dac:	4b2c      	ldr	r3, [pc, #176]	@ (8002e60 <MX_GPIO_Init+0x104>)
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	607b      	str	r3, [r7, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db8:	4b29      	ldr	r3, [pc, #164]	@ (8002e60 <MX_GPIO_Init+0x104>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	4a28      	ldr	r2, [pc, #160]	@ (8002e60 <MX_GPIO_Init+0x104>)
 8002dbe:	f043 0304 	orr.w	r3, r3, #4
 8002dc2:	6193      	str	r3, [r2, #24]
 8002dc4:	4b26      	ldr	r3, [pc, #152]	@ (8002e60 <MX_GPIO_Init+0x104>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	603b      	str	r3, [r7, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|S4_Pin|S3_Pin|S2_Pin
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f242 012f 	movw	r1, #8239	@ 0x202f
 8002dd6:	4823      	ldr	r0, [pc, #140]	@ (8002e64 <MX_GPIO_Init+0x108>)
 8002dd8:	f001 fe13 	bl	8004a02 <HAL_GPIO_WritePin>
                          |S1_Pin|BEEP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_RESET);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002de2:	4821      	ldr	r0, [pc, #132]	@ (8002e68 <MX_GPIO_Init+0x10c>)
 8002de4:	f001 fe0d 	bl	8004a02 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|BEEP_Pin;
 8002de8:	f242 0320 	movw	r3, #8224	@ 0x2020
 8002dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dee:	2301      	movs	r3, #1
 8002df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df6:	2302      	movs	r3, #2
 8002df8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dfa:	f107 0310 	add.w	r3, r7, #16
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4818      	ldr	r0, [pc, #96]	@ (8002e64 <MX_GPIO_Init+0x108>)
 8002e02:	f001 fc53 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S4_Pin|S3_Pin|S2_Pin|S1_Pin;
 8002e06:	230f      	movs	r3, #15
 8002e08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e12:	2303      	movs	r3, #3
 8002e14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e16:	f107 0310 	add.w	r3, r7, #16
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4811      	ldr	r0, [pc, #68]	@ (8002e64 <MX_GPIO_Init+0x108>)
 8002e1e:	f001 fc45 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ICM20948_CS_Pin;
 8002e22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e30:	2302      	movs	r3, #2
 8002e32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ICM20948_CS_GPIO_Port, &GPIO_InitStruct);
 8002e34:	f107 0310 	add.w	r3, r7, #16
 8002e38:	4619      	mov	r1, r3
 8002e3a:	480b      	ldr	r0, [pc, #44]	@ (8002e68 <MX_GPIO_Init+0x10c>)
 8002e3c:	f001 fc36 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8002e40:	2304      	movs	r3, #4
 8002e42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8002e4c:	f107 0310 	add.w	r3, r7, #16
 8002e50:	4619      	mov	r1, r3
 8002e52:	4806      	ldr	r0, [pc, #24]	@ (8002e6c <MX_GPIO_Init+0x110>)
 8002e54:	f001 fc2a 	bl	80046ac <HAL_GPIO_Init>

}
 8002e58:	bf00      	nop
 8002e5a:	3720      	adds	r7, #32
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40011000 	.word	0x40011000
 8002e68:	40010c00 	.word	0x40010c00
 8002e6c:	40011400 	.word	0x40011400

08002e70 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002e74:	4b12      	ldr	r3, [pc, #72]	@ (8002ec0 <MX_I2C2_Init+0x50>)
 8002e76:	4a13      	ldr	r2, [pc, #76]	@ (8002ec4 <MX_I2C2_Init+0x54>)
 8002e78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002e7a:	4b11      	ldr	r3, [pc, #68]	@ (8002ec0 <MX_I2C2_Init+0x50>)
 8002e7c:	4a12      	ldr	r2, [pc, #72]	@ (8002ec8 <MX_I2C2_Init+0x58>)
 8002e7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e80:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec0 <MX_I2C2_Init+0x50>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002e86:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec0 <MX_I2C2_Init+0x50>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec0 <MX_I2C2_Init+0x50>)
 8002e8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e92:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e94:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec0 <MX_I2C2_Init+0x50>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002e9a:	4b09      	ldr	r3, [pc, #36]	@ (8002ec0 <MX_I2C2_Init+0x50>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ea0:	4b07      	ldr	r3, [pc, #28]	@ (8002ec0 <MX_I2C2_Init+0x50>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ea6:	4b06      	ldr	r3, [pc, #24]	@ (8002ec0 <MX_I2C2_Init+0x50>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002eac:	4804      	ldr	r0, [pc, #16]	@ (8002ec0 <MX_I2C2_Init+0x50>)
 8002eae:	f001 fdc1 	bl	8004a34 <HAL_I2C_Init>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002eb8:	f000 f8ac 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002ebc:	bf00      	nop
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	20000308 	.word	0x20000308
 8002ec4:	40005800 	.word	0x40005800
 8002ec8:	000186a0 	.word	0x000186a0

08002ecc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	f107 0310 	add.w	r3, r7, #16
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a16      	ldr	r2, [pc, #88]	@ (8002f40 <HAL_I2C_MspInit+0x74>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d124      	bne.n	8002f36 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eec:	4b15      	ldr	r3, [pc, #84]	@ (8002f44 <HAL_I2C_MspInit+0x78>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	4a14      	ldr	r2, [pc, #80]	@ (8002f44 <HAL_I2C_MspInit+0x78>)
 8002ef2:	f043 0308 	orr.w	r3, r3, #8
 8002ef6:	6193      	str	r3, [r2, #24]
 8002ef8:	4b12      	ldr	r3, [pc, #72]	@ (8002f44 <HAL_I2C_MspInit+0x78>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f04:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002f08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f0a:	2312      	movs	r3, #18
 8002f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f12:	f107 0310 	add.w	r3, r7, #16
 8002f16:	4619      	mov	r1, r3
 8002f18:	480b      	ldr	r0, [pc, #44]	@ (8002f48 <HAL_I2C_MspInit+0x7c>)
 8002f1a:	f001 fbc7 	bl	80046ac <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f1e:	4b09      	ldr	r3, [pc, #36]	@ (8002f44 <HAL_I2C_MspInit+0x78>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	4a08      	ldr	r2, [pc, #32]	@ (8002f44 <HAL_I2C_MspInit+0x78>)
 8002f24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f28:	61d3      	str	r3, [r2, #28]
 8002f2a:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <HAL_I2C_MspInit+0x78>)
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002f36:	bf00      	nop
 8002f38:	3720      	adds	r7, #32
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40005800 	.word	0x40005800
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40010c00 	.word	0x40010c00

08002f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f50:	f000 fe22 	bl	8003b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f54:	f000 f819 	bl	8002f8a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f58:	f7ff ff00 	bl	8002d5c <MX_GPIO_Init>
  MX_DMA_Init();
 8002f5c:	f7ff fee0 	bl	8002d20 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002f60:	f000 fd4c 	bl	80039fc <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8002f64:	f000 f85c 	bl	8003020 <MX_SPI2_Init>
  MX_TIM7_Init();
 8002f68:	f000 fb0a 	bl	8003580 <MX_TIM7_Init>
  MX_TIM8_Init();
 8002f6c:	f000 fb40 	bl	80035f0 <MX_TIM8_Init>
  MX_TIM6_Init();
 8002f70:	f000 face 	bl	8003510 <MX_TIM6_Init>
  MX_TIM2_Init();
 8002f74:	f000 fa24 	bl	80033c0 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002f78:	f000 fa76 	bl	8003468 <MX_TIM4_Init>
  MX_I2C2_Init();
 8002f7c:	f7ff ff78 	bl	8002e70 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  Bsp_Init();
 8002f80:	f7fe f96e 	bl	8001260 <Bsp_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	Bsp_Loop();
 8002f84:	f7fe f97e 	bl	8001284 <Bsp_Loop>
 8002f88:	e7fc      	b.n	8002f84 <main+0x38>

08002f8a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b090      	sub	sp, #64	@ 0x40
 8002f8e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f90:	f107 0318 	add.w	r3, r7, #24
 8002f94:	2228      	movs	r2, #40	@ 0x28
 8002f96:	2100      	movs	r1, #0
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f005 fd58 	bl	8008a4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f9e:	1d3b      	adds	r3, r7, #4
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	60da      	str	r2, [r3, #12]
 8002faa:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fac:	2301      	movs	r3, #1
 8002fae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fb0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fb4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fc2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002fc8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fce:	f107 0318 	add.w	r3, r7, #24
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f001 fe72 	bl	8004cbc <HAL_RCC_OscConfig>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002fde:	f000 f819 	bl	8003014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fe2:	230f      	movs	r3, #15
 8002fe4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002fee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ff2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ff8:	1d3b      	adds	r3, r7, #4
 8002ffa:	2102      	movs	r1, #2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f002 f8df 	bl	80051c0 <HAL_RCC_ClockConfig>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003008:	f000 f804 	bl	8003014 <Error_Handler>
  }
}
 800300c:	bf00      	nop
 800300e:	3740      	adds	r7, #64	@ 0x40
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003018:	b672      	cpsid	i
}
 800301a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800301c:	bf00      	nop
 800301e:	e7fd      	b.n	800301c <Error_Handler+0x8>

08003020 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003024:	4b17      	ldr	r3, [pc, #92]	@ (8003084 <MX_SPI2_Init+0x64>)
 8003026:	4a18      	ldr	r2, [pc, #96]	@ (8003088 <MX_SPI2_Init+0x68>)
 8003028:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800302a:	4b16      	ldr	r3, [pc, #88]	@ (8003084 <MX_SPI2_Init+0x64>)
 800302c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003030:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003032:	4b14      	ldr	r3, [pc, #80]	@ (8003084 <MX_SPI2_Init+0x64>)
 8003034:	2200      	movs	r2, #0
 8003036:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003038:	4b12      	ldr	r3, [pc, #72]	@ (8003084 <MX_SPI2_Init+0x64>)
 800303a:	2200      	movs	r2, #0
 800303c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800303e:	4b11      	ldr	r3, [pc, #68]	@ (8003084 <MX_SPI2_Init+0x64>)
 8003040:	2200      	movs	r2, #0
 8003042:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003044:	4b0f      	ldr	r3, [pc, #60]	@ (8003084 <MX_SPI2_Init+0x64>)
 8003046:	2200      	movs	r2, #0
 8003048:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800304a:	4b0e      	ldr	r3, [pc, #56]	@ (8003084 <MX_SPI2_Init+0x64>)
 800304c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003050:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003052:	4b0c      	ldr	r3, [pc, #48]	@ (8003084 <MX_SPI2_Init+0x64>)
 8003054:	2200      	movs	r2, #0
 8003056:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003058:	4b0a      	ldr	r3, [pc, #40]	@ (8003084 <MX_SPI2_Init+0x64>)
 800305a:	2200      	movs	r2, #0
 800305c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800305e:	4b09      	ldr	r3, [pc, #36]	@ (8003084 <MX_SPI2_Init+0x64>)
 8003060:	2200      	movs	r2, #0
 8003062:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003064:	4b07      	ldr	r3, [pc, #28]	@ (8003084 <MX_SPI2_Init+0x64>)
 8003066:	2200      	movs	r2, #0
 8003068:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800306a:	4b06      	ldr	r3, [pc, #24]	@ (8003084 <MX_SPI2_Init+0x64>)
 800306c:	220a      	movs	r2, #10
 800306e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003070:	4804      	ldr	r0, [pc, #16]	@ (8003084 <MX_SPI2_Init+0x64>)
 8003072:	f002 fa33 	bl	80054dc <HAL_SPI_Init>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800307c:	f7ff ffca 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003080:	bf00      	nop
 8003082:	bd80      	pop	{r7, pc}
 8003084:	2000035c 	.word	0x2000035c
 8003088:	40003800 	.word	0x40003800

0800308c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003094:	f107 0310 	add.w	r3, r7, #16
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003118 <HAL_SPI_MspInit+0x8c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d131      	bne.n	8003110 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80030ac:	4b1b      	ldr	r3, [pc, #108]	@ (800311c <HAL_SPI_MspInit+0x90>)
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	4a1a      	ldr	r2, [pc, #104]	@ (800311c <HAL_SPI_MspInit+0x90>)
 80030b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030b6:	61d3      	str	r3, [r2, #28]
 80030b8:	4b18      	ldr	r3, [pc, #96]	@ (800311c <HAL_SPI_MspInit+0x90>)
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c4:	4b15      	ldr	r3, [pc, #84]	@ (800311c <HAL_SPI_MspInit+0x90>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	4a14      	ldr	r2, [pc, #80]	@ (800311c <HAL_SPI_MspInit+0x90>)
 80030ca:	f043 0308 	orr.w	r3, r3, #8
 80030ce:	6193      	str	r3, [r2, #24]
 80030d0:	4b12      	ldr	r3, [pc, #72]	@ (800311c <HAL_SPI_MspInit+0x90>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80030dc:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80030e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e2:	2302      	movs	r3, #2
 80030e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030e6:	2303      	movs	r3, #3
 80030e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ea:	f107 0310 	add.w	r3, r7, #16
 80030ee:	4619      	mov	r1, r3
 80030f0:	480b      	ldr	r0, [pc, #44]	@ (8003120 <HAL_SPI_MspInit+0x94>)
 80030f2:	f001 fadb 	bl	80046ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80030f6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80030fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003104:	f107 0310 	add.w	r3, r7, #16
 8003108:	4619      	mov	r1, r3
 800310a:	4805      	ldr	r0, [pc, #20]	@ (8003120 <HAL_SPI_MspInit+0x94>)
 800310c:	f001 face 	bl	80046ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003110:	bf00      	nop
 8003112:	3720      	adds	r7, #32
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40003800 	.word	0x40003800
 800311c:	40021000 	.word	0x40021000
 8003120:	40010c00 	.word	0x40010c00

08003124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800312a:	4b15      	ldr	r3, [pc, #84]	@ (8003180 <HAL_MspInit+0x5c>)
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	4a14      	ldr	r2, [pc, #80]	@ (8003180 <HAL_MspInit+0x5c>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6193      	str	r3, [r2, #24]
 8003136:	4b12      	ldr	r3, [pc, #72]	@ (8003180 <HAL_MspInit+0x5c>)
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003142:	4b0f      	ldr	r3, [pc, #60]	@ (8003180 <HAL_MspInit+0x5c>)
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	4a0e      	ldr	r2, [pc, #56]	@ (8003180 <HAL_MspInit+0x5c>)
 8003148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800314c:	61d3      	str	r3, [r2, #28]
 800314e:	4b0c      	ldr	r3, [pc, #48]	@ (8003180 <HAL_MspInit+0x5c>)
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003156:	607b      	str	r3, [r7, #4]
 8003158:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800315a:	4b0a      	ldr	r3, [pc, #40]	@ (8003184 <HAL_MspInit+0x60>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	4a04      	ldr	r2, [pc, #16]	@ (8003184 <HAL_MspInit+0x60>)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003176:	bf00      	nop
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr
 8003180:	40021000 	.word	0x40021000
 8003184:	40010000 	.word	0x40010000

08003188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800318c:	bf00      	nop
 800318e:	e7fd      	b.n	800318c <NMI_Handler+0x4>

08003190 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003194:	bf00      	nop
 8003196:	e7fd      	b.n	8003194 <HardFault_Handler+0x4>

08003198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800319c:	bf00      	nop
 800319e:	e7fd      	b.n	800319c <MemManage_Handler+0x4>

080031a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031a4:	bf00      	nop
 80031a6:	e7fd      	b.n	80031a4 <BusFault_Handler+0x4>

080031a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031ac:	bf00      	nop
 80031ae:	e7fd      	b.n	80031ac <UsageFault_Handler+0x4>

080031b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr

080031c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031d8:	f000 fd24 	bl	8003c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}

080031e0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80031e4:	4802      	ldr	r0, [pc, #8]	@ (80031f0 <DMA1_Channel4_IRQHandler+0x10>)
 80031e6:	f001 f825 	bl	8004234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000568 	.word	0x20000568

080031f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031f8:	4802      	ldr	r0, [pc, #8]	@ (8003204 <USART1_IRQHandler+0x10>)
 80031fa:	f004 f947 	bl	800748c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031fe:	bf00      	nop
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000520 	.word	0x20000520

08003208 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800320c:	4802      	ldr	r0, [pc, #8]	@ (8003218 <TIM6_IRQHandler+0x10>)
 800320e:	f003 f9df 	bl	80065d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20000448 	.word	0x20000448

0800321c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003220:	4802      	ldr	r0, [pc, #8]	@ (800322c <TIM7_IRQHandler+0x10>)
 8003222:	f003 f9d5 	bl	80065d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003226:	bf00      	nop
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000490 	.word	0x20000490

08003230 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
	return 1;
 8003234:	2301      	movs	r3, #1
}
 8003236:	4618      	mov	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <_kill>:

int _kill(int pid, int sig)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003248:	f005 fc54 	bl	8008af4 <__errno>
 800324c:	4603      	mov	r3, r0
 800324e:	2216      	movs	r2, #22
 8003250:	601a      	str	r2, [r3, #0]
	return -1;
 8003252:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <_exit>:

void _exit (int status)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003266:	f04f 31ff 	mov.w	r1, #4294967295
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff ffe7 	bl	800323e <_kill>
	while (1) {}		/* Make sure we hang here */
 8003270:	bf00      	nop
 8003272:	e7fd      	b.n	8003270 <_exit+0x12>

08003274 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	e00a      	b.n	800329c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003286:	f3af 8000 	nop.w
 800328a:	4601      	mov	r1, r0
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	60ba      	str	r2, [r7, #8]
 8003292:	b2ca      	uxtb	r2, r1
 8003294:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	3301      	adds	r3, #1
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	dbf0      	blt.n	8003286 <_read+0x12>
	}

return len;
 80032a4:	687b      	ldr	r3, [r7, #4]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b086      	sub	sp, #24
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	e009      	b.n	80032d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	60ba      	str	r2, [r7, #8]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff fd17 	bl	8002cfc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	3301      	adds	r3, #1
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	429a      	cmp	r2, r3
 80032da:	dbf1      	blt.n	80032c0 <_write+0x12>
	}
	return len;
 80032dc:	687b      	ldr	r3, [r7, #4]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <_close>:

int _close(int file)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
	return -1;
 80032ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800330c:	605a      	str	r2, [r3, #4]
	return 0;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr

0800331a <_isatty>:

int _isatty(int file)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
	return 1;
 8003322:	2301      	movs	r3, #1
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800332e:	b480      	push	{r7}
 8003330:	b085      	sub	sp, #20
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	607a      	str	r2, [r7, #4]
	return 0;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr
	...

08003348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003350:	4a14      	ldr	r2, [pc, #80]	@ (80033a4 <_sbrk+0x5c>)
 8003352:	4b15      	ldr	r3, [pc, #84]	@ (80033a8 <_sbrk+0x60>)
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800335c:	4b13      	ldr	r3, [pc, #76]	@ (80033ac <_sbrk+0x64>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d102      	bne.n	800336a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003364:	4b11      	ldr	r3, [pc, #68]	@ (80033ac <_sbrk+0x64>)
 8003366:	4a12      	ldr	r2, [pc, #72]	@ (80033b0 <_sbrk+0x68>)
 8003368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800336a:	4b10      	ldr	r3, [pc, #64]	@ (80033ac <_sbrk+0x64>)
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4413      	add	r3, r2
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	429a      	cmp	r2, r3
 8003376:	d207      	bcs.n	8003388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003378:	f005 fbbc 	bl	8008af4 <__errno>
 800337c:	4603      	mov	r3, r0
 800337e:	220c      	movs	r2, #12
 8003380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003382:	f04f 33ff 	mov.w	r3, #4294967295
 8003386:	e009      	b.n	800339c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003388:	4b08      	ldr	r3, [pc, #32]	@ (80033ac <_sbrk+0x64>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800338e:	4b07      	ldr	r3, [pc, #28]	@ (80033ac <_sbrk+0x64>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4413      	add	r3, r2
 8003396:	4a05      	ldr	r2, [pc, #20]	@ (80033ac <_sbrk+0x64>)
 8003398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800339a:	68fb      	ldr	r3, [r7, #12]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	2000c000 	.word	0x2000c000
 80033a8:	00000400 	.word	0x00000400
 80033ac:	200003b4 	.word	0x200003b4
 80033b0:	20000700 	.word	0x20000700

080033b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033b8:	bf00      	nop
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr

080033c0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08c      	sub	sp, #48	@ 0x30
 80033c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80033c6:	f107 030c 	add.w	r3, r7, #12
 80033ca:	2224      	movs	r2, #36	@ 0x24
 80033cc:	2100      	movs	r1, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f005 fb3d 	bl	8008a4e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033d4:	1d3b      	adds	r3, r7, #4
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80033dc:	4b21      	ldr	r3, [pc, #132]	@ (8003464 <MX_TIM2_Init+0xa4>)
 80033de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80033e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80033e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003464 <MX_TIM2_Init+0xa4>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003464 <MX_TIM2_Init+0xa4>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80033f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003464 <MX_TIM2_Init+0xa4>)
 80033f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003464 <MX_TIM2_Init+0xa4>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033fe:	4b19      	ldr	r3, [pc, #100]	@ (8003464 <MX_TIM2_Init+0xa4>)
 8003400:	2200      	movs	r2, #0
 8003402:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003404:	2301      	movs	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003408:	2300      	movs	r3, #0
 800340a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800340c:	2301      	movs	r3, #1
 800340e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003410:	2300      	movs	r3, #0
 8003412:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003418:	2300      	movs	r3, #0
 800341a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800341c:	2301      	movs	r3, #1
 800341e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003420:	2300      	movs	r3, #0
 8003422:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003428:	f107 030c 	add.w	r3, r7, #12
 800342c:	4619      	mov	r1, r3
 800342e:	480d      	ldr	r0, [pc, #52]	@ (8003464 <MX_TIM2_Init+0xa4>)
 8003430:	f002 ff9e 	bl	8006370 <HAL_TIM_Encoder_Init>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800343a:	f7ff fdeb 	bl	8003014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800343e:	2300      	movs	r3, #0
 8003440:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003442:	2300      	movs	r3, #0
 8003444:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003446:	1d3b      	adds	r3, r7, #4
 8003448:	4619      	mov	r1, r3
 800344a:	4806      	ldr	r0, [pc, #24]	@ (8003464 <MX_TIM2_Init+0xa4>)
 800344c:	f003 fe56 	bl	80070fc <HAL_TIMEx_MasterConfigSynchronization>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003456:	f7ff fddd 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800345a:	bf00      	nop
 800345c:	3730      	adds	r7, #48	@ 0x30
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	200003b8 	.word	0x200003b8

08003468 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08c      	sub	sp, #48	@ 0x30
 800346c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800346e:	f107 030c 	add.w	r3, r7, #12
 8003472:	2224      	movs	r2, #36	@ 0x24
 8003474:	2100      	movs	r1, #0
 8003476:	4618      	mov	r0, r3
 8003478:	f005 fae9 	bl	8008a4e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800347c:	1d3b      	adds	r3, r7, #4
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003484:	4b20      	ldr	r3, [pc, #128]	@ (8003508 <MX_TIM4_Init+0xa0>)
 8003486:	4a21      	ldr	r2, [pc, #132]	@ (800350c <MX_TIM4_Init+0xa4>)
 8003488:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800348a:	4b1f      	ldr	r3, [pc, #124]	@ (8003508 <MX_TIM4_Init+0xa0>)
 800348c:	2200      	movs	r2, #0
 800348e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003490:	4b1d      	ldr	r3, [pc, #116]	@ (8003508 <MX_TIM4_Init+0xa0>)
 8003492:	2200      	movs	r2, #0
 8003494:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003496:	4b1c      	ldr	r3, [pc, #112]	@ (8003508 <MX_TIM4_Init+0xa0>)
 8003498:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800349c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800349e:	4b1a      	ldr	r3, [pc, #104]	@ (8003508 <MX_TIM4_Init+0xa0>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034a4:	4b18      	ldr	r3, [pc, #96]	@ (8003508 <MX_TIM4_Init+0xa0>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80034aa:	2301      	movs	r3, #1
 80034ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80034b2:	2301      	movs	r3, #1
 80034b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80034be:	2300      	movs	r3, #0
 80034c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80034c2:	2301      	movs	r3, #1
 80034c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80034c6:	2300      	movs	r3, #0
 80034c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80034ca:	2300      	movs	r3, #0
 80034cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80034ce:	f107 030c 	add.w	r3, r7, #12
 80034d2:	4619      	mov	r1, r3
 80034d4:	480c      	ldr	r0, [pc, #48]	@ (8003508 <MX_TIM4_Init+0xa0>)
 80034d6:	f002 ff4b 	bl	8006370 <HAL_TIM_Encoder_Init>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80034e0:	f7ff fd98 	bl	8003014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034e4:	2300      	movs	r3, #0
 80034e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80034ec:	1d3b      	adds	r3, r7, #4
 80034ee:	4619      	mov	r1, r3
 80034f0:	4805      	ldr	r0, [pc, #20]	@ (8003508 <MX_TIM4_Init+0xa0>)
 80034f2:	f003 fe03 	bl	80070fc <HAL_TIMEx_MasterConfigSynchronization>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80034fc:	f7ff fd8a 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003500:	bf00      	nop
 8003502:	3730      	adds	r7, #48	@ 0x30
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20000400 	.word	0x20000400
 800350c:	40000800 	.word	0x40000800

08003510 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003516:	463b      	mov	r3, r7
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800351e:	4b16      	ldr	r3, [pc, #88]	@ (8003578 <MX_TIM6_Init+0x68>)
 8003520:	4a16      	ldr	r2, [pc, #88]	@ (800357c <MX_TIM6_Init+0x6c>)
 8003522:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 8003524:	4b14      	ldr	r3, [pc, #80]	@ (8003578 <MX_TIM6_Init+0x68>)
 8003526:	2247      	movs	r2, #71	@ 0x47
 8003528:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800352a:	4b13      	ldr	r3, [pc, #76]	@ (8003578 <MX_TIM6_Init+0x68>)
 800352c:	2200      	movs	r2, #0
 800352e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8003530:	4b11      	ldr	r3, [pc, #68]	@ (8003578 <MX_TIM6_Init+0x68>)
 8003532:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003536:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003538:	4b0f      	ldr	r3, [pc, #60]	@ (8003578 <MX_TIM6_Init+0x68>)
 800353a:	2200      	movs	r2, #0
 800353c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800353e:	480e      	ldr	r0, [pc, #56]	@ (8003578 <MX_TIM6_Init+0x68>)
 8003540:	f002 fd54 	bl	8005fec <HAL_TIM_Base_Init>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800354a:	f7ff fd63 	bl	8003014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800354e:	2300      	movs	r3, #0
 8003550:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003552:	2300      	movs	r3, #0
 8003554:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003556:	463b      	mov	r3, r7
 8003558:	4619      	mov	r1, r3
 800355a:	4807      	ldr	r0, [pc, #28]	@ (8003578 <MX_TIM6_Init+0x68>)
 800355c:	f003 fdce 	bl	80070fc <HAL_TIMEx_MasterConfigSynchronization>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003566:	f7ff fd55 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800356a:	4803      	ldr	r0, [pc, #12]	@ (8003578 <MX_TIM6_Init+0x68>)
 800356c:	f002 fd8e 	bl	800608c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8003570:	bf00      	nop
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	20000448 	.word	0x20000448
 800357c:	40001000 	.word	0x40001000

08003580 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003586:	463b      	mov	r3, r7
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800358e:	4b16      	ldr	r3, [pc, #88]	@ (80035e8 <MX_TIM7_Init+0x68>)
 8003590:	4a16      	ldr	r2, [pc, #88]	@ (80035ec <MX_TIM7_Init+0x6c>)
 8003592:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8003594:	4b14      	ldr	r3, [pc, #80]	@ (80035e8 <MX_TIM7_Init+0x68>)
 8003596:	2247      	movs	r2, #71	@ 0x47
 8003598:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800359a:	4b13      	ldr	r3, [pc, #76]	@ (80035e8 <MX_TIM7_Init+0x68>)
 800359c:	2200      	movs	r2, #0
 800359e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80035a0:	4b11      	ldr	r3, [pc, #68]	@ (80035e8 <MX_TIM7_Init+0x68>)
 80035a2:	2209      	movs	r2, #9
 80035a4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80035a6:	4b10      	ldr	r3, [pc, #64]	@ (80035e8 <MX_TIM7_Init+0x68>)
 80035a8:	2280      	movs	r2, #128	@ 0x80
 80035aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80035ac:	480e      	ldr	r0, [pc, #56]	@ (80035e8 <MX_TIM7_Init+0x68>)
 80035ae:	f002 fd1d 	bl	8005fec <HAL_TIM_Base_Init>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80035b8:	f7ff fd2c 	bl	8003014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035bc:	2300      	movs	r3, #0
 80035be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035c0:	2300      	movs	r3, #0
 80035c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80035c4:	463b      	mov	r3, r7
 80035c6:	4619      	mov	r1, r3
 80035c8:	4807      	ldr	r0, [pc, #28]	@ (80035e8 <MX_TIM7_Init+0x68>)
 80035ca:	f003 fd97 	bl	80070fc <HAL_TIMEx_MasterConfigSynchronization>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80035d4:	f7ff fd1e 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 80035d8:	4803      	ldr	r0, [pc, #12]	@ (80035e8 <MX_TIM7_Init+0x68>)
 80035da:	f002 fd57 	bl	800608c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000490 	.word	0x20000490
 80035ec:	40001400 	.word	0x40001400

080035f0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b096      	sub	sp, #88	@ 0x58
 80035f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035f6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	605a      	str	r2, [r3, #4]
 8003600:	609a      	str	r2, [r3, #8]
 8003602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003604:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800360e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	605a      	str	r2, [r3, #4]
 8003618:	609a      	str	r2, [r3, #8]
 800361a:	60da      	str	r2, [r3, #12]
 800361c:	611a      	str	r2, [r3, #16]
 800361e:	615a      	str	r2, [r3, #20]
 8003620:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003622:	1d3b      	adds	r3, r7, #4
 8003624:	2220      	movs	r2, #32
 8003626:	2100      	movs	r1, #0
 8003628:	4618      	mov	r0, r3
 800362a:	f005 fa10 	bl	8008a4e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800362e:	4b60      	ldr	r3, [pc, #384]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 8003630:	4a60      	ldr	r2, [pc, #384]	@ (80037b4 <MX_TIM8_Init+0x1c4>)
 8003632:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 71;
 8003634:	4b5e      	ldr	r3, [pc, #376]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 8003636:	2247      	movs	r2, #71	@ 0x47
 8003638:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800363a:	4b5d      	ldr	r3, [pc, #372]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 800363c:	2200      	movs	r2, #0
 800363e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8003640:	4b5b      	ldr	r3, [pc, #364]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 8003642:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003646:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003648:	4b59      	ldr	r3, [pc, #356]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 800364a:	2200      	movs	r2, #0
 800364c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800364e:	4b58      	ldr	r3, [pc, #352]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 8003650:	2200      	movs	r2, #0
 8003652:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003654:	4b56      	ldr	r3, [pc, #344]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 8003656:	2280      	movs	r2, #128	@ 0x80
 8003658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800365a:	4855      	ldr	r0, [pc, #340]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 800365c:	f002 fcc6 	bl	8005fec <HAL_TIM_Base_Init>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8003666:	f7ff fcd5 	bl	8003014 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800366a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800366e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003670:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003674:	4619      	mov	r1, r3
 8003676:	484e      	ldr	r0, [pc, #312]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 8003678:	f003 f974 	bl	8006964 <HAL_TIM_ConfigClockSource>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8003682:	f7ff fcc7 	bl	8003014 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003686:	484a      	ldr	r0, [pc, #296]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 8003688:	f002 fd60 	bl	800614c <HAL_TIM_PWM_Init>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8003692:	f7ff fcbf 	bl	8003014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003696:	2300      	movs	r3, #0
 8003698:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800369a:	2300      	movs	r3, #0
 800369c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800369e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80036a2:	4619      	mov	r1, r3
 80036a4:	4842      	ldr	r0, [pc, #264]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 80036a6:	f003 fd29 	bl	80070fc <HAL_TIMEx_MasterConfigSynchronization>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80036b0:	f7ff fcb0 	bl	8003014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036b4:	2360      	movs	r3, #96	@ 0x60
 80036b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036bc:	2300      	movs	r3, #0
 80036be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80036c0:	2300      	movs	r3, #0
 80036c2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036c4:	2300      	movs	r3, #0
 80036c6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80036c8:	2300      	movs	r3, #0
 80036ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80036cc:	2300      	movs	r3, #0
 80036ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036d4:	2200      	movs	r2, #0
 80036d6:	4619      	mov	r1, r3
 80036d8:	4835      	ldr	r0, [pc, #212]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 80036da:	f003 f881 	bl	80067e0 <HAL_TIM_PWM_ConfigChannel>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80036e4:	f7ff fc96 	bl	8003014 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80036e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036ec:	2204      	movs	r2, #4
 80036ee:	4619      	mov	r1, r3
 80036f0:	482f      	ldr	r0, [pc, #188]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 80036f2:	f003 f875 	bl	80067e0 <HAL_TIM_PWM_ConfigChannel>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80036fc:	f7ff fc8a 	bl	8003014 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003700:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003704:	2208      	movs	r2, #8
 8003706:	4619      	mov	r1, r3
 8003708:	4829      	ldr	r0, [pc, #164]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 800370a:	f003 f869 	bl	80067e0 <HAL_TIM_PWM_ConfigChannel>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8003714:	f7ff fc7e 	bl	8003014 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800371c:	220c      	movs	r2, #12
 800371e:	4619      	mov	r1, r3
 8003720:	4823      	ldr	r0, [pc, #140]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 8003722:	f003 f85d 	bl	80067e0 <HAL_TIM_PWM_ConfigChannel>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 800372c:	f7ff fc72 	bl	8003014 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003730:	2300      	movs	r3, #0
 8003732:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003734:	2300      	movs	r3, #0
 8003736:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003738:	2300      	movs	r3, #0
 800373a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800373c:	2300      	movs	r3, #0
 800373e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003744:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003748:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800374a:	2300      	movs	r3, #0
 800374c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800374e:	1d3b      	adds	r3, r7, #4
 8003750:	4619      	mov	r1, r3
 8003752:	4817      	ldr	r0, [pc, #92]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 8003754:	f003 fd3e 	bl	80071d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 800375e:	f7ff fc59 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8003762:	4b13      	ldr	r3, [pc, #76]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2200      	movs	r2, #0
 8003768:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 800376a:	4b11      	ldr	r3, [pc, #68]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2200      	movs	r2, #0
 8003770:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8003772:	4b0f      	ldr	r3, [pc, #60]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2200      	movs	r2, #0
 8003778:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 800377a:	4b0d      	ldr	r3, [pc, #52]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2200      	movs	r2, #0
 8003780:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003782:	2100      	movs	r1, #0
 8003784:	480a      	ldr	r0, [pc, #40]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 8003786:	f002 fd39 	bl	80061fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800378a:	2104      	movs	r1, #4
 800378c:	4808      	ldr	r0, [pc, #32]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 800378e:	f002 fd35 	bl	80061fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8003792:	2108      	movs	r1, #8
 8003794:	4806      	ldr	r0, [pc, #24]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 8003796:	f002 fd31 	bl	80061fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800379a:	210c      	movs	r1, #12
 800379c:	4804      	ldr	r0, [pc, #16]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 800379e:	f002 fd2d 	bl	80061fc <HAL_TIM_PWM_Start>
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80037a2:	4803      	ldr	r0, [pc, #12]	@ (80037b0 <MX_TIM8_Init+0x1c0>)
 80037a4:	f000 f8f6 	bl	8003994 <HAL_TIM_MspPostInit>

}
 80037a8:	bf00      	nop
 80037aa:	3758      	adds	r7, #88	@ 0x58
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	200004d8 	.word	0x200004d8
 80037b4:	40013400 	.word	0x40013400

080037b8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08c      	sub	sp, #48	@ 0x30
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c0:	f107 031c 	add.w	r3, r7, #28
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d6:	d14f      	bne.n	8003878 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037d8:	4b3e      	ldr	r3, [pc, #248]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0x11c>)
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	4a3d      	ldr	r2, [pc, #244]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0x11c>)
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	61d3      	str	r3, [r2, #28]
 80037e4:	4b3b      	ldr	r3, [pc, #236]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0x11c>)
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f0:	4b38      	ldr	r3, [pc, #224]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0x11c>)
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	4a37      	ldr	r2, [pc, #220]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0x11c>)
 80037f6:	f043 0304 	orr.w	r3, r3, #4
 80037fa:	6193      	str	r3, [r2, #24]
 80037fc:	4b35      	ldr	r3, [pc, #212]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0x11c>)
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003808:	4b32      	ldr	r3, [pc, #200]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0x11c>)
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	4a31      	ldr	r2, [pc, #196]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0x11c>)
 800380e:	f043 0308 	orr.w	r3, r3, #8
 8003812:	6193      	str	r3, [r2, #24]
 8003814:	4b2f      	ldr	r3, [pc, #188]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003820:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003826:	2300      	movs	r3, #0
 8003828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382a:	2300      	movs	r3, #0
 800382c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800382e:	f107 031c 	add.w	r3, r7, #28
 8003832:	4619      	mov	r1, r3
 8003834:	4828      	ldr	r0, [pc, #160]	@ (80038d8 <HAL_TIM_Encoder_MspInit+0x120>)
 8003836:	f000 ff39 	bl	80046ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800383a:	2308      	movs	r3, #8
 800383c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800383e:	2300      	movs	r3, #0
 8003840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003842:	2300      	movs	r3, #0
 8003844:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003846:	f107 031c 	add.w	r3, r7, #28
 800384a:	4619      	mov	r1, r3
 800384c:	4823      	ldr	r0, [pc, #140]	@ (80038dc <HAL_TIM_Encoder_MspInit+0x124>)
 800384e:	f000 ff2d 	bl	80046ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003852:	4b23      	ldr	r3, [pc, #140]	@ (80038e0 <HAL_TIM_Encoder_MspInit+0x128>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800385e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003862:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003866:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800386a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800386e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003870:	4a1b      	ldr	r2, [pc, #108]	@ (80038e0 <HAL_TIM_Encoder_MspInit+0x128>)
 8003872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003874:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003876:	e028      	b.n	80038ca <HAL_TIM_Encoder_MspInit+0x112>
  else if(tim_encoderHandle->Instance==TIM4)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a19      	ldr	r2, [pc, #100]	@ (80038e4 <HAL_TIM_Encoder_MspInit+0x12c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d123      	bne.n	80038ca <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003882:	4b14      	ldr	r3, [pc, #80]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	4a13      	ldr	r2, [pc, #76]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003888:	f043 0304 	orr.w	r3, r3, #4
 800388c:	61d3      	str	r3, [r2, #28]
 800388e:	4b11      	ldr	r3, [pc, #68]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800389a:	4b0e      	ldr	r3, [pc, #56]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0x11c>)
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	4a0d      	ldr	r2, [pc, #52]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0x11c>)
 80038a0:	f043 0308 	orr.w	r3, r3, #8
 80038a4:	6193      	str	r3, [r2, #24]
 80038a6:	4b0b      	ldr	r3, [pc, #44]	@ (80038d4 <HAL_TIM_Encoder_MspInit+0x11c>)
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038b2:	23c0      	movs	r3, #192	@ 0xc0
 80038b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038b6:	2300      	movs	r3, #0
 80038b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038be:	f107 031c 	add.w	r3, r7, #28
 80038c2:	4619      	mov	r1, r3
 80038c4:	4805      	ldr	r0, [pc, #20]	@ (80038dc <HAL_TIM_Encoder_MspInit+0x124>)
 80038c6:	f000 fef1 	bl	80046ac <HAL_GPIO_Init>
}
 80038ca:	bf00      	nop
 80038cc:	3730      	adds	r7, #48	@ 0x30
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40010800 	.word	0x40010800
 80038dc:	40010c00 	.word	0x40010c00
 80038e0:	40010000 	.word	0x40010000
 80038e4:	40000800 	.word	0x40000800

080038e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a23      	ldr	r2, [pc, #140]	@ (8003984 <HAL_TIM_Base_MspInit+0x9c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d114      	bne.n	8003924 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80038fa:	4b23      	ldr	r3, [pc, #140]	@ (8003988 <HAL_TIM_Base_MspInit+0xa0>)
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	4a22      	ldr	r2, [pc, #136]	@ (8003988 <HAL_TIM_Base_MspInit+0xa0>)
 8003900:	f043 0310 	orr.w	r3, r3, #16
 8003904:	61d3      	str	r3, [r2, #28]
 8003906:	4b20      	ldr	r3, [pc, #128]	@ (8003988 <HAL_TIM_Base_MspInit+0xa0>)
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003912:	2200      	movs	r2, #0
 8003914:	2100      	movs	r1, #0
 8003916:	2036      	movs	r0, #54	@ 0x36
 8003918:	f000 fa9b 	bl	8003e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800391c:	2036      	movs	r0, #54	@ 0x36
 800391e:	f000 fab4 	bl	8003e8a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003922:	e02a      	b.n	800397a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a18      	ldr	r2, [pc, #96]	@ (800398c <HAL_TIM_Base_MspInit+0xa4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d114      	bne.n	8003958 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800392e:	4b16      	ldr	r3, [pc, #88]	@ (8003988 <HAL_TIM_Base_MspInit+0xa0>)
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	4a15      	ldr	r2, [pc, #84]	@ (8003988 <HAL_TIM_Base_MspInit+0xa0>)
 8003934:	f043 0320 	orr.w	r3, r3, #32
 8003938:	61d3      	str	r3, [r2, #28]
 800393a:	4b13      	ldr	r3, [pc, #76]	@ (8003988 <HAL_TIM_Base_MspInit+0xa0>)
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003946:	2200      	movs	r2, #0
 8003948:	2100      	movs	r1, #0
 800394a:	2037      	movs	r0, #55	@ 0x37
 800394c:	f000 fa81 	bl	8003e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003950:	2037      	movs	r0, #55	@ 0x37
 8003952:	f000 fa9a 	bl	8003e8a <HAL_NVIC_EnableIRQ>
}
 8003956:	e010      	b.n	800397a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a0c      	ldr	r2, [pc, #48]	@ (8003990 <HAL_TIM_Base_MspInit+0xa8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d10b      	bne.n	800397a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003962:	4b09      	ldr	r3, [pc, #36]	@ (8003988 <HAL_TIM_Base_MspInit+0xa0>)
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	4a08      	ldr	r2, [pc, #32]	@ (8003988 <HAL_TIM_Base_MspInit+0xa0>)
 8003968:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800396c:	6193      	str	r3, [r2, #24]
 800396e:	4b06      	ldr	r3, [pc, #24]	@ (8003988 <HAL_TIM_Base_MspInit+0xa0>)
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]
}
 800397a:	bf00      	nop
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40001000 	.word	0x40001000
 8003988:	40021000 	.word	0x40021000
 800398c:	40001400 	.word	0x40001400
 8003990:	40013400 	.word	0x40013400

08003994 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800399c:	f107 0310 	add.w	r3, r7, #16
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM8)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a10      	ldr	r2, [pc, #64]	@ (80039f0 <HAL_TIM_MspPostInit+0x5c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d118      	bne.n	80039e6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039b4:	4b0f      	ldr	r3, [pc, #60]	@ (80039f4 <HAL_TIM_MspPostInit+0x60>)
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	4a0e      	ldr	r2, [pc, #56]	@ (80039f4 <HAL_TIM_MspPostInit+0x60>)
 80039ba:	f043 0310 	orr.w	r3, r3, #16
 80039be:	6193      	str	r3, [r2, #24]
 80039c0:	4b0c      	ldr	r3, [pc, #48]	@ (80039f4 <HAL_TIM_MspPostInit+0x60>)
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80039cc:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80039d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d2:	2302      	movs	r3, #2
 80039d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d6:	2302      	movs	r3, #2
 80039d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039da:	f107 0310 	add.w	r3, r7, #16
 80039de:	4619      	mov	r1, r3
 80039e0:	4805      	ldr	r0, [pc, #20]	@ (80039f8 <HAL_TIM_MspPostInit+0x64>)
 80039e2:	f000 fe63 	bl	80046ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80039e6:	bf00      	nop
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40013400 	.word	0x40013400
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40011000 	.word	0x40011000

080039fc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a00:	4b11      	ldr	r3, [pc, #68]	@ (8003a48 <MX_USART1_UART_Init+0x4c>)
 8003a02:	4a12      	ldr	r2, [pc, #72]	@ (8003a4c <MX_USART1_UART_Init+0x50>)
 8003a04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003a06:	4b10      	ldr	r3, [pc, #64]	@ (8003a48 <MX_USART1_UART_Init+0x4c>)
 8003a08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003a0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a48 <MX_USART1_UART_Init+0x4c>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a14:	4b0c      	ldr	r3, [pc, #48]	@ (8003a48 <MX_USART1_UART_Init+0x4c>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a48 <MX_USART1_UART_Init+0x4c>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a20:	4b09      	ldr	r3, [pc, #36]	@ (8003a48 <MX_USART1_UART_Init+0x4c>)
 8003a22:	220c      	movs	r2, #12
 8003a24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a26:	4b08      	ldr	r3, [pc, #32]	@ (8003a48 <MX_USART1_UART_Init+0x4c>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a2c:	4b06      	ldr	r3, [pc, #24]	@ (8003a48 <MX_USART1_UART_Init+0x4c>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a32:	4805      	ldr	r0, [pc, #20]	@ (8003a48 <MX_USART1_UART_Init+0x4c>)
 8003a34:	f003 fc31 	bl	800729a <HAL_UART_Init>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003a3e:	f7ff fae9 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000520 	.word	0x20000520
 8003a4c:	40013800 	.word	0x40013800

08003a50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a58:	f107 0310 	add.w	r3, r7, #16
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	605a      	str	r2, [r3, #4]
 8003a62:	609a      	str	r2, [r3, #8]
 8003a64:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a33      	ldr	r2, [pc, #204]	@ (8003b38 <HAL_UART_MspInit+0xe8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d15f      	bne.n	8003b30 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a70:	4b32      	ldr	r3, [pc, #200]	@ (8003b3c <HAL_UART_MspInit+0xec>)
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	4a31      	ldr	r2, [pc, #196]	@ (8003b3c <HAL_UART_MspInit+0xec>)
 8003a76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a7a:	6193      	str	r3, [r2, #24]
 8003a7c:	4b2f      	ldr	r3, [pc, #188]	@ (8003b3c <HAL_UART_MspInit+0xec>)
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a88:	4b2c      	ldr	r3, [pc, #176]	@ (8003b3c <HAL_UART_MspInit+0xec>)
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	4a2b      	ldr	r2, [pc, #172]	@ (8003b3c <HAL_UART_MspInit+0xec>)
 8003a8e:	f043 0304 	orr.w	r3, r3, #4
 8003a92:	6193      	str	r3, [r2, #24]
 8003a94:	4b29      	ldr	r3, [pc, #164]	@ (8003b3c <HAL_UART_MspInit+0xec>)
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003aa0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003aa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aae:	f107 0310 	add.w	r3, r7, #16
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4822      	ldr	r0, [pc, #136]	@ (8003b40 <HAL_UART_MspInit+0xf0>)
 8003ab6:	f000 fdf9 	bl	80046ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003aba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac8:	f107 0310 	add.w	r3, r7, #16
 8003acc:	4619      	mov	r1, r3
 8003ace:	481c      	ldr	r0, [pc, #112]	@ (8003b40 <HAL_UART_MspInit+0xf0>)
 8003ad0:	f000 fdec 	bl	80046ac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b44 <HAL_UART_MspInit+0xf4>)
 8003ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8003b48 <HAL_UART_MspInit+0xf8>)
 8003ad8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ada:	4b1a      	ldr	r3, [pc, #104]	@ (8003b44 <HAL_UART_MspInit+0xf4>)
 8003adc:	2210      	movs	r2, #16
 8003ade:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ae0:	4b18      	ldr	r3, [pc, #96]	@ (8003b44 <HAL_UART_MspInit+0xf4>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ae6:	4b17      	ldr	r3, [pc, #92]	@ (8003b44 <HAL_UART_MspInit+0xf4>)
 8003ae8:	2280      	movs	r2, #128	@ 0x80
 8003aea:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003aec:	4b15      	ldr	r3, [pc, #84]	@ (8003b44 <HAL_UART_MspInit+0xf4>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003af2:	4b14      	ldr	r3, [pc, #80]	@ (8003b44 <HAL_UART_MspInit+0xf4>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003af8:	4b12      	ldr	r3, [pc, #72]	@ (8003b44 <HAL_UART_MspInit+0xf4>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003afe:	4b11      	ldr	r3, [pc, #68]	@ (8003b44 <HAL_UART_MspInit+0xf4>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003b04:	480f      	ldr	r0, [pc, #60]	@ (8003b44 <HAL_UART_MspInit+0xf4>)
 8003b06:	f000 f9db 	bl	8003ec0 <HAL_DMA_Init>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8003b10:	f7ff fa80 	bl	8003014 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a0b      	ldr	r2, [pc, #44]	@ (8003b44 <HAL_UART_MspInit+0xf4>)
 8003b18:	639a      	str	r2, [r3, #56]	@ 0x38
 8003b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b44 <HAL_UART_MspInit+0xf4>)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003b20:	2200      	movs	r2, #0
 8003b22:	2100      	movs	r1, #0
 8003b24:	2025      	movs	r0, #37	@ 0x25
 8003b26:	f000 f994 	bl	8003e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b2a:	2025      	movs	r0, #37	@ 0x25
 8003b2c:	f000 f9ad 	bl	8003e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003b30:	bf00      	nop
 8003b32:	3720      	adds	r7, #32
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40013800 	.word	0x40013800
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	40010800 	.word	0x40010800
 8003b44:	20000568 	.word	0x20000568
 8003b48:	40020044 	.word	0x40020044

08003b4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b4c:	f7ff fc32 	bl	80033b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b50:	480b      	ldr	r0, [pc, #44]	@ (8003b80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003b52:	490c      	ldr	r1, [pc, #48]	@ (8003b84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003b54:	4a0c      	ldr	r2, [pc, #48]	@ (8003b88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b58:	e002      	b.n	8003b60 <LoopCopyDataInit>

08003b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b5e:	3304      	adds	r3, #4

08003b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b64:	d3f9      	bcc.n	8003b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b66:	4a09      	ldr	r2, [pc, #36]	@ (8003b8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003b68:	4c09      	ldr	r4, [pc, #36]	@ (8003b90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b6c:	e001      	b.n	8003b72 <LoopFillZerobss>

08003b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b70:	3204      	adds	r2, #4

08003b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b74:	d3fb      	bcc.n	8003b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b76:	f004 ffc3 	bl	8008b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b7a:	f7ff f9e7 	bl	8002f4c <main>
  bx lr
 8003b7e:	4770      	bx	lr
  ldr r0, =_sdata
 8003b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b84:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8003b88:	0800be60 	.word	0x0800be60
  ldr r2, =_sbss
 8003b8c:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8003b90:	200006fc 	.word	0x200006fc

08003b94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b94:	e7fe      	b.n	8003b94 <ADC1_2_IRQHandler>
	...

08003b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b9c:	4b08      	ldr	r3, [pc, #32]	@ (8003bc0 <HAL_Init+0x28>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a07      	ldr	r2, [pc, #28]	@ (8003bc0 <HAL_Init+0x28>)
 8003ba2:	f043 0310 	orr.w	r3, r3, #16
 8003ba6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ba8:	2003      	movs	r0, #3
 8003baa:	f000 f947 	bl	8003e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bae:	200f      	movs	r0, #15
 8003bb0:	f000 f808 	bl	8003bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bb4:	f7ff fab6 	bl	8003124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40022000 	.word	0x40022000

08003bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bcc:	4b12      	ldr	r3, [pc, #72]	@ (8003c18 <HAL_InitTick+0x54>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	4b12      	ldr	r3, [pc, #72]	@ (8003c1c <HAL_InitTick+0x58>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 f95f 	bl	8003ea6 <HAL_SYSTICK_Config>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e00e      	b.n	8003c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b0f      	cmp	r3, #15
 8003bf6:	d80a      	bhi.n	8003c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003c00:	f000 f927 	bl	8003e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c04:	4a06      	ldr	r2, [pc, #24]	@ (8003c20 <HAL_InitTick+0x5c>)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e000      	b.n	8003c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	2000004c 	.word	0x2000004c
 8003c1c:	20000054 	.word	0x20000054
 8003c20:	20000050 	.word	0x20000050

08003c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c28:	4b05      	ldr	r3, [pc, #20]	@ (8003c40 <HAL_IncTick+0x1c>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4b05      	ldr	r3, [pc, #20]	@ (8003c44 <HAL_IncTick+0x20>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4413      	add	r3, r2
 8003c34:	4a03      	ldr	r2, [pc, #12]	@ (8003c44 <HAL_IncTick+0x20>)
 8003c36:	6013      	str	r3, [r2, #0]
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr
 8003c40:	20000054 	.word	0x20000054
 8003c44:	200005ac 	.word	0x200005ac

08003c48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c4c:	4b02      	ldr	r3, [pc, #8]	@ (8003c58 <HAL_GetTick+0x10>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr
 8003c58:	200005ac 	.word	0x200005ac

08003c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c64:	f7ff fff0 	bl	8003c48 <HAL_GetTick>
 8003c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c74:	d005      	beq.n	8003c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c76:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca0 <HAL_Delay+0x44>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4413      	add	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c82:	bf00      	nop
 8003c84:	f7ff ffe0 	bl	8003c48 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d8f7      	bhi.n	8003c84 <HAL_Delay+0x28>
  {
  }
}
 8003c94:	bf00      	nop
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000054 	.word	0x20000054

08003ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ccc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cd6:	4a04      	ldr	r2, [pc, #16]	@ (8003ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	60d3      	str	r3, [r2, #12]
}
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cf0:	4b04      	ldr	r3, [pc, #16]	@ (8003d04 <__NVIC_GetPriorityGrouping+0x18>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	0a1b      	lsrs	r3, r3, #8
 8003cf6:	f003 0307 	and.w	r3, r3, #7
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	e000ed00 	.word	0xe000ed00

08003d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	db0b      	blt.n	8003d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	f003 021f 	and.w	r2, r3, #31
 8003d20:	4906      	ldr	r1, [pc, #24]	@ (8003d3c <__NVIC_EnableIRQ+0x34>)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	2001      	movs	r0, #1
 8003d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr
 8003d3c:	e000e100 	.word	0xe000e100

08003d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	6039      	str	r1, [r7, #0]
 8003d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	db0a      	blt.n	8003d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	490c      	ldr	r1, [pc, #48]	@ (8003d8c <__NVIC_SetPriority+0x4c>)
 8003d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5e:	0112      	lsls	r2, r2, #4
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	440b      	add	r3, r1
 8003d64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d68:	e00a      	b.n	8003d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	4908      	ldr	r1, [pc, #32]	@ (8003d90 <__NVIC_SetPriority+0x50>)
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	3b04      	subs	r3, #4
 8003d78:	0112      	lsls	r2, r2, #4
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	761a      	strb	r2, [r3, #24]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	e000e100 	.word	0xe000e100
 8003d90:	e000ed00 	.word	0xe000ed00

08003d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b089      	sub	sp, #36	@ 0x24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f1c3 0307 	rsb	r3, r3, #7
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	bf28      	it	cs
 8003db2:	2304      	movcs	r3, #4
 8003db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3304      	adds	r3, #4
 8003dba:	2b06      	cmp	r3, #6
 8003dbc:	d902      	bls.n	8003dc4 <NVIC_EncodePriority+0x30>
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	3b03      	subs	r3, #3
 8003dc2:	e000      	b.n	8003dc6 <NVIC_EncodePriority+0x32>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43da      	mvns	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	401a      	ands	r2, r3
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	fa01 f303 	lsl.w	r3, r1, r3
 8003de6:	43d9      	mvns	r1, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dec:	4313      	orrs	r3, r2
         );
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3724      	adds	r7, #36	@ 0x24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr

08003df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e08:	d301      	bcc.n	8003e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e00f      	b.n	8003e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e38 <SysTick_Config+0x40>)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e16:	210f      	movs	r1, #15
 8003e18:	f04f 30ff 	mov.w	r0, #4294967295
 8003e1c:	f7ff ff90 	bl	8003d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e20:	4b05      	ldr	r3, [pc, #20]	@ (8003e38 <SysTick_Config+0x40>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e26:	4b04      	ldr	r3, [pc, #16]	@ (8003e38 <SysTick_Config+0x40>)
 8003e28:	2207      	movs	r2, #7
 8003e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	e000e010 	.word	0xe000e010

08003e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff ff2d 	bl	8003ca4 <__NVIC_SetPriorityGrouping>
}
 8003e4a:	bf00      	nop
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b086      	sub	sp, #24
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	4603      	mov	r3, r0
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	607a      	str	r2, [r7, #4]
 8003e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e64:	f7ff ff42 	bl	8003cec <__NVIC_GetPriorityGrouping>
 8003e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68b9      	ldr	r1, [r7, #8]
 8003e6e:	6978      	ldr	r0, [r7, #20]
 8003e70:	f7ff ff90 	bl	8003d94 <NVIC_EncodePriority>
 8003e74:	4602      	mov	r2, r0
 8003e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff ff5f 	bl	8003d40 <__NVIC_SetPriority>
}
 8003e82:	bf00      	nop
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	4603      	mov	r3, r0
 8003e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff ff35 	bl	8003d08 <__NVIC_EnableIRQ>
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff ffa2 	bl	8003df8 <SysTick_Config>
 8003eb4:	4603      	mov	r3, r0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e059      	b.n	8003f8a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	4b2d      	ldr	r3, [pc, #180]	@ (8003f94 <HAL_DMA_Init+0xd4>)
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d80f      	bhi.n	8003f02 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8003f98 <HAL_DMA_Init+0xd8>)
 8003eea:	4413      	add	r3, r2
 8003eec:	4a2b      	ldr	r2, [pc, #172]	@ (8003f9c <HAL_DMA_Init+0xdc>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	091b      	lsrs	r3, r3, #4
 8003ef4:	009a      	lsls	r2, r3, #2
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a28      	ldr	r2, [pc, #160]	@ (8003fa0 <HAL_DMA_Init+0xe0>)
 8003efe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f00:	e00e      	b.n	8003f20 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	4b26      	ldr	r3, [pc, #152]	@ (8003fa4 <HAL_DMA_Init+0xe4>)
 8003f0a:	4413      	add	r3, r2
 8003f0c:	4a23      	ldr	r2, [pc, #140]	@ (8003f9c <HAL_DMA_Init+0xdc>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	091b      	lsrs	r3, r3, #4
 8003f14:	009a      	lsls	r2, r3, #2
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a22      	ldr	r2, [pc, #136]	@ (8003fa8 <HAL_DMA_Init+0xe8>)
 8003f1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003f36:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003f3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr
 8003f94:	40020407 	.word	0x40020407
 8003f98:	bffdfff8 	.word	0xbffdfff8
 8003f9c:	cccccccd 	.word	0xcccccccd
 8003fa0:	40020000 	.word	0x40020000
 8003fa4:	bffdfbf8 	.word	0xbffdfbf8
 8003fa8:	40020400 	.word	0x40020400

08003fac <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d008      	beq.n	8003fd6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e020      	b.n	8004018 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 020e 	bic.w	r2, r2, #14
 8003fe4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffe:	2101      	movs	r1, #1
 8004000:	fa01 f202 	lsl.w	r2, r1, r2
 8004004:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004016:	7bfb      	ldrb	r3, [r7, #15]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr
	...

08004024 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d005      	beq.n	8004048 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2204      	movs	r2, #4
 8004040:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	73fb      	strb	r3, [r7, #15]
 8004046:	e0d6      	b.n	80041f6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 020e 	bic.w	r2, r2, #14
 8004056:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	4b64      	ldr	r3, [pc, #400]	@ (8004200 <HAL_DMA_Abort_IT+0x1dc>)
 8004070:	429a      	cmp	r2, r3
 8004072:	d958      	bls.n	8004126 <HAL_DMA_Abort_IT+0x102>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a62      	ldr	r2, [pc, #392]	@ (8004204 <HAL_DMA_Abort_IT+0x1e0>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d04f      	beq.n	800411e <HAL_DMA_Abort_IT+0xfa>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a61      	ldr	r2, [pc, #388]	@ (8004208 <HAL_DMA_Abort_IT+0x1e4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d048      	beq.n	800411a <HAL_DMA_Abort_IT+0xf6>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a5f      	ldr	r2, [pc, #380]	@ (800420c <HAL_DMA_Abort_IT+0x1e8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d040      	beq.n	8004114 <HAL_DMA_Abort_IT+0xf0>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a5e      	ldr	r2, [pc, #376]	@ (8004210 <HAL_DMA_Abort_IT+0x1ec>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d038      	beq.n	800410e <HAL_DMA_Abort_IT+0xea>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a5c      	ldr	r2, [pc, #368]	@ (8004214 <HAL_DMA_Abort_IT+0x1f0>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d030      	beq.n	8004108 <HAL_DMA_Abort_IT+0xe4>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a5b      	ldr	r2, [pc, #364]	@ (8004218 <HAL_DMA_Abort_IT+0x1f4>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d028      	beq.n	8004102 <HAL_DMA_Abort_IT+0xde>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a52      	ldr	r2, [pc, #328]	@ (8004200 <HAL_DMA_Abort_IT+0x1dc>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d020      	beq.n	80040fc <HAL_DMA_Abort_IT+0xd8>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a57      	ldr	r2, [pc, #348]	@ (800421c <HAL_DMA_Abort_IT+0x1f8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d019      	beq.n	80040f8 <HAL_DMA_Abort_IT+0xd4>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a55      	ldr	r2, [pc, #340]	@ (8004220 <HAL_DMA_Abort_IT+0x1fc>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d012      	beq.n	80040f4 <HAL_DMA_Abort_IT+0xd0>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a54      	ldr	r2, [pc, #336]	@ (8004224 <HAL_DMA_Abort_IT+0x200>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00a      	beq.n	80040ee <HAL_DMA_Abort_IT+0xca>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a52      	ldr	r2, [pc, #328]	@ (8004228 <HAL_DMA_Abort_IT+0x204>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d102      	bne.n	80040e8 <HAL_DMA_Abort_IT+0xc4>
 80040e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040e6:	e01b      	b.n	8004120 <HAL_DMA_Abort_IT+0xfc>
 80040e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80040ec:	e018      	b.n	8004120 <HAL_DMA_Abort_IT+0xfc>
 80040ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040f2:	e015      	b.n	8004120 <HAL_DMA_Abort_IT+0xfc>
 80040f4:	2310      	movs	r3, #16
 80040f6:	e013      	b.n	8004120 <HAL_DMA_Abort_IT+0xfc>
 80040f8:	2301      	movs	r3, #1
 80040fa:	e011      	b.n	8004120 <HAL_DMA_Abort_IT+0xfc>
 80040fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004100:	e00e      	b.n	8004120 <HAL_DMA_Abort_IT+0xfc>
 8004102:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004106:	e00b      	b.n	8004120 <HAL_DMA_Abort_IT+0xfc>
 8004108:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800410c:	e008      	b.n	8004120 <HAL_DMA_Abort_IT+0xfc>
 800410e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004112:	e005      	b.n	8004120 <HAL_DMA_Abort_IT+0xfc>
 8004114:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004118:	e002      	b.n	8004120 <HAL_DMA_Abort_IT+0xfc>
 800411a:	2310      	movs	r3, #16
 800411c:	e000      	b.n	8004120 <HAL_DMA_Abort_IT+0xfc>
 800411e:	2301      	movs	r3, #1
 8004120:	4a42      	ldr	r2, [pc, #264]	@ (800422c <HAL_DMA_Abort_IT+0x208>)
 8004122:	6053      	str	r3, [r2, #4]
 8004124:	e057      	b.n	80041d6 <HAL_DMA_Abort_IT+0x1b2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a36      	ldr	r2, [pc, #216]	@ (8004204 <HAL_DMA_Abort_IT+0x1e0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d04f      	beq.n	80041d0 <HAL_DMA_Abort_IT+0x1ac>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a34      	ldr	r2, [pc, #208]	@ (8004208 <HAL_DMA_Abort_IT+0x1e4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d048      	beq.n	80041cc <HAL_DMA_Abort_IT+0x1a8>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a33      	ldr	r2, [pc, #204]	@ (800420c <HAL_DMA_Abort_IT+0x1e8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d040      	beq.n	80041c6 <HAL_DMA_Abort_IT+0x1a2>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a31      	ldr	r2, [pc, #196]	@ (8004210 <HAL_DMA_Abort_IT+0x1ec>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d038      	beq.n	80041c0 <HAL_DMA_Abort_IT+0x19c>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a30      	ldr	r2, [pc, #192]	@ (8004214 <HAL_DMA_Abort_IT+0x1f0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d030      	beq.n	80041ba <HAL_DMA_Abort_IT+0x196>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a2e      	ldr	r2, [pc, #184]	@ (8004218 <HAL_DMA_Abort_IT+0x1f4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d028      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x190>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a26      	ldr	r2, [pc, #152]	@ (8004200 <HAL_DMA_Abort_IT+0x1dc>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d020      	beq.n	80041ae <HAL_DMA_Abort_IT+0x18a>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a2a      	ldr	r2, [pc, #168]	@ (800421c <HAL_DMA_Abort_IT+0x1f8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d019      	beq.n	80041aa <HAL_DMA_Abort_IT+0x186>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a29      	ldr	r2, [pc, #164]	@ (8004220 <HAL_DMA_Abort_IT+0x1fc>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d012      	beq.n	80041a6 <HAL_DMA_Abort_IT+0x182>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a27      	ldr	r2, [pc, #156]	@ (8004224 <HAL_DMA_Abort_IT+0x200>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d00a      	beq.n	80041a0 <HAL_DMA_Abort_IT+0x17c>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a26      	ldr	r2, [pc, #152]	@ (8004228 <HAL_DMA_Abort_IT+0x204>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d102      	bne.n	800419a <HAL_DMA_Abort_IT+0x176>
 8004194:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004198:	e01b      	b.n	80041d2 <HAL_DMA_Abort_IT+0x1ae>
 800419a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800419e:	e018      	b.n	80041d2 <HAL_DMA_Abort_IT+0x1ae>
 80041a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041a4:	e015      	b.n	80041d2 <HAL_DMA_Abort_IT+0x1ae>
 80041a6:	2310      	movs	r3, #16
 80041a8:	e013      	b.n	80041d2 <HAL_DMA_Abort_IT+0x1ae>
 80041aa:	2301      	movs	r3, #1
 80041ac:	e011      	b.n	80041d2 <HAL_DMA_Abort_IT+0x1ae>
 80041ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041b2:	e00e      	b.n	80041d2 <HAL_DMA_Abort_IT+0x1ae>
 80041b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80041b8:	e00b      	b.n	80041d2 <HAL_DMA_Abort_IT+0x1ae>
 80041ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80041be:	e008      	b.n	80041d2 <HAL_DMA_Abort_IT+0x1ae>
 80041c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041c4:	e005      	b.n	80041d2 <HAL_DMA_Abort_IT+0x1ae>
 80041c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041ca:	e002      	b.n	80041d2 <HAL_DMA_Abort_IT+0x1ae>
 80041cc:	2310      	movs	r3, #16
 80041ce:	e000      	b.n	80041d2 <HAL_DMA_Abort_IT+0x1ae>
 80041d0:	2301      	movs	r3, #1
 80041d2:	4a17      	ldr	r2, [pc, #92]	@ (8004230 <HAL_DMA_Abort_IT+0x20c>)
 80041d4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	4798      	blx	r3
    } 
  }
  return status;
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40020080 	.word	0x40020080
 8004204:	40020008 	.word	0x40020008
 8004208:	4002001c 	.word	0x4002001c
 800420c:	40020030 	.word	0x40020030
 8004210:	40020044 	.word	0x40020044
 8004214:	40020058 	.word	0x40020058
 8004218:	4002006c 	.word	0x4002006c
 800421c:	40020408 	.word	0x40020408
 8004220:	4002041c 	.word	0x4002041c
 8004224:	40020430 	.word	0x40020430
 8004228:	40020444 	.word	0x40020444
 800422c:	40020400 	.word	0x40020400
 8004230:	40020000 	.word	0x40020000

08004234 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004250:	2204      	movs	r2, #4
 8004252:	409a      	lsls	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4013      	ands	r3, r2
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80f1 	beq.w	8004440 <HAL_DMA_IRQHandler+0x20c>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 80eb 	beq.w	8004440 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0320 	and.w	r3, r3, #32
 8004274:	2b00      	cmp	r3, #0
 8004276:	d107      	bne.n	8004288 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0204 	bic.w	r2, r2, #4
 8004286:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	4b5f      	ldr	r3, [pc, #380]	@ (800440c <HAL_DMA_IRQHandler+0x1d8>)
 8004290:	429a      	cmp	r2, r3
 8004292:	d958      	bls.n	8004346 <HAL_DMA_IRQHandler+0x112>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a5d      	ldr	r2, [pc, #372]	@ (8004410 <HAL_DMA_IRQHandler+0x1dc>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d04f      	beq.n	800433e <HAL_DMA_IRQHandler+0x10a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a5c      	ldr	r2, [pc, #368]	@ (8004414 <HAL_DMA_IRQHandler+0x1e0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d048      	beq.n	800433a <HAL_DMA_IRQHandler+0x106>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a5a      	ldr	r2, [pc, #360]	@ (8004418 <HAL_DMA_IRQHandler+0x1e4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d040      	beq.n	8004334 <HAL_DMA_IRQHandler+0x100>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a59      	ldr	r2, [pc, #356]	@ (800441c <HAL_DMA_IRQHandler+0x1e8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d038      	beq.n	800432e <HAL_DMA_IRQHandler+0xfa>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a57      	ldr	r2, [pc, #348]	@ (8004420 <HAL_DMA_IRQHandler+0x1ec>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d030      	beq.n	8004328 <HAL_DMA_IRQHandler+0xf4>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a56      	ldr	r2, [pc, #344]	@ (8004424 <HAL_DMA_IRQHandler+0x1f0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d028      	beq.n	8004322 <HAL_DMA_IRQHandler+0xee>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a4d      	ldr	r2, [pc, #308]	@ (800440c <HAL_DMA_IRQHandler+0x1d8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d020      	beq.n	800431c <HAL_DMA_IRQHandler+0xe8>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a52      	ldr	r2, [pc, #328]	@ (8004428 <HAL_DMA_IRQHandler+0x1f4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d019      	beq.n	8004318 <HAL_DMA_IRQHandler+0xe4>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a50      	ldr	r2, [pc, #320]	@ (800442c <HAL_DMA_IRQHandler+0x1f8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d012      	beq.n	8004314 <HAL_DMA_IRQHandler+0xe0>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a4f      	ldr	r2, [pc, #316]	@ (8004430 <HAL_DMA_IRQHandler+0x1fc>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d00a      	beq.n	800430e <HAL_DMA_IRQHandler+0xda>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a4d      	ldr	r2, [pc, #308]	@ (8004434 <HAL_DMA_IRQHandler+0x200>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d102      	bne.n	8004308 <HAL_DMA_IRQHandler+0xd4>
 8004302:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004306:	e01b      	b.n	8004340 <HAL_DMA_IRQHandler+0x10c>
 8004308:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800430c:	e018      	b.n	8004340 <HAL_DMA_IRQHandler+0x10c>
 800430e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004312:	e015      	b.n	8004340 <HAL_DMA_IRQHandler+0x10c>
 8004314:	2340      	movs	r3, #64	@ 0x40
 8004316:	e013      	b.n	8004340 <HAL_DMA_IRQHandler+0x10c>
 8004318:	2304      	movs	r3, #4
 800431a:	e011      	b.n	8004340 <HAL_DMA_IRQHandler+0x10c>
 800431c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004320:	e00e      	b.n	8004340 <HAL_DMA_IRQHandler+0x10c>
 8004322:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004326:	e00b      	b.n	8004340 <HAL_DMA_IRQHandler+0x10c>
 8004328:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800432c:	e008      	b.n	8004340 <HAL_DMA_IRQHandler+0x10c>
 800432e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004332:	e005      	b.n	8004340 <HAL_DMA_IRQHandler+0x10c>
 8004334:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004338:	e002      	b.n	8004340 <HAL_DMA_IRQHandler+0x10c>
 800433a:	2340      	movs	r3, #64	@ 0x40
 800433c:	e000      	b.n	8004340 <HAL_DMA_IRQHandler+0x10c>
 800433e:	2304      	movs	r3, #4
 8004340:	4a3d      	ldr	r2, [pc, #244]	@ (8004438 <HAL_DMA_IRQHandler+0x204>)
 8004342:	6053      	str	r3, [r2, #4]
 8004344:	e057      	b.n	80043f6 <HAL_DMA_IRQHandler+0x1c2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a31      	ldr	r2, [pc, #196]	@ (8004410 <HAL_DMA_IRQHandler+0x1dc>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d04f      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x1bc>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a2f      	ldr	r2, [pc, #188]	@ (8004414 <HAL_DMA_IRQHandler+0x1e0>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d048      	beq.n	80043ec <HAL_DMA_IRQHandler+0x1b8>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a2e      	ldr	r2, [pc, #184]	@ (8004418 <HAL_DMA_IRQHandler+0x1e4>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d040      	beq.n	80043e6 <HAL_DMA_IRQHandler+0x1b2>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a2c      	ldr	r2, [pc, #176]	@ (800441c <HAL_DMA_IRQHandler+0x1e8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d038      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x1ac>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a2b      	ldr	r2, [pc, #172]	@ (8004420 <HAL_DMA_IRQHandler+0x1ec>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d030      	beq.n	80043da <HAL_DMA_IRQHandler+0x1a6>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a29      	ldr	r2, [pc, #164]	@ (8004424 <HAL_DMA_IRQHandler+0x1f0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d028      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x1a0>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a21      	ldr	r2, [pc, #132]	@ (800440c <HAL_DMA_IRQHandler+0x1d8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d020      	beq.n	80043ce <HAL_DMA_IRQHandler+0x19a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a25      	ldr	r2, [pc, #148]	@ (8004428 <HAL_DMA_IRQHandler+0x1f4>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d019      	beq.n	80043ca <HAL_DMA_IRQHandler+0x196>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a24      	ldr	r2, [pc, #144]	@ (800442c <HAL_DMA_IRQHandler+0x1f8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d012      	beq.n	80043c6 <HAL_DMA_IRQHandler+0x192>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a22      	ldr	r2, [pc, #136]	@ (8004430 <HAL_DMA_IRQHandler+0x1fc>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00a      	beq.n	80043c0 <HAL_DMA_IRQHandler+0x18c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a21      	ldr	r2, [pc, #132]	@ (8004434 <HAL_DMA_IRQHandler+0x200>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d102      	bne.n	80043ba <HAL_DMA_IRQHandler+0x186>
 80043b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80043b8:	e01b      	b.n	80043f2 <HAL_DMA_IRQHandler+0x1be>
 80043ba:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80043be:	e018      	b.n	80043f2 <HAL_DMA_IRQHandler+0x1be>
 80043c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043c4:	e015      	b.n	80043f2 <HAL_DMA_IRQHandler+0x1be>
 80043c6:	2340      	movs	r3, #64	@ 0x40
 80043c8:	e013      	b.n	80043f2 <HAL_DMA_IRQHandler+0x1be>
 80043ca:	2304      	movs	r3, #4
 80043cc:	e011      	b.n	80043f2 <HAL_DMA_IRQHandler+0x1be>
 80043ce:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80043d2:	e00e      	b.n	80043f2 <HAL_DMA_IRQHandler+0x1be>
 80043d4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80043d8:	e00b      	b.n	80043f2 <HAL_DMA_IRQHandler+0x1be>
 80043da:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80043de:	e008      	b.n	80043f2 <HAL_DMA_IRQHandler+0x1be>
 80043e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80043e4:	e005      	b.n	80043f2 <HAL_DMA_IRQHandler+0x1be>
 80043e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043ea:	e002      	b.n	80043f2 <HAL_DMA_IRQHandler+0x1be>
 80043ec:	2340      	movs	r3, #64	@ 0x40
 80043ee:	e000      	b.n	80043f2 <HAL_DMA_IRQHandler+0x1be>
 80043f0:	2304      	movs	r3, #4
 80043f2:	4a12      	ldr	r2, [pc, #72]	@ (800443c <HAL_DMA_IRQHandler+0x208>)
 80043f4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 8136 	beq.w	800466c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004408:	e130      	b.n	800466c <HAL_DMA_IRQHandler+0x438>
 800440a:	bf00      	nop
 800440c:	40020080 	.word	0x40020080
 8004410:	40020008 	.word	0x40020008
 8004414:	4002001c 	.word	0x4002001c
 8004418:	40020030 	.word	0x40020030
 800441c:	40020044 	.word	0x40020044
 8004420:	40020058 	.word	0x40020058
 8004424:	4002006c 	.word	0x4002006c
 8004428:	40020408 	.word	0x40020408
 800442c:	4002041c 	.word	0x4002041c
 8004430:	40020430 	.word	0x40020430
 8004434:	40020444 	.word	0x40020444
 8004438:	40020400 	.word	0x40020400
 800443c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004444:	2202      	movs	r2, #2
 8004446:	409a      	lsls	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4013      	ands	r3, r2
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 80dd 	beq.w	800460c <HAL_DMA_IRQHandler+0x3d8>
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80d7 	beq.w	800460c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0320 	and.w	r3, r3, #32
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10b      	bne.n	8004484 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 020a 	bic.w	r2, r2, #10
 800447a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	4b7b      	ldr	r3, [pc, #492]	@ (8004678 <HAL_DMA_IRQHandler+0x444>)
 800448c:	429a      	cmp	r2, r3
 800448e:	d958      	bls.n	8004542 <HAL_DMA_IRQHandler+0x30e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a79      	ldr	r2, [pc, #484]	@ (800467c <HAL_DMA_IRQHandler+0x448>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d04f      	beq.n	800453a <HAL_DMA_IRQHandler+0x306>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a78      	ldr	r2, [pc, #480]	@ (8004680 <HAL_DMA_IRQHandler+0x44c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d048      	beq.n	8004536 <HAL_DMA_IRQHandler+0x302>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a76      	ldr	r2, [pc, #472]	@ (8004684 <HAL_DMA_IRQHandler+0x450>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d040      	beq.n	8004530 <HAL_DMA_IRQHandler+0x2fc>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a75      	ldr	r2, [pc, #468]	@ (8004688 <HAL_DMA_IRQHandler+0x454>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d038      	beq.n	800452a <HAL_DMA_IRQHandler+0x2f6>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a73      	ldr	r2, [pc, #460]	@ (800468c <HAL_DMA_IRQHandler+0x458>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d030      	beq.n	8004524 <HAL_DMA_IRQHandler+0x2f0>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a72      	ldr	r2, [pc, #456]	@ (8004690 <HAL_DMA_IRQHandler+0x45c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d028      	beq.n	800451e <HAL_DMA_IRQHandler+0x2ea>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a69      	ldr	r2, [pc, #420]	@ (8004678 <HAL_DMA_IRQHandler+0x444>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d020      	beq.n	8004518 <HAL_DMA_IRQHandler+0x2e4>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a6e      	ldr	r2, [pc, #440]	@ (8004694 <HAL_DMA_IRQHandler+0x460>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d019      	beq.n	8004514 <HAL_DMA_IRQHandler+0x2e0>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a6c      	ldr	r2, [pc, #432]	@ (8004698 <HAL_DMA_IRQHandler+0x464>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d012      	beq.n	8004510 <HAL_DMA_IRQHandler+0x2dc>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a6b      	ldr	r2, [pc, #428]	@ (800469c <HAL_DMA_IRQHandler+0x468>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00a      	beq.n	800450a <HAL_DMA_IRQHandler+0x2d6>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a69      	ldr	r2, [pc, #420]	@ (80046a0 <HAL_DMA_IRQHandler+0x46c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d102      	bne.n	8004504 <HAL_DMA_IRQHandler+0x2d0>
 80044fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004502:	e01b      	b.n	800453c <HAL_DMA_IRQHandler+0x308>
 8004504:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004508:	e018      	b.n	800453c <HAL_DMA_IRQHandler+0x308>
 800450a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800450e:	e015      	b.n	800453c <HAL_DMA_IRQHandler+0x308>
 8004510:	2320      	movs	r3, #32
 8004512:	e013      	b.n	800453c <HAL_DMA_IRQHandler+0x308>
 8004514:	2302      	movs	r3, #2
 8004516:	e011      	b.n	800453c <HAL_DMA_IRQHandler+0x308>
 8004518:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800451c:	e00e      	b.n	800453c <HAL_DMA_IRQHandler+0x308>
 800451e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004522:	e00b      	b.n	800453c <HAL_DMA_IRQHandler+0x308>
 8004524:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004528:	e008      	b.n	800453c <HAL_DMA_IRQHandler+0x308>
 800452a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800452e:	e005      	b.n	800453c <HAL_DMA_IRQHandler+0x308>
 8004530:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004534:	e002      	b.n	800453c <HAL_DMA_IRQHandler+0x308>
 8004536:	2320      	movs	r3, #32
 8004538:	e000      	b.n	800453c <HAL_DMA_IRQHandler+0x308>
 800453a:	2302      	movs	r3, #2
 800453c:	4a59      	ldr	r2, [pc, #356]	@ (80046a4 <HAL_DMA_IRQHandler+0x470>)
 800453e:	6053      	str	r3, [r2, #4]
 8004540:	e057      	b.n	80045f2 <HAL_DMA_IRQHandler+0x3be>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a4d      	ldr	r2, [pc, #308]	@ (800467c <HAL_DMA_IRQHandler+0x448>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d04f      	beq.n	80045ec <HAL_DMA_IRQHandler+0x3b8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a4b      	ldr	r2, [pc, #300]	@ (8004680 <HAL_DMA_IRQHandler+0x44c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d048      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x3b4>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a4a      	ldr	r2, [pc, #296]	@ (8004684 <HAL_DMA_IRQHandler+0x450>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d040      	beq.n	80045e2 <HAL_DMA_IRQHandler+0x3ae>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a48      	ldr	r2, [pc, #288]	@ (8004688 <HAL_DMA_IRQHandler+0x454>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d038      	beq.n	80045dc <HAL_DMA_IRQHandler+0x3a8>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a47      	ldr	r2, [pc, #284]	@ (800468c <HAL_DMA_IRQHandler+0x458>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d030      	beq.n	80045d6 <HAL_DMA_IRQHandler+0x3a2>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a45      	ldr	r2, [pc, #276]	@ (8004690 <HAL_DMA_IRQHandler+0x45c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d028      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x39c>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a3d      	ldr	r2, [pc, #244]	@ (8004678 <HAL_DMA_IRQHandler+0x444>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d020      	beq.n	80045ca <HAL_DMA_IRQHandler+0x396>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a41      	ldr	r2, [pc, #260]	@ (8004694 <HAL_DMA_IRQHandler+0x460>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d019      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x392>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a40      	ldr	r2, [pc, #256]	@ (8004698 <HAL_DMA_IRQHandler+0x464>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d012      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x38e>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a3e      	ldr	r2, [pc, #248]	@ (800469c <HAL_DMA_IRQHandler+0x468>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00a      	beq.n	80045bc <HAL_DMA_IRQHandler+0x388>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a3d      	ldr	r2, [pc, #244]	@ (80046a0 <HAL_DMA_IRQHandler+0x46c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d102      	bne.n	80045b6 <HAL_DMA_IRQHandler+0x382>
 80045b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80045b4:	e01b      	b.n	80045ee <HAL_DMA_IRQHandler+0x3ba>
 80045b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80045ba:	e018      	b.n	80045ee <HAL_DMA_IRQHandler+0x3ba>
 80045bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045c0:	e015      	b.n	80045ee <HAL_DMA_IRQHandler+0x3ba>
 80045c2:	2320      	movs	r3, #32
 80045c4:	e013      	b.n	80045ee <HAL_DMA_IRQHandler+0x3ba>
 80045c6:	2302      	movs	r3, #2
 80045c8:	e011      	b.n	80045ee <HAL_DMA_IRQHandler+0x3ba>
 80045ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045ce:	e00e      	b.n	80045ee <HAL_DMA_IRQHandler+0x3ba>
 80045d0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80045d4:	e00b      	b.n	80045ee <HAL_DMA_IRQHandler+0x3ba>
 80045d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80045da:	e008      	b.n	80045ee <HAL_DMA_IRQHandler+0x3ba>
 80045dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80045e0:	e005      	b.n	80045ee <HAL_DMA_IRQHandler+0x3ba>
 80045e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045e6:	e002      	b.n	80045ee <HAL_DMA_IRQHandler+0x3ba>
 80045e8:	2320      	movs	r3, #32
 80045ea:	e000      	b.n	80045ee <HAL_DMA_IRQHandler+0x3ba>
 80045ec:	2302      	movs	r3, #2
 80045ee:	4a2e      	ldr	r2, [pc, #184]	@ (80046a8 <HAL_DMA_IRQHandler+0x474>)
 80045f0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d034      	beq.n	800466c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800460a:	e02f      	b.n	800466c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004610:	2208      	movs	r2, #8
 8004612:	409a      	lsls	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4013      	ands	r3, r2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d028      	beq.n	800466e <HAL_DMA_IRQHandler+0x43a>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d023      	beq.n	800466e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 020e 	bic.w	r2, r2, #14
 8004634:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800463e:	2101      	movs	r1, #1
 8004640:	fa01 f202 	lsl.w	r2, r1, r2
 8004644:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004660:	2b00      	cmp	r3, #0
 8004662:	d004      	beq.n	800466e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	4798      	blx	r3
    }
  }
  return;
 800466c:	bf00      	nop
 800466e:	bf00      	nop
}
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40020080 	.word	0x40020080
 800467c:	40020008 	.word	0x40020008
 8004680:	4002001c 	.word	0x4002001c
 8004684:	40020030 	.word	0x40020030
 8004688:	40020044 	.word	0x40020044
 800468c:	40020058 	.word	0x40020058
 8004690:	4002006c 	.word	0x4002006c
 8004694:	40020408 	.word	0x40020408
 8004698:	4002041c 	.word	0x4002041c
 800469c:	40020430 	.word	0x40020430
 80046a0:	40020444 	.word	0x40020444
 80046a4:	40020400 	.word	0x40020400
 80046a8:	40020000 	.word	0x40020000

080046ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b08b      	sub	sp, #44	@ 0x2c
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046b6:	2300      	movs	r3, #0
 80046b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80046ba:	2300      	movs	r3, #0
 80046bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046be:	e179      	b.n	80049b4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80046c0:	2201      	movs	r2, #1
 80046c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	4013      	ands	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	429a      	cmp	r2, r3
 80046da:	f040 8168 	bne.w	80049ae <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	4a96      	ldr	r2, [pc, #600]	@ (800493c <HAL_GPIO_Init+0x290>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d05e      	beq.n	80047a6 <HAL_GPIO_Init+0xfa>
 80046e8:	4a94      	ldr	r2, [pc, #592]	@ (800493c <HAL_GPIO_Init+0x290>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d875      	bhi.n	80047da <HAL_GPIO_Init+0x12e>
 80046ee:	4a94      	ldr	r2, [pc, #592]	@ (8004940 <HAL_GPIO_Init+0x294>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d058      	beq.n	80047a6 <HAL_GPIO_Init+0xfa>
 80046f4:	4a92      	ldr	r2, [pc, #584]	@ (8004940 <HAL_GPIO_Init+0x294>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d86f      	bhi.n	80047da <HAL_GPIO_Init+0x12e>
 80046fa:	4a92      	ldr	r2, [pc, #584]	@ (8004944 <HAL_GPIO_Init+0x298>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d052      	beq.n	80047a6 <HAL_GPIO_Init+0xfa>
 8004700:	4a90      	ldr	r2, [pc, #576]	@ (8004944 <HAL_GPIO_Init+0x298>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d869      	bhi.n	80047da <HAL_GPIO_Init+0x12e>
 8004706:	4a90      	ldr	r2, [pc, #576]	@ (8004948 <HAL_GPIO_Init+0x29c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d04c      	beq.n	80047a6 <HAL_GPIO_Init+0xfa>
 800470c:	4a8e      	ldr	r2, [pc, #568]	@ (8004948 <HAL_GPIO_Init+0x29c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d863      	bhi.n	80047da <HAL_GPIO_Init+0x12e>
 8004712:	4a8e      	ldr	r2, [pc, #568]	@ (800494c <HAL_GPIO_Init+0x2a0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d046      	beq.n	80047a6 <HAL_GPIO_Init+0xfa>
 8004718:	4a8c      	ldr	r2, [pc, #560]	@ (800494c <HAL_GPIO_Init+0x2a0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d85d      	bhi.n	80047da <HAL_GPIO_Init+0x12e>
 800471e:	2b12      	cmp	r3, #18
 8004720:	d82a      	bhi.n	8004778 <HAL_GPIO_Init+0xcc>
 8004722:	2b12      	cmp	r3, #18
 8004724:	d859      	bhi.n	80047da <HAL_GPIO_Init+0x12e>
 8004726:	a201      	add	r2, pc, #4	@ (adr r2, 800472c <HAL_GPIO_Init+0x80>)
 8004728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472c:	080047a7 	.word	0x080047a7
 8004730:	08004781 	.word	0x08004781
 8004734:	08004793 	.word	0x08004793
 8004738:	080047d5 	.word	0x080047d5
 800473c:	080047db 	.word	0x080047db
 8004740:	080047db 	.word	0x080047db
 8004744:	080047db 	.word	0x080047db
 8004748:	080047db 	.word	0x080047db
 800474c:	080047db 	.word	0x080047db
 8004750:	080047db 	.word	0x080047db
 8004754:	080047db 	.word	0x080047db
 8004758:	080047db 	.word	0x080047db
 800475c:	080047db 	.word	0x080047db
 8004760:	080047db 	.word	0x080047db
 8004764:	080047db 	.word	0x080047db
 8004768:	080047db 	.word	0x080047db
 800476c:	080047db 	.word	0x080047db
 8004770:	08004789 	.word	0x08004789
 8004774:	0800479d 	.word	0x0800479d
 8004778:	4a75      	ldr	r2, [pc, #468]	@ (8004950 <HAL_GPIO_Init+0x2a4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d013      	beq.n	80047a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800477e:	e02c      	b.n	80047da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	623b      	str	r3, [r7, #32]
          break;
 8004786:	e029      	b.n	80047dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	3304      	adds	r3, #4
 800478e:	623b      	str	r3, [r7, #32]
          break;
 8004790:	e024      	b.n	80047dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	3308      	adds	r3, #8
 8004798:	623b      	str	r3, [r7, #32]
          break;
 800479a:	e01f      	b.n	80047dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	330c      	adds	r3, #12
 80047a2:	623b      	str	r3, [r7, #32]
          break;
 80047a4:	e01a      	b.n	80047dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d102      	bne.n	80047b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80047ae:	2304      	movs	r3, #4
 80047b0:	623b      	str	r3, [r7, #32]
          break;
 80047b2:	e013      	b.n	80047dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d105      	bne.n	80047c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047bc:	2308      	movs	r3, #8
 80047be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	69fa      	ldr	r2, [r7, #28]
 80047c4:	611a      	str	r2, [r3, #16]
          break;
 80047c6:	e009      	b.n	80047dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047c8:	2308      	movs	r3, #8
 80047ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69fa      	ldr	r2, [r7, #28]
 80047d0:	615a      	str	r2, [r3, #20]
          break;
 80047d2:	e003      	b.n	80047dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80047d4:	2300      	movs	r3, #0
 80047d6:	623b      	str	r3, [r7, #32]
          break;
 80047d8:	e000      	b.n	80047dc <HAL_GPIO_Init+0x130>
          break;
 80047da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2bff      	cmp	r3, #255	@ 0xff
 80047e0:	d801      	bhi.n	80047e6 <HAL_GPIO_Init+0x13a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	e001      	b.n	80047ea <HAL_GPIO_Init+0x13e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3304      	adds	r3, #4
 80047ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2bff      	cmp	r3, #255	@ 0xff
 80047f0:	d802      	bhi.n	80047f8 <HAL_GPIO_Init+0x14c>
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	e002      	b.n	80047fe <HAL_GPIO_Init+0x152>
 80047f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fa:	3b08      	subs	r3, #8
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	210f      	movs	r1, #15
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	fa01 f303 	lsl.w	r3, r1, r3
 800480c:	43db      	mvns	r3, r3
 800480e:	401a      	ands	r2, r3
 8004810:	6a39      	ldr	r1, [r7, #32]
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	fa01 f303 	lsl.w	r3, r1, r3
 8004818:	431a      	orrs	r2, r3
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 80c1 	beq.w	80049ae <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800482c:	4b49      	ldr	r3, [pc, #292]	@ (8004954 <HAL_GPIO_Init+0x2a8>)
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	4a48      	ldr	r2, [pc, #288]	@ (8004954 <HAL_GPIO_Init+0x2a8>)
 8004832:	f043 0301 	orr.w	r3, r3, #1
 8004836:	6193      	str	r3, [r2, #24]
 8004838:	4b46      	ldr	r3, [pc, #280]	@ (8004954 <HAL_GPIO_Init+0x2a8>)
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	60bb      	str	r3, [r7, #8]
 8004842:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004844:	4a44      	ldr	r2, [pc, #272]	@ (8004958 <HAL_GPIO_Init+0x2ac>)
 8004846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004848:	089b      	lsrs	r3, r3, #2
 800484a:	3302      	adds	r3, #2
 800484c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004850:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	220f      	movs	r2, #15
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	43db      	mvns	r3, r3
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	4013      	ands	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a3c      	ldr	r2, [pc, #240]	@ (800495c <HAL_GPIO_Init+0x2b0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d01f      	beq.n	80048b0 <HAL_GPIO_Init+0x204>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a3b      	ldr	r2, [pc, #236]	@ (8004960 <HAL_GPIO_Init+0x2b4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d019      	beq.n	80048ac <HAL_GPIO_Init+0x200>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a3a      	ldr	r2, [pc, #232]	@ (8004964 <HAL_GPIO_Init+0x2b8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d013      	beq.n	80048a8 <HAL_GPIO_Init+0x1fc>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a39      	ldr	r2, [pc, #228]	@ (8004968 <HAL_GPIO_Init+0x2bc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d00d      	beq.n	80048a4 <HAL_GPIO_Init+0x1f8>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a38      	ldr	r2, [pc, #224]	@ (800496c <HAL_GPIO_Init+0x2c0>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d007      	beq.n	80048a0 <HAL_GPIO_Init+0x1f4>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a37      	ldr	r2, [pc, #220]	@ (8004970 <HAL_GPIO_Init+0x2c4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d101      	bne.n	800489c <HAL_GPIO_Init+0x1f0>
 8004898:	2305      	movs	r3, #5
 800489a:	e00a      	b.n	80048b2 <HAL_GPIO_Init+0x206>
 800489c:	2306      	movs	r3, #6
 800489e:	e008      	b.n	80048b2 <HAL_GPIO_Init+0x206>
 80048a0:	2304      	movs	r3, #4
 80048a2:	e006      	b.n	80048b2 <HAL_GPIO_Init+0x206>
 80048a4:	2303      	movs	r3, #3
 80048a6:	e004      	b.n	80048b2 <HAL_GPIO_Init+0x206>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e002      	b.n	80048b2 <HAL_GPIO_Init+0x206>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <HAL_GPIO_Init+0x206>
 80048b0:	2300      	movs	r3, #0
 80048b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048b4:	f002 0203 	and.w	r2, r2, #3
 80048b8:	0092      	lsls	r2, r2, #2
 80048ba:	4093      	lsls	r3, r2
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80048c2:	4925      	ldr	r1, [pc, #148]	@ (8004958 <HAL_GPIO_Init+0x2ac>)
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	089b      	lsrs	r3, r3, #2
 80048c8:	3302      	adds	r3, #2
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d006      	beq.n	80048ea <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80048dc:	4b25      	ldr	r3, [pc, #148]	@ (8004974 <HAL_GPIO_Init+0x2c8>)
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	4924      	ldr	r1, [pc, #144]	@ (8004974 <HAL_GPIO_Init+0x2c8>)
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	608b      	str	r3, [r1, #8]
 80048e8:	e006      	b.n	80048f8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80048ea:	4b22      	ldr	r3, [pc, #136]	@ (8004974 <HAL_GPIO_Init+0x2c8>)
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	43db      	mvns	r3, r3
 80048f2:	4920      	ldr	r1, [pc, #128]	@ (8004974 <HAL_GPIO_Init+0x2c8>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d006      	beq.n	8004912 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004904:	4b1b      	ldr	r3, [pc, #108]	@ (8004974 <HAL_GPIO_Init+0x2c8>)
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	491a      	ldr	r1, [pc, #104]	@ (8004974 <HAL_GPIO_Init+0x2c8>)
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	4313      	orrs	r3, r2
 800490e:	60cb      	str	r3, [r1, #12]
 8004910:	e006      	b.n	8004920 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004912:	4b18      	ldr	r3, [pc, #96]	@ (8004974 <HAL_GPIO_Init+0x2c8>)
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	43db      	mvns	r3, r3
 800491a:	4916      	ldr	r1, [pc, #88]	@ (8004974 <HAL_GPIO_Init+0x2c8>)
 800491c:	4013      	ands	r3, r2
 800491e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d025      	beq.n	8004978 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800492c:	4b11      	ldr	r3, [pc, #68]	@ (8004974 <HAL_GPIO_Init+0x2c8>)
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	4910      	ldr	r1, [pc, #64]	@ (8004974 <HAL_GPIO_Init+0x2c8>)
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	4313      	orrs	r3, r2
 8004936:	604b      	str	r3, [r1, #4]
 8004938:	e025      	b.n	8004986 <HAL_GPIO_Init+0x2da>
 800493a:	bf00      	nop
 800493c:	10320000 	.word	0x10320000
 8004940:	10310000 	.word	0x10310000
 8004944:	10220000 	.word	0x10220000
 8004948:	10210000 	.word	0x10210000
 800494c:	10120000 	.word	0x10120000
 8004950:	10110000 	.word	0x10110000
 8004954:	40021000 	.word	0x40021000
 8004958:	40010000 	.word	0x40010000
 800495c:	40010800 	.word	0x40010800
 8004960:	40010c00 	.word	0x40010c00
 8004964:	40011000 	.word	0x40011000
 8004968:	40011400 	.word	0x40011400
 800496c:	40011800 	.word	0x40011800
 8004970:	40011c00 	.word	0x40011c00
 8004974:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004978:	4b15      	ldr	r3, [pc, #84]	@ (80049d0 <HAL_GPIO_Init+0x324>)
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	43db      	mvns	r3, r3
 8004980:	4913      	ldr	r1, [pc, #76]	@ (80049d0 <HAL_GPIO_Init+0x324>)
 8004982:	4013      	ands	r3, r2
 8004984:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d006      	beq.n	80049a0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004992:	4b0f      	ldr	r3, [pc, #60]	@ (80049d0 <HAL_GPIO_Init+0x324>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	490e      	ldr	r1, [pc, #56]	@ (80049d0 <HAL_GPIO_Init+0x324>)
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	4313      	orrs	r3, r2
 800499c:	600b      	str	r3, [r1, #0]
 800499e:	e006      	b.n	80049ae <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80049a0:	4b0b      	ldr	r3, [pc, #44]	@ (80049d0 <HAL_GPIO_Init+0x324>)
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	43db      	mvns	r3, r3
 80049a8:	4909      	ldr	r1, [pc, #36]	@ (80049d0 <HAL_GPIO_Init+0x324>)
 80049aa:	4013      	ands	r3, r2
 80049ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80049ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b0:	3301      	adds	r3, #1
 80049b2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	fa22 f303 	lsr.w	r3, r2, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f47f ae7e 	bne.w	80046c0 <HAL_GPIO_Init+0x14>
  }
}
 80049c4:	bf00      	nop
 80049c6:	bf00      	nop
 80049c8:	372c      	adds	r7, #44	@ 0x2c
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bc80      	pop	{r7}
 80049ce:	4770      	bx	lr
 80049d0:	40010400 	.word	0x40010400

080049d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	887b      	ldrh	r3, [r7, #2]
 80049e6:	4013      	ands	r3, r2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049ec:	2301      	movs	r3, #1
 80049ee:	73fb      	strb	r3, [r7, #15]
 80049f0:	e001      	b.n	80049f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049f2:	2300      	movs	r3, #0
 80049f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr

08004a02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	807b      	strh	r3, [r7, #2]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a12:	787b      	ldrb	r3, [r7, #1]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a18:	887a      	ldrh	r2, [r7, #2]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004a1e:	e003      	b.n	8004a28 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a20:	887b      	ldrh	r3, [r7, #2]
 8004a22:	041a      	lsls	r2, r3, #16
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	611a      	str	r2, [r3, #16]
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bc80      	pop	{r7}
 8004a30:	4770      	bx	lr
	...

08004a34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e12b      	b.n	8004c9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fe fa36 	bl	8002ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2224      	movs	r2, #36	@ 0x24
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0201 	bic.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a98:	f000 fcda 	bl	8005450 <HAL_RCC_GetPCLK1Freq>
 8004a9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	4a81      	ldr	r2, [pc, #516]	@ (8004ca8 <HAL_I2C_Init+0x274>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d807      	bhi.n	8004ab8 <HAL_I2C_Init+0x84>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4a80      	ldr	r2, [pc, #512]	@ (8004cac <HAL_I2C_Init+0x278>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	bf94      	ite	ls
 8004ab0:	2301      	movls	r3, #1
 8004ab2:	2300      	movhi	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	e006      	b.n	8004ac6 <HAL_I2C_Init+0x92>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4a7d      	ldr	r2, [pc, #500]	@ (8004cb0 <HAL_I2C_Init+0x27c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	bf94      	ite	ls
 8004ac0:	2301      	movls	r3, #1
 8004ac2:	2300      	movhi	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e0e7      	b.n	8004c9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4a78      	ldr	r2, [pc, #480]	@ (8004cb4 <HAL_I2C_Init+0x280>)
 8004ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad6:	0c9b      	lsrs	r3, r3, #18
 8004ad8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	4a6a      	ldr	r2, [pc, #424]	@ (8004ca8 <HAL_I2C_Init+0x274>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d802      	bhi.n	8004b08 <HAL_I2C_Init+0xd4>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	3301      	adds	r3, #1
 8004b06:	e009      	b.n	8004b1c <HAL_I2C_Init+0xe8>
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004b0e:	fb02 f303 	mul.w	r3, r2, r3
 8004b12:	4a69      	ldr	r2, [pc, #420]	@ (8004cb8 <HAL_I2C_Init+0x284>)
 8004b14:	fba2 2303 	umull	r2, r3, r2, r3
 8004b18:	099b      	lsrs	r3, r3, #6
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6812      	ldr	r2, [r2, #0]
 8004b20:	430b      	orrs	r3, r1
 8004b22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004b2e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	495c      	ldr	r1, [pc, #368]	@ (8004ca8 <HAL_I2C_Init+0x274>)
 8004b38:	428b      	cmp	r3, r1
 8004b3a:	d819      	bhi.n	8004b70 <HAL_I2C_Init+0x13c>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	1e59      	subs	r1, r3, #1
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b4a:	1c59      	adds	r1, r3, #1
 8004b4c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004b50:	400b      	ands	r3, r1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <HAL_I2C_Init+0x138>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	1e59      	subs	r1, r3, #1
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b64:	3301      	adds	r3, #1
 8004b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b6a:	e051      	b.n	8004c10 <HAL_I2C_Init+0x1dc>
 8004b6c:	2304      	movs	r3, #4
 8004b6e:	e04f      	b.n	8004c10 <HAL_I2C_Init+0x1dc>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d111      	bne.n	8004b9c <HAL_I2C_Init+0x168>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	1e58      	subs	r0, r3, #1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6859      	ldr	r1, [r3, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	440b      	add	r3, r1
 8004b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	bf0c      	ite	eq
 8004b94:	2301      	moveq	r3, #1
 8004b96:	2300      	movne	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	e012      	b.n	8004bc2 <HAL_I2C_Init+0x18e>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	1e58      	subs	r0, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6859      	ldr	r1, [r3, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	0099      	lsls	r1, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	bf0c      	ite	eq
 8004bbc:	2301      	moveq	r3, #1
 8004bbe:	2300      	movne	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <HAL_I2C_Init+0x196>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e022      	b.n	8004c10 <HAL_I2C_Init+0x1dc>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10e      	bne.n	8004bf0 <HAL_I2C_Init+0x1bc>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	1e58      	subs	r0, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6859      	ldr	r1, [r3, #4]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	440b      	add	r3, r1
 8004be0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004be4:	3301      	adds	r3, #1
 8004be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bee:	e00f      	b.n	8004c10 <HAL_I2C_Init+0x1dc>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	1e58      	subs	r0, r3, #1
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6859      	ldr	r1, [r3, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	0099      	lsls	r1, r3, #2
 8004c00:	440b      	add	r3, r1
 8004c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c06:	3301      	adds	r3, #1
 8004c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	6809      	ldr	r1, [r1, #0]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69da      	ldr	r2, [r3, #28]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004c3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6911      	ldr	r1, [r2, #16]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	68d2      	ldr	r2, [r2, #12]
 8004c4a:	4311      	orrs	r1, r2
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6812      	ldr	r2, [r2, #0]
 8004c50:	430b      	orrs	r3, r1
 8004c52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695a      	ldr	r2, [r3, #20]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	000186a0 	.word	0x000186a0
 8004cac:	001e847f 	.word	0x001e847f
 8004cb0:	003d08ff 	.word	0x003d08ff
 8004cb4:	431bde83 	.word	0x431bde83
 8004cb8:	10624dd3 	.word	0x10624dd3

08004cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e272      	b.n	80051b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 8087 	beq.w	8004dea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cdc:	4b92      	ldr	r3, [pc, #584]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f003 030c 	and.w	r3, r3, #12
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d00c      	beq.n	8004d02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ce8:	4b8f      	ldr	r3, [pc, #572]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f003 030c 	and.w	r3, r3, #12
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d112      	bne.n	8004d1a <HAL_RCC_OscConfig+0x5e>
 8004cf4:	4b8c      	ldr	r3, [pc, #560]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d00:	d10b      	bne.n	8004d1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d02:	4b89      	ldr	r3, [pc, #548]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d06c      	beq.n	8004de8 <HAL_RCC_OscConfig+0x12c>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d168      	bne.n	8004de8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e24c      	b.n	80051b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d22:	d106      	bne.n	8004d32 <HAL_RCC_OscConfig+0x76>
 8004d24:	4b80      	ldr	r3, [pc, #512]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a7f      	ldr	r2, [pc, #508]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	e02e      	b.n	8004d90 <HAL_RCC_OscConfig+0xd4>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10c      	bne.n	8004d54 <HAL_RCC_OscConfig+0x98>
 8004d3a:	4b7b      	ldr	r3, [pc, #492]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a7a      	ldr	r2, [pc, #488]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	4b78      	ldr	r3, [pc, #480]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a77      	ldr	r2, [pc, #476]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	e01d      	b.n	8004d90 <HAL_RCC_OscConfig+0xd4>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d5c:	d10c      	bne.n	8004d78 <HAL_RCC_OscConfig+0xbc>
 8004d5e:	4b72      	ldr	r3, [pc, #456]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a71      	ldr	r2, [pc, #452]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	4b6f      	ldr	r3, [pc, #444]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a6e      	ldr	r2, [pc, #440]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	e00b      	b.n	8004d90 <HAL_RCC_OscConfig+0xd4>
 8004d78:	4b6b      	ldr	r3, [pc, #428]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a6a      	ldr	r2, [pc, #424]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	4b68      	ldr	r3, [pc, #416]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a67      	ldr	r2, [pc, #412]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004d8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d013      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d98:	f7fe ff56 	bl	8003c48 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da0:	f7fe ff52 	bl	8003c48 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b64      	cmp	r3, #100	@ 0x64
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e200      	b.n	80051b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004db2:	4b5d      	ldr	r3, [pc, #372]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0xe4>
 8004dbe:	e014      	b.n	8004dea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc0:	f7fe ff42 	bl	8003c48 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc8:	f7fe ff3e 	bl	8003c48 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b64      	cmp	r3, #100	@ 0x64
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e1ec      	b.n	80051b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dda:	4b53      	ldr	r3, [pc, #332]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x10c>
 8004de6:	e000      	b.n	8004dea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d063      	beq.n	8004ebe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004df6:	4b4c      	ldr	r3, [pc, #304]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f003 030c 	and.w	r3, r3, #12
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00b      	beq.n	8004e1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e02:	4b49      	ldr	r3, [pc, #292]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f003 030c 	and.w	r3, r3, #12
 8004e0a:	2b08      	cmp	r3, #8
 8004e0c:	d11c      	bne.n	8004e48 <HAL_RCC_OscConfig+0x18c>
 8004e0e:	4b46      	ldr	r3, [pc, #280]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d116      	bne.n	8004e48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e1a:	4b43      	ldr	r3, [pc, #268]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d005      	beq.n	8004e32 <HAL_RCC_OscConfig+0x176>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d001      	beq.n	8004e32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e1c0      	b.n	80051b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e32:	4b3d      	ldr	r3, [pc, #244]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	4939      	ldr	r1, [pc, #228]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e46:	e03a      	b.n	8004ebe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d020      	beq.n	8004e92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e50:	4b36      	ldr	r3, [pc, #216]	@ (8004f2c <HAL_RCC_OscConfig+0x270>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e56:	f7fe fef7 	bl	8003c48 <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e5e:	f7fe fef3 	bl	8003c48 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e1a1      	b.n	80051b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e70:	4b2d      	ldr	r3, [pc, #180]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0f0      	beq.n	8004e5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	4927      	ldr	r1, [pc, #156]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	600b      	str	r3, [r1, #0]
 8004e90:	e015      	b.n	8004ebe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e92:	4b26      	ldr	r3, [pc, #152]	@ (8004f2c <HAL_RCC_OscConfig+0x270>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e98:	f7fe fed6 	bl	8003c48 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea0:	f7fe fed2 	bl	8003c48 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e180      	b.n	80051b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f0      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d03a      	beq.n	8004f40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d019      	beq.n	8004f06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ed2:	4b17      	ldr	r3, [pc, #92]	@ (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed8:	f7fe feb6 	bl	8003c48 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee0:	f7fe feb2 	bl	8003c48 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e160      	b.n	80051b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8004f28 <HAL_RCC_OscConfig+0x26c>)
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0f0      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004efe:	2001      	movs	r0, #1
 8004f00:	f000 face 	bl	80054a0 <RCC_Delay>
 8004f04:	e01c      	b.n	8004f40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f06:	4b0a      	ldr	r3, [pc, #40]	@ (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f0c:	f7fe fe9c 	bl	8003c48 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f12:	e00f      	b.n	8004f34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f14:	f7fe fe98 	bl	8003c48 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d908      	bls.n	8004f34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e146      	b.n	80051b4 <HAL_RCC_OscConfig+0x4f8>
 8004f26:	bf00      	nop
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	42420000 	.word	0x42420000
 8004f30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f34:	4b92      	ldr	r3, [pc, #584]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8004f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e9      	bne.n	8004f14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80a6 	beq.w	800509a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f52:	4b8b      	ldr	r3, [pc, #556]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10d      	bne.n	8004f7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f5e:	4b88      	ldr	r3, [pc, #544]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	4a87      	ldr	r2, [pc, #540]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8004f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f68:	61d3      	str	r3, [r2, #28]
 8004f6a:	4b85      	ldr	r3, [pc, #532]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f72:	60bb      	str	r3, [r7, #8]
 8004f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f76:	2301      	movs	r3, #1
 8004f78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f7a:	4b82      	ldr	r3, [pc, #520]	@ (8005184 <HAL_RCC_OscConfig+0x4c8>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d118      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f86:	4b7f      	ldr	r3, [pc, #508]	@ (8005184 <HAL_RCC_OscConfig+0x4c8>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a7e      	ldr	r2, [pc, #504]	@ (8005184 <HAL_RCC_OscConfig+0x4c8>)
 8004f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f92:	f7fe fe59 	bl	8003c48 <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f98:	e008      	b.n	8004fac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f9a:	f7fe fe55 	bl	8003c48 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b64      	cmp	r3, #100	@ 0x64
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e103      	b.n	80051b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fac:	4b75      	ldr	r3, [pc, #468]	@ (8005184 <HAL_RCC_OscConfig+0x4c8>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0f0      	beq.n	8004f9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d106      	bne.n	8004fce <HAL_RCC_OscConfig+0x312>
 8004fc0:	4b6f      	ldr	r3, [pc, #444]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	4a6e      	ldr	r2, [pc, #440]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8004fc6:	f043 0301 	orr.w	r3, r3, #1
 8004fca:	6213      	str	r3, [r2, #32]
 8004fcc:	e02d      	b.n	800502a <HAL_RCC_OscConfig+0x36e>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10c      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x334>
 8004fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	4a69      	ldr	r2, [pc, #420]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8004fdc:	f023 0301 	bic.w	r3, r3, #1
 8004fe0:	6213      	str	r3, [r2, #32]
 8004fe2:	4b67      	ldr	r3, [pc, #412]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	4a66      	ldr	r2, [pc, #408]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8004fe8:	f023 0304 	bic.w	r3, r3, #4
 8004fec:	6213      	str	r3, [r2, #32]
 8004fee:	e01c      	b.n	800502a <HAL_RCC_OscConfig+0x36e>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	2b05      	cmp	r3, #5
 8004ff6:	d10c      	bne.n	8005012 <HAL_RCC_OscConfig+0x356>
 8004ff8:	4b61      	ldr	r3, [pc, #388]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	4a60      	ldr	r2, [pc, #384]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8004ffe:	f043 0304 	orr.w	r3, r3, #4
 8005002:	6213      	str	r3, [r2, #32]
 8005004:	4b5e      	ldr	r3, [pc, #376]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	4a5d      	ldr	r2, [pc, #372]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 800500a:	f043 0301 	orr.w	r3, r3, #1
 800500e:	6213      	str	r3, [r2, #32]
 8005010:	e00b      	b.n	800502a <HAL_RCC_OscConfig+0x36e>
 8005012:	4b5b      	ldr	r3, [pc, #364]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	4a5a      	ldr	r2, [pc, #360]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8005018:	f023 0301 	bic.w	r3, r3, #1
 800501c:	6213      	str	r3, [r2, #32]
 800501e:	4b58      	ldr	r3, [pc, #352]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	4a57      	ldr	r2, [pc, #348]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8005024:	f023 0304 	bic.w	r3, r3, #4
 8005028:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d015      	beq.n	800505e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005032:	f7fe fe09 	bl	8003c48 <HAL_GetTick>
 8005036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005038:	e00a      	b.n	8005050 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800503a:	f7fe fe05 	bl	8003c48 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005048:	4293      	cmp	r3, r2
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e0b1      	b.n	80051b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005050:	4b4b      	ldr	r3, [pc, #300]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d0ee      	beq.n	800503a <HAL_RCC_OscConfig+0x37e>
 800505c:	e014      	b.n	8005088 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800505e:	f7fe fdf3 	bl	8003c48 <HAL_GetTick>
 8005062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005064:	e00a      	b.n	800507c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005066:	f7fe fdef 	bl	8003c48 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005074:	4293      	cmp	r3, r2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e09b      	b.n	80051b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800507c:	4b40      	ldr	r3, [pc, #256]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1ee      	bne.n	8005066 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005088:	7dfb      	ldrb	r3, [r7, #23]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d105      	bne.n	800509a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800508e:	4b3c      	ldr	r3, [pc, #240]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	4a3b      	ldr	r2, [pc, #236]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8005094:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005098:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 8087 	beq.w	80051b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050a4:	4b36      	ldr	r3, [pc, #216]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f003 030c 	and.w	r3, r3, #12
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d061      	beq.n	8005174 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d146      	bne.n	8005146 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b8:	4b33      	ldr	r3, [pc, #204]	@ (8005188 <HAL_RCC_OscConfig+0x4cc>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050be:	f7fe fdc3 	bl	8003c48 <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050c4:	e008      	b.n	80050d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c6:	f7fe fdbf 	bl	8003c48 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e06d      	b.n	80051b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050d8:	4b29      	ldr	r3, [pc, #164]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1f0      	bne.n	80050c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050ec:	d108      	bne.n	8005100 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050ee:	4b24      	ldr	r3, [pc, #144]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	4921      	ldr	r1, [pc, #132]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005100:	4b1f      	ldr	r3, [pc, #124]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a19      	ldr	r1, [r3, #32]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	430b      	orrs	r3, r1
 8005112:	491b      	ldr	r1, [pc, #108]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8005114:	4313      	orrs	r3, r2
 8005116:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005118:	4b1b      	ldr	r3, [pc, #108]	@ (8005188 <HAL_RCC_OscConfig+0x4cc>)
 800511a:	2201      	movs	r2, #1
 800511c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511e:	f7fe fd93 	bl	8003c48 <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005124:	e008      	b.n	8005138 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005126:	f7fe fd8f 	bl	8003c48 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e03d      	b.n	80051b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005138:	4b11      	ldr	r3, [pc, #68]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0f0      	beq.n	8005126 <HAL_RCC_OscConfig+0x46a>
 8005144:	e035      	b.n	80051b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005146:	4b10      	ldr	r3, [pc, #64]	@ (8005188 <HAL_RCC_OscConfig+0x4cc>)
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514c:	f7fe fd7c 	bl	8003c48 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005154:	f7fe fd78 	bl	8003c48 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e026      	b.n	80051b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005166:	4b06      	ldr	r3, [pc, #24]	@ (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f0      	bne.n	8005154 <HAL_RCC_OscConfig+0x498>
 8005172:	e01e      	b.n	80051b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d107      	bne.n	800518c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e019      	b.n	80051b4 <HAL_RCC_OscConfig+0x4f8>
 8005180:	40021000 	.word	0x40021000
 8005184:	40007000 	.word	0x40007000
 8005188:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800518c:	4b0b      	ldr	r3, [pc, #44]	@ (80051bc <HAL_RCC_OscConfig+0x500>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	429a      	cmp	r2, r3
 800519e:	d106      	bne.n	80051ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d001      	beq.n	80051b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e000      	b.n	80051b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40021000 	.word	0x40021000

080051c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0d0      	b.n	8005376 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051d4:	4b6a      	ldr	r3, [pc, #424]	@ (8005380 <HAL_RCC_ClockConfig+0x1c0>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d910      	bls.n	8005204 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e2:	4b67      	ldr	r3, [pc, #412]	@ (8005380 <HAL_RCC_ClockConfig+0x1c0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f023 0207 	bic.w	r2, r3, #7
 80051ea:	4965      	ldr	r1, [pc, #404]	@ (8005380 <HAL_RCC_ClockConfig+0x1c0>)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f2:	4b63      	ldr	r3, [pc, #396]	@ (8005380 <HAL_RCC_ClockConfig+0x1c0>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d001      	beq.n	8005204 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e0b8      	b.n	8005376 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d020      	beq.n	8005252 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800521c:	4b59      	ldr	r3, [pc, #356]	@ (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	4a58      	ldr	r2, [pc, #352]	@ (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 8005222:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005226:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005234:	4b53      	ldr	r3, [pc, #332]	@ (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	4a52      	ldr	r2, [pc, #328]	@ (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 800523a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800523e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005240:	4b50      	ldr	r3, [pc, #320]	@ (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	494d      	ldr	r1, [pc, #308]	@ (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 800524e:	4313      	orrs	r3, r2
 8005250:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d040      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d107      	bne.n	8005276 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005266:	4b47      	ldr	r3, [pc, #284]	@ (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d115      	bne.n	800529e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e07f      	b.n	8005376 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d107      	bne.n	800528e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800527e:	4b41      	ldr	r3, [pc, #260]	@ (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e073      	b.n	8005376 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800528e:	4b3d      	ldr	r3, [pc, #244]	@ (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e06b      	b.n	8005376 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800529e:	4b39      	ldr	r3, [pc, #228]	@ (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f023 0203 	bic.w	r2, r3, #3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	4936      	ldr	r1, [pc, #216]	@ (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052b0:	f7fe fcca 	bl	8003c48 <HAL_GetTick>
 80052b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b6:	e00a      	b.n	80052ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052b8:	f7fe fcc6 	bl	8003c48 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e053      	b.n	8005376 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ce:	4b2d      	ldr	r3, [pc, #180]	@ (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f003 020c 	and.w	r2, r3, #12
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	429a      	cmp	r2, r3
 80052de:	d1eb      	bne.n	80052b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052e0:	4b27      	ldr	r3, [pc, #156]	@ (8005380 <HAL_RCC_ClockConfig+0x1c0>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d210      	bcs.n	8005310 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ee:	4b24      	ldr	r3, [pc, #144]	@ (8005380 <HAL_RCC_ClockConfig+0x1c0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f023 0207 	bic.w	r2, r3, #7
 80052f6:	4922      	ldr	r1, [pc, #136]	@ (8005380 <HAL_RCC_ClockConfig+0x1c0>)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fe:	4b20      	ldr	r3, [pc, #128]	@ (8005380 <HAL_RCC_ClockConfig+0x1c0>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d001      	beq.n	8005310 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e032      	b.n	8005376 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	d008      	beq.n	800532e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800531c:	4b19      	ldr	r3, [pc, #100]	@ (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	4916      	ldr	r1, [pc, #88]	@ (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 800532a:	4313      	orrs	r3, r2
 800532c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0308 	and.w	r3, r3, #8
 8005336:	2b00      	cmp	r3, #0
 8005338:	d009      	beq.n	800534e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800533a:	4b12      	ldr	r3, [pc, #72]	@ (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	490e      	ldr	r1, [pc, #56]	@ (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 800534a:	4313      	orrs	r3, r2
 800534c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800534e:	f000 f821 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8005352:	4602      	mov	r2, r0
 8005354:	4b0b      	ldr	r3, [pc, #44]	@ (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	091b      	lsrs	r3, r3, #4
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	490a      	ldr	r1, [pc, #40]	@ (8005388 <HAL_RCC_ClockConfig+0x1c8>)
 8005360:	5ccb      	ldrb	r3, [r1, r3]
 8005362:	fa22 f303 	lsr.w	r3, r2, r3
 8005366:	4a09      	ldr	r2, [pc, #36]	@ (800538c <HAL_RCC_ClockConfig+0x1cc>)
 8005368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800536a:	4b09      	ldr	r3, [pc, #36]	@ (8005390 <HAL_RCC_ClockConfig+0x1d0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f7fe fc28 	bl	8003bc4 <HAL_InitTick>

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	40022000 	.word	0x40022000
 8005384:	40021000 	.word	0x40021000
 8005388:	0800ba48 	.word	0x0800ba48
 800538c:	2000004c 	.word	0x2000004c
 8005390:	20000050 	.word	0x20000050

08005394 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	2300      	movs	r3, #0
 80053a0:	60bb      	str	r3, [r7, #8]
 80053a2:	2300      	movs	r3, #0
 80053a4:	617b      	str	r3, [r7, #20]
 80053a6:	2300      	movs	r3, #0
 80053a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80053ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x94>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f003 030c 	and.w	r3, r3, #12
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d002      	beq.n	80053c4 <HAL_RCC_GetSysClockFreq+0x30>
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d003      	beq.n	80053ca <HAL_RCC_GetSysClockFreq+0x36>
 80053c2:	e027      	b.n	8005414 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053c4:	4b19      	ldr	r3, [pc, #100]	@ (800542c <HAL_RCC_GetSysClockFreq+0x98>)
 80053c6:	613b      	str	r3, [r7, #16]
      break;
 80053c8:	e027      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	0c9b      	lsrs	r3, r3, #18
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	4a17      	ldr	r2, [pc, #92]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x9c>)
 80053d4:	5cd3      	ldrb	r3, [r2, r3]
 80053d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d010      	beq.n	8005404 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053e2:	4b11      	ldr	r3, [pc, #68]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x94>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	0c5b      	lsrs	r3, r3, #17
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	4a11      	ldr	r2, [pc, #68]	@ (8005434 <HAL_RCC_GetSysClockFreq+0xa0>)
 80053ee:	5cd3      	ldrb	r3, [r2, r3]
 80053f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a0d      	ldr	r2, [pc, #52]	@ (800542c <HAL_RCC_GetSysClockFreq+0x98>)
 80053f6:	fb03 f202 	mul.w	r2, r3, r2
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	e004      	b.n	800540e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a0c      	ldr	r2, [pc, #48]	@ (8005438 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005408:	fb02 f303 	mul.w	r3, r2, r3
 800540c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	613b      	str	r3, [r7, #16]
      break;
 8005412:	e002      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005414:	4b05      	ldr	r3, [pc, #20]	@ (800542c <HAL_RCC_GetSysClockFreq+0x98>)
 8005416:	613b      	str	r3, [r7, #16]
      break;
 8005418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800541a:	693b      	ldr	r3, [r7, #16]
}
 800541c:	4618      	mov	r0, r3
 800541e:	371c      	adds	r7, #28
 8005420:	46bd      	mov	sp, r7
 8005422:	bc80      	pop	{r7}
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	40021000 	.word	0x40021000
 800542c:	007a1200 	.word	0x007a1200
 8005430:	0800ba60 	.word	0x0800ba60
 8005434:	0800ba70 	.word	0x0800ba70
 8005438:	003d0900 	.word	0x003d0900

0800543c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005440:	4b02      	ldr	r3, [pc, #8]	@ (800544c <HAL_RCC_GetHCLKFreq+0x10>)
 8005442:	681b      	ldr	r3, [r3, #0]
}
 8005444:	4618      	mov	r0, r3
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr
 800544c:	2000004c 	.word	0x2000004c

08005450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005454:	f7ff fff2 	bl	800543c <HAL_RCC_GetHCLKFreq>
 8005458:	4602      	mov	r2, r0
 800545a:	4b05      	ldr	r3, [pc, #20]	@ (8005470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	0a1b      	lsrs	r3, r3, #8
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	4903      	ldr	r1, [pc, #12]	@ (8005474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005466:	5ccb      	ldrb	r3, [r1, r3]
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800546c:	4618      	mov	r0, r3
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40021000 	.word	0x40021000
 8005474:	0800ba58 	.word	0x0800ba58

08005478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800547c:	f7ff ffde 	bl	800543c <HAL_RCC_GetHCLKFreq>
 8005480:	4602      	mov	r2, r0
 8005482:	4b05      	ldr	r3, [pc, #20]	@ (8005498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	0adb      	lsrs	r3, r3, #11
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	4903      	ldr	r1, [pc, #12]	@ (800549c <HAL_RCC_GetPCLK2Freq+0x24>)
 800548e:	5ccb      	ldrb	r3, [r1, r3]
 8005490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005494:	4618      	mov	r0, r3
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40021000 	.word	0x40021000
 800549c:	0800ba58 	.word	0x0800ba58

080054a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80054a8:	4b0a      	ldr	r3, [pc, #40]	@ (80054d4 <RCC_Delay+0x34>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a0a      	ldr	r2, [pc, #40]	@ (80054d8 <RCC_Delay+0x38>)
 80054ae:	fba2 2303 	umull	r2, r3, r2, r3
 80054b2:	0a5b      	lsrs	r3, r3, #9
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	fb02 f303 	mul.w	r3, r2, r3
 80054ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80054bc:	bf00      	nop
  }
  while (Delay --);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	1e5a      	subs	r2, r3, #1
 80054c2:	60fa      	str	r2, [r7, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1f9      	bne.n	80054bc <RCC_Delay+0x1c>
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr
 80054d4:	2000004c 	.word	0x2000004c
 80054d8:	10624dd3 	.word	0x10624dd3

080054dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e076      	b.n	80055dc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d108      	bne.n	8005508 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054fe:	d009      	beq.n	8005514 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	61da      	str	r2, [r3, #28]
 8005506:	e005      	b.n	8005514 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7fd fdac 	bl	800308c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800554a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800555c:	431a      	orrs	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005566:	431a      	orrs	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005598:	ea42 0103 	orr.w	r1, r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	0c1a      	lsrs	r2, r3, #16
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f002 0204 	and.w	r2, r2, #4
 80055ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	69da      	ldr	r2, [r3, #28]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	4613      	mov	r3, r2
 80055f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055f4:	2300      	movs	r3, #0
 80055f6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <HAL_SPI_Transmit+0x22>
 8005602:	2302      	movs	r3, #2
 8005604:	e12d      	b.n	8005862 <HAL_SPI_Transmit+0x27e>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800560e:	f7fe fb1b 	bl	8003c48 <HAL_GetTick>
 8005612:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005614:	88fb      	ldrh	r3, [r7, #6]
 8005616:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b01      	cmp	r3, #1
 8005622:	d002      	beq.n	800562a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005624:	2302      	movs	r3, #2
 8005626:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005628:	e116      	b.n	8005858 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <HAL_SPI_Transmit+0x52>
 8005630:	88fb      	ldrh	r3, [r7, #6]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d102      	bne.n	800563c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	77fb      	strb	r3, [r7, #31]
    goto error;
 800563a:	e10d      	b.n	8005858 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2203      	movs	r2, #3
 8005640:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	88fa      	ldrh	r2, [r7, #6]
 8005654:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	88fa      	ldrh	r2, [r7, #6]
 800565a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005682:	d10f      	bne.n	80056a4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005692:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ae:	2b40      	cmp	r3, #64	@ 0x40
 80056b0:	d007      	beq.n	80056c2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056ca:	d14f      	bne.n	800576c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <HAL_SPI_Transmit+0xf6>
 80056d4:	8afb      	ldrh	r3, [r7, #22]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d142      	bne.n	8005760 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056de:	881a      	ldrh	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ea:	1c9a      	adds	r2, r3, #2
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056fe:	e02f      	b.n	8005760 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b02      	cmp	r3, #2
 800570c:	d112      	bne.n	8005734 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005712:	881a      	ldrh	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800571e:	1c9a      	adds	r2, r3, #2
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005728:	b29b      	uxth	r3, r3
 800572a:	3b01      	subs	r3, #1
 800572c:	b29a      	uxth	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005732:	e015      	b.n	8005760 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005734:	f7fe fa88 	bl	8003c48 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d803      	bhi.n	800574c <HAL_SPI_Transmit+0x168>
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574a:	d102      	bne.n	8005752 <HAL_SPI_Transmit+0x16e>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d106      	bne.n	8005760 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800575e:	e07b      	b.n	8005858 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1ca      	bne.n	8005700 <HAL_SPI_Transmit+0x11c>
 800576a:	e050      	b.n	800580e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <HAL_SPI_Transmit+0x196>
 8005774:	8afb      	ldrh	r3, [r7, #22]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d144      	bne.n	8005804 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	330c      	adds	r3, #12
 8005784:	7812      	ldrb	r2, [r2, #0]
 8005786:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005796:	b29b      	uxth	r3, r3
 8005798:	3b01      	subs	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057a0:	e030      	b.n	8005804 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d113      	bne.n	80057d8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	330c      	adds	r3, #12
 80057ba:	7812      	ldrb	r2, [r2, #0]
 80057bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80057d6:	e015      	b.n	8005804 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057d8:	f7fe fa36 	bl	8003c48 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d803      	bhi.n	80057f0 <HAL_SPI_Transmit+0x20c>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ee:	d102      	bne.n	80057f6 <HAL_SPI_Transmit+0x212>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d106      	bne.n	8005804 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005802:	e029      	b.n	8005858 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005808:	b29b      	uxth	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1c9      	bne.n	80057a2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	6839      	ldr	r1, [r7, #0]
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 fbcc 	bl	8005fb0 <SPI_EndRxTxTransaction>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2220      	movs	r2, #32
 8005822:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10a      	bne.n	8005842 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800582c:	2300      	movs	r3, #0
 800582e:	613b      	str	r3, [r7, #16]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	613b      	str	r3, [r7, #16]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	613b      	str	r3, [r7, #16]
 8005840:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	77fb      	strb	r3, [r7, #31]
 800584e:	e003      	b.n	8005858 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005860:	7ffb      	ldrb	r3, [r7, #31]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3720      	adds	r7, #32
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b088      	sub	sp, #32
 800586e:	af02      	add	r7, sp, #8
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	603b      	str	r3, [r7, #0]
 8005876:	4613      	mov	r3, r2
 8005878:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b01      	cmp	r3, #1
 8005888:	d002      	beq.n	8005890 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800588a:	2302      	movs	r3, #2
 800588c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800588e:	e0fb      	b.n	8005a88 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005898:	d112      	bne.n	80058c0 <HAL_SPI_Receive+0x56>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10e      	bne.n	80058c0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2204      	movs	r2, #4
 80058a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80058aa:	88fa      	ldrh	r2, [r7, #6]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	4613      	mov	r3, r2
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	68b9      	ldr	r1, [r7, #8]
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 f8ef 	bl	8005a9a <HAL_SPI_TransmitReceive>
 80058bc:	4603      	mov	r3, r0
 80058be:	e0e8      	b.n	8005a92 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d101      	bne.n	80058ce <HAL_SPI_Receive+0x64>
 80058ca:	2302      	movs	r3, #2
 80058cc:	e0e1      	b.n	8005a92 <HAL_SPI_Receive+0x228>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058d6:	f7fe f9b7 	bl	8003c48 <HAL_GetTick>
 80058da:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <HAL_SPI_Receive+0x7e>
 80058e2:	88fb      	ldrh	r3, [r7, #6]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d102      	bne.n	80058ee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058ec:	e0cc      	b.n	8005a88 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2204      	movs	r2, #4
 80058f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	88fa      	ldrh	r2, [r7, #6]
 8005906:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	88fa      	ldrh	r2, [r7, #6]
 800590c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005934:	d10f      	bne.n	8005956 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005944:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005954:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005960:	2b40      	cmp	r3, #64	@ 0x40
 8005962:	d007      	beq.n	8005974 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005972:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d16a      	bne.n	8005a52 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800597c:	e032      	b.n	80059e4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b01      	cmp	r3, #1
 800598a:	d115      	bne.n	80059b8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f103 020c 	add.w	r2, r3, #12
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005998:	7812      	ldrb	r2, [r2, #0]
 800599a:	b2d2      	uxtb	r2, r2
 800599c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80059b6:	e015      	b.n	80059e4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059b8:	f7fe f946 	bl	8003c48 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d803      	bhi.n	80059d0 <HAL_SPI_Receive+0x166>
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ce:	d102      	bne.n	80059d6 <HAL_SPI_Receive+0x16c>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80059e2:	e051      	b.n	8005a88 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1c7      	bne.n	800597e <HAL_SPI_Receive+0x114>
 80059ee:	e035      	b.n	8005a5c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d113      	bne.n	8005a26 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a08:	b292      	uxth	r2, r2
 8005a0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a10:	1c9a      	adds	r2, r3, #2
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a24:	e015      	b.n	8005a52 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a26:	f7fe f90f 	bl	8003c48 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d803      	bhi.n	8005a3e <HAL_SPI_Receive+0x1d4>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3c:	d102      	bne.n	8005a44 <HAL_SPI_Receive+0x1da>
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d106      	bne.n	8005a52 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005a50:	e01a      	b.n	8005a88 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1c9      	bne.n	80059f0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	6839      	ldr	r1, [r7, #0]
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 fa53 	bl	8005f0c <SPI_EndRxTransaction>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	75fb      	strb	r3, [r7, #23]
 8005a7e:	e003      	b.n	8005a88 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b08c      	sub	sp, #48	@ 0x30
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	60f8      	str	r0, [r7, #12]
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	607a      	str	r2, [r7, #4]
 8005aa6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_SPI_TransmitReceive+0x26>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e198      	b.n	8005df2 <HAL_SPI_TransmitReceive+0x358>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ac8:	f7fe f8be 	bl	8003c48 <HAL_GetTick>
 8005acc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ad4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005ade:	887b      	ldrh	r3, [r7, #2]
 8005ae0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ae2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d00f      	beq.n	8005b0a <HAL_SPI_TransmitReceive+0x70>
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005af0:	d107      	bne.n	8005b02 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d103      	bne.n	8005b02 <HAL_SPI_TransmitReceive+0x68>
 8005afa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d003      	beq.n	8005b0a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005b02:	2302      	movs	r3, #2
 8005b04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005b08:	e16d      	b.n	8005de6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d005      	beq.n	8005b1c <HAL_SPI_TransmitReceive+0x82>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <HAL_SPI_TransmitReceive+0x82>
 8005b16:	887b      	ldrh	r3, [r7, #2]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d103      	bne.n	8005b24 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005b22:	e160      	b.n	8005de6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d003      	beq.n	8005b38 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2205      	movs	r2, #5
 8005b34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	887a      	ldrh	r2, [r7, #2]
 8005b48:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	887a      	ldrh	r2, [r7, #2]
 8005b4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	887a      	ldrh	r2, [r7, #2]
 8005b5a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	887a      	ldrh	r2, [r7, #2]
 8005b60:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b78:	2b40      	cmp	r3, #64	@ 0x40
 8005b7a:	d007      	beq.n	8005b8c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b94:	d17c      	bne.n	8005c90 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <HAL_SPI_TransmitReceive+0x10a>
 8005b9e:	8b7b      	ldrh	r3, [r7, #26]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d16a      	bne.n	8005c7a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba8:	881a      	ldrh	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb4:	1c9a      	adds	r2, r3, #2
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bc8:	e057      	b.n	8005c7a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d11b      	bne.n	8005c10 <HAL_SPI_TransmitReceive+0x176>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d016      	beq.n	8005c10 <HAL_SPI_TransmitReceive+0x176>
 8005be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d113      	bne.n	8005c10 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bec:	881a      	ldrh	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf8:	1c9a      	adds	r2, r3, #2
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d119      	bne.n	8005c52 <HAL_SPI_TransmitReceive+0x1b8>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d014      	beq.n	8005c52 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c32:	b292      	uxth	r2, r2
 8005c34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c3a:	1c9a      	adds	r2, r3, #2
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c52:	f7fd fff9 	bl	8003c48 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d80b      	bhi.n	8005c7a <HAL_SPI_TransmitReceive+0x1e0>
 8005c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c68:	d007      	beq.n	8005c7a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005c78:	e0b5      	b.n	8005de6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1a2      	bne.n	8005bca <HAL_SPI_TransmitReceive+0x130>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d19d      	bne.n	8005bca <HAL_SPI_TransmitReceive+0x130>
 8005c8e:	e080      	b.n	8005d92 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <HAL_SPI_TransmitReceive+0x204>
 8005c98:	8b7b      	ldrh	r3, [r7, #26]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d16f      	bne.n	8005d7e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	330c      	adds	r3, #12
 8005ca8:	7812      	ldrb	r2, [r2, #0]
 8005caa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cc4:	e05b      	b.n	8005d7e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d11c      	bne.n	8005d0e <HAL_SPI_TransmitReceive+0x274>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d017      	beq.n	8005d0e <HAL_SPI_TransmitReceive+0x274>
 8005cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d114      	bne.n	8005d0e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	330c      	adds	r3, #12
 8005cee:	7812      	ldrb	r2, [r2, #0]
 8005cf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	3b01      	subs	r3, #1
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d119      	bne.n	8005d50 <HAL_SPI_TransmitReceive+0x2b6>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d014      	beq.n	8005d50 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d30:	b2d2      	uxtb	r2, r2
 8005d32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d38:	1c5a      	adds	r2, r3, #1
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	3b01      	subs	r3, #1
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d50:	f7fd ff7a 	bl	8003c48 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d803      	bhi.n	8005d68 <HAL_SPI_TransmitReceive+0x2ce>
 8005d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d66:	d102      	bne.n	8005d6e <HAL_SPI_TransmitReceive+0x2d4>
 8005d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d107      	bne.n	8005d7e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005d7c:	e033      	b.n	8005de6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d19e      	bne.n	8005cc6 <HAL_SPI_TransmitReceive+0x22c>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d199      	bne.n	8005cc6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d94:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 f90a 	bl	8005fb0 <SPI_EndRxTxTransaction>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d006      	beq.n	8005db0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2220      	movs	r2, #32
 8005dac:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005dae:	e01a      	b.n	8005de6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10a      	bne.n	8005dce <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ddc:	e003      	b.n	8005de6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005dee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3730      	adds	r7, #48	@ 0x30
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
	...

08005dfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	603b      	str	r3, [r7, #0]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e0c:	f7fd ff1c 	bl	8003c48 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e14:	1a9b      	subs	r3, r3, r2
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	4413      	add	r3, r2
 8005e1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e1c:	f7fd ff14 	bl	8003c48 <HAL_GetTick>
 8005e20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e22:	4b39      	ldr	r3, [pc, #228]	@ (8005f08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	015b      	lsls	r3, r3, #5
 8005e28:	0d1b      	lsrs	r3, r3, #20
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	fb02 f303 	mul.w	r3, r2, r3
 8005e30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e32:	e054      	b.n	8005ede <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3a:	d050      	beq.n	8005ede <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e3c:	f7fd ff04 	bl	8003c48 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	69fa      	ldr	r2, [r7, #28]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d902      	bls.n	8005e52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d13d      	bne.n	8005ece <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e6a:	d111      	bne.n	8005e90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e74:	d004      	beq.n	8005e80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e7e:	d107      	bne.n	8005e90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e98:	d10f      	bne.n	8005eba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005eb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e017      	b.n	8005efe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	bf0c      	ite	eq
 8005eee:	2301      	moveq	r3, #1
 8005ef0:	2300      	movne	r3, #0
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	79fb      	ldrb	r3, [r7, #7]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d19b      	bne.n	8005e34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3720      	adds	r7, #32
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	2000004c 	.word	0x2000004c

08005f0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af02      	add	r7, sp, #8
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f20:	d111      	bne.n	8005f46 <SPI_EndRxTransaction+0x3a>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f2a:	d004      	beq.n	8005f36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f34:	d107      	bne.n	8005f46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f44:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f4e:	d117      	bne.n	8005f80 <SPI_EndRxTransaction+0x74>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f58:	d112      	bne.n	8005f80 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2200      	movs	r2, #0
 8005f62:	2101      	movs	r1, #1
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f7ff ff49 	bl	8005dfc <SPI_WaitFlagStateUntilTimeout>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01a      	beq.n	8005fa6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f74:	f043 0220 	orr.w	r2, r3, #32
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e013      	b.n	8005fa8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2200      	movs	r2, #0
 8005f88:	2180      	movs	r1, #128	@ 0x80
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f7ff ff36 	bl	8005dfc <SPI_WaitFlagStateUntilTimeout>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d007      	beq.n	8005fa6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f9a:	f043 0220 	orr.w	r2, r3, #32
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e000      	b.n	8005fa8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af02      	add	r7, sp, #8
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	2180      	movs	r1, #128	@ 0x80
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f7ff ff18 	bl	8005dfc <SPI_WaitFlagStateUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d007      	beq.n	8005fe2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fd6:	f043 0220 	orr.w	r2, r3, #32
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e000      	b.n	8005fe4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e041      	b.n	8006082 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d106      	bne.n	8006018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7fd fc68 	bl	80038e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3304      	adds	r3, #4
 8006028:	4619      	mov	r1, r3
 800602a:	4610      	mov	r0, r2
 800602c:	f000 fd86 	bl	8006b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
	...

0800608c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b01      	cmp	r3, #1
 800609e:	d001      	beq.n	80060a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e044      	b.n	800612e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2202      	movs	r2, #2
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0201 	orr.w	r2, r2, #1
 80060ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006138 <HAL_TIM_Base_Start_IT+0xac>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d018      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0x6c>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a1c      	ldr	r2, [pc, #112]	@ (800613c <HAL_TIM_Base_Start_IT+0xb0>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d013      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0x6c>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060d8:	d00e      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0x6c>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a18      	ldr	r2, [pc, #96]	@ (8006140 <HAL_TIM_Base_Start_IT+0xb4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d009      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0x6c>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a16      	ldr	r2, [pc, #88]	@ (8006144 <HAL_TIM_Base_Start_IT+0xb8>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d004      	beq.n	80060f8 <HAL_TIM_Base_Start_IT+0x6c>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a15      	ldr	r2, [pc, #84]	@ (8006148 <HAL_TIM_Base_Start_IT+0xbc>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d111      	bne.n	800611c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f003 0307 	and.w	r3, r3, #7
 8006102:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b06      	cmp	r3, #6
 8006108:	d010      	beq.n	800612c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f042 0201 	orr.w	r2, r2, #1
 8006118:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800611a:	e007      	b.n	800612c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0201 	orr.w	r2, r2, #1
 800612a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	bc80      	pop	{r7}
 8006136:	4770      	bx	lr
 8006138:	40012c00 	.word	0x40012c00
 800613c:	40013400 	.word	0x40013400
 8006140:	40000400 	.word	0x40000400
 8006144:	40000800 	.word	0x40000800
 8006148:	40000c00 	.word	0x40000c00

0800614c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e041      	b.n	80061e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d106      	bne.n	8006178 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f839 	bl	80061ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2202      	movs	r2, #2
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	3304      	adds	r3, #4
 8006188:	4619      	mov	r1, r3
 800618a:	4610      	mov	r0, r2
 800618c:	f000 fcd6 	bl	8006b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bc80      	pop	{r7}
 80061fa:	4770      	bx	lr

080061fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d109      	bne.n	8006220 <HAL_TIM_PWM_Start+0x24>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b01      	cmp	r3, #1
 8006216:	bf14      	ite	ne
 8006218:	2301      	movne	r3, #1
 800621a:	2300      	moveq	r3, #0
 800621c:	b2db      	uxtb	r3, r3
 800621e:	e022      	b.n	8006266 <HAL_TIM_PWM_Start+0x6a>
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2b04      	cmp	r3, #4
 8006224:	d109      	bne.n	800623a <HAL_TIM_PWM_Start+0x3e>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b01      	cmp	r3, #1
 8006230:	bf14      	ite	ne
 8006232:	2301      	movne	r3, #1
 8006234:	2300      	moveq	r3, #0
 8006236:	b2db      	uxtb	r3, r3
 8006238:	e015      	b.n	8006266 <HAL_TIM_PWM_Start+0x6a>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b08      	cmp	r3, #8
 800623e:	d109      	bne.n	8006254 <HAL_TIM_PWM_Start+0x58>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b01      	cmp	r3, #1
 800624a:	bf14      	ite	ne
 800624c:	2301      	movne	r3, #1
 800624e:	2300      	moveq	r3, #0
 8006250:	b2db      	uxtb	r3, r3
 8006252:	e008      	b.n	8006266 <HAL_TIM_PWM_Start+0x6a>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b01      	cmp	r3, #1
 800625e:	bf14      	ite	ne
 8006260:	2301      	movne	r3, #1
 8006262:	2300      	moveq	r3, #0
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e072      	b.n	8006354 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d104      	bne.n	800627e <HAL_TIM_PWM_Start+0x82>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800627c:	e013      	b.n	80062a6 <HAL_TIM_PWM_Start+0xaa>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	2b04      	cmp	r3, #4
 8006282:	d104      	bne.n	800628e <HAL_TIM_PWM_Start+0x92>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800628c:	e00b      	b.n	80062a6 <HAL_TIM_PWM_Start+0xaa>
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b08      	cmp	r3, #8
 8006292:	d104      	bne.n	800629e <HAL_TIM_PWM_Start+0xa2>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800629c:	e003      	b.n	80062a6 <HAL_TIM_PWM_Start+0xaa>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2202      	movs	r2, #2
 80062a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2201      	movs	r2, #1
 80062ac:	6839      	ldr	r1, [r7, #0]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 ff00 	bl	80070b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a28      	ldr	r2, [pc, #160]	@ (800635c <HAL_TIM_PWM_Start+0x160>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d004      	beq.n	80062c8 <HAL_TIM_PWM_Start+0xcc>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a27      	ldr	r2, [pc, #156]	@ (8006360 <HAL_TIM_PWM_Start+0x164>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d101      	bne.n	80062cc <HAL_TIM_PWM_Start+0xd0>
 80062c8:	2301      	movs	r3, #1
 80062ca:	e000      	b.n	80062ce <HAL_TIM_PWM_Start+0xd2>
 80062cc:	2300      	movs	r3, #0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d007      	beq.n	80062e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a1d      	ldr	r2, [pc, #116]	@ (800635c <HAL_TIM_PWM_Start+0x160>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d018      	beq.n	800631e <HAL_TIM_PWM_Start+0x122>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006360 <HAL_TIM_PWM_Start+0x164>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d013      	beq.n	800631e <HAL_TIM_PWM_Start+0x122>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062fe:	d00e      	beq.n	800631e <HAL_TIM_PWM_Start+0x122>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a17      	ldr	r2, [pc, #92]	@ (8006364 <HAL_TIM_PWM_Start+0x168>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d009      	beq.n	800631e <HAL_TIM_PWM_Start+0x122>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a16      	ldr	r2, [pc, #88]	@ (8006368 <HAL_TIM_PWM_Start+0x16c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d004      	beq.n	800631e <HAL_TIM_PWM_Start+0x122>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a14      	ldr	r2, [pc, #80]	@ (800636c <HAL_TIM_PWM_Start+0x170>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d111      	bne.n	8006342 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f003 0307 	and.w	r3, r3, #7
 8006328:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2b06      	cmp	r3, #6
 800632e:	d010      	beq.n	8006352 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f042 0201 	orr.w	r2, r2, #1
 800633e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006340:	e007      	b.n	8006352 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f042 0201 	orr.w	r2, r2, #1
 8006350:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	40012c00 	.word	0x40012c00
 8006360:	40013400 	.word	0x40013400
 8006364:	40000400 	.word	0x40000400
 8006368:	40000800 	.word	0x40000800
 800636c:	40000c00 	.word	0x40000c00

08006370 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e093      	b.n	80064ac <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d106      	bne.n	800639e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f7fd fa0d 	bl	80037b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2202      	movs	r2, #2
 80063a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	6812      	ldr	r2, [r2, #0]
 80063b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063b4:	f023 0307 	bic.w	r3, r3, #7
 80063b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3304      	adds	r3, #4
 80063c2:	4619      	mov	r1, r3
 80063c4:	4610      	mov	r0, r2
 80063c6:	f000 fbb9 	bl	8006b3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063f2:	f023 0303 	bic.w	r3, r3, #3
 80063f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	4313      	orrs	r3, r2
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006410:	f023 030c 	bic.w	r3, r3, #12
 8006414:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800641c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006420:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	021b      	lsls	r3, r3, #8
 800642c:	4313      	orrs	r3, r2
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	4313      	orrs	r3, r2
 8006432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	011a      	lsls	r2, r3, #4
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	031b      	lsls	r3, r3, #12
 8006440:	4313      	orrs	r3, r2
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4313      	orrs	r3, r2
 8006446:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800644e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	4313      	orrs	r3, r2
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	4313      	orrs	r3, r2
 8006460:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80064cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80064dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d110      	bne.n	8006506 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d102      	bne.n	80064f0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80064ea:	7b7b      	ldrb	r3, [r7, #13]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d001      	beq.n	80064f4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e069      	b.n	80065c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006504:	e031      	b.n	800656a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b04      	cmp	r3, #4
 800650a:	d110      	bne.n	800652e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800650c:	7bbb      	ldrb	r3, [r7, #14]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d102      	bne.n	8006518 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006512:	7b3b      	ldrb	r3, [r7, #12]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d001      	beq.n	800651c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e055      	b.n	80065c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800652c:	e01d      	b.n	800656a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d108      	bne.n	8006546 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006534:	7bbb      	ldrb	r3, [r7, #14]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d105      	bne.n	8006546 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800653a:	7b7b      	ldrb	r3, [r7, #13]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d102      	bne.n	8006546 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006540:	7b3b      	ldrb	r3, [r7, #12]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d001      	beq.n	800654a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e03e      	b.n	80065c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2202      	movs	r2, #2
 800654e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2202      	movs	r2, #2
 8006556:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2202      	movs	r2, #2
 800655e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2202      	movs	r2, #2
 8006566:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <HAL_TIM_Encoder_Start+0xc4>
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2b04      	cmp	r3, #4
 8006574:	d008      	beq.n	8006588 <HAL_TIM_Encoder_Start+0xd4>
 8006576:	e00f      	b.n	8006598 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2201      	movs	r2, #1
 800657e:	2100      	movs	r1, #0
 8006580:	4618      	mov	r0, r3
 8006582:	f000 fd97 	bl	80070b4 <TIM_CCxChannelCmd>
      break;
 8006586:	e016      	b.n	80065b6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2201      	movs	r2, #1
 800658e:	2104      	movs	r1, #4
 8006590:	4618      	mov	r0, r3
 8006592:	f000 fd8f 	bl	80070b4 <TIM_CCxChannelCmd>
      break;
 8006596:	e00e      	b.n	80065b6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2201      	movs	r2, #1
 800659e:	2100      	movs	r1, #0
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 fd87 	bl	80070b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2201      	movs	r2, #1
 80065ac:	2104      	movs	r1, #4
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 fd80 	bl	80070b4 <TIM_CCxChannelCmd>
      break;
 80065b4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0201 	orr.w	r2, r2, #1
 80065c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d122      	bne.n	800662c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d11b      	bne.n	800662c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f06f 0202 	mvn.w	r2, #2
 80065fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	f003 0303 	and.w	r3, r3, #3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fa76 	bl	8006b04 <HAL_TIM_IC_CaptureCallback>
 8006618:	e005      	b.n	8006626 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fa69 	bl	8006af2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fa78 	bl	8006b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f003 0304 	and.w	r3, r3, #4
 8006636:	2b04      	cmp	r3, #4
 8006638:	d122      	bne.n	8006680 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b04      	cmp	r3, #4
 8006646:	d11b      	bne.n	8006680 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f06f 0204 	mvn.w	r2, #4
 8006650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2202      	movs	r2, #2
 8006656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fa4c 	bl	8006b04 <HAL_TIM_IC_CaptureCallback>
 800666c:	e005      	b.n	800667a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fa3f 	bl	8006af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 fa4e 	bl	8006b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	f003 0308 	and.w	r3, r3, #8
 800668a:	2b08      	cmp	r3, #8
 800668c:	d122      	bne.n	80066d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f003 0308 	and.w	r3, r3, #8
 8006698:	2b08      	cmp	r3, #8
 800669a:	d11b      	bne.n	80066d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f06f 0208 	mvn.w	r2, #8
 80066a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2204      	movs	r2, #4
 80066aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	f003 0303 	and.w	r3, r3, #3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fa22 	bl	8006b04 <HAL_TIM_IC_CaptureCallback>
 80066c0:	e005      	b.n	80066ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fa15 	bl	8006af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 fa24 	bl	8006b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	f003 0310 	and.w	r3, r3, #16
 80066de:	2b10      	cmp	r3, #16
 80066e0:	d122      	bne.n	8006728 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f003 0310 	and.w	r3, r3, #16
 80066ec:	2b10      	cmp	r3, #16
 80066ee:	d11b      	bne.n	8006728 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f06f 0210 	mvn.w	r2, #16
 80066f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2208      	movs	r2, #8
 80066fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f9f8 	bl	8006b04 <HAL_TIM_IC_CaptureCallback>
 8006714:	e005      	b.n	8006722 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f9eb 	bl	8006af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f9fa 	bl	8006b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b01      	cmp	r3, #1
 8006734:	d10e      	bne.n	8006754 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b01      	cmp	r3, #1
 8006742:	d107      	bne.n	8006754 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f06f 0201 	mvn.w	r2, #1
 800674c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7fc fa6e 	bl	8002c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800675e:	2b80      	cmp	r3, #128	@ 0x80
 8006760:	d10e      	bne.n	8006780 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800676c:	2b80      	cmp	r3, #128	@ 0x80
 800676e:	d107      	bne.n	8006780 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fd84 	bl	8007288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800678a:	2b40      	cmp	r3, #64	@ 0x40
 800678c:	d10e      	bne.n	80067ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006798:	2b40      	cmp	r3, #64	@ 0x40
 800679a:	d107      	bne.n	80067ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80067a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f9be 	bl	8006b28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b20      	cmp	r3, #32
 80067b8:	d10e      	bne.n	80067d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f003 0320 	and.w	r3, r3, #32
 80067c4:	2b20      	cmp	r3, #32
 80067c6:	d107      	bne.n	80067d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f06f 0220 	mvn.w	r2, #32
 80067d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fd4f 	bl	8007276 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067d8:	bf00      	nop
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d101      	bne.n	80067fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067fa:	2302      	movs	r3, #2
 80067fc:	e0ae      	b.n	800695c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b0c      	cmp	r3, #12
 800680a:	f200 809f 	bhi.w	800694c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800680e:	a201      	add	r2, pc, #4	@ (adr r2, 8006814 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006814:	08006849 	.word	0x08006849
 8006818:	0800694d 	.word	0x0800694d
 800681c:	0800694d 	.word	0x0800694d
 8006820:	0800694d 	.word	0x0800694d
 8006824:	08006889 	.word	0x08006889
 8006828:	0800694d 	.word	0x0800694d
 800682c:	0800694d 	.word	0x0800694d
 8006830:	0800694d 	.word	0x0800694d
 8006834:	080068cb 	.word	0x080068cb
 8006838:	0800694d 	.word	0x0800694d
 800683c:	0800694d 	.word	0x0800694d
 8006840:	0800694d 	.word	0x0800694d
 8006844:	0800690b 	.word	0x0800690b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68b9      	ldr	r1, [r7, #8]
 800684e:	4618      	mov	r0, r3
 8006850:	f000 f9ee 	bl	8006c30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	699a      	ldr	r2, [r3, #24]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f042 0208 	orr.w	r2, r2, #8
 8006862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	699a      	ldr	r2, [r3, #24]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0204 	bic.w	r2, r2, #4
 8006872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6999      	ldr	r1, [r3, #24]
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	691a      	ldr	r2, [r3, #16]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	619a      	str	r2, [r3, #24]
      break;
 8006886:	e064      	b.n	8006952 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68b9      	ldr	r1, [r7, #8]
 800688e:	4618      	mov	r0, r3
 8006890:	f000 fa3e 	bl	8006d10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	699a      	ldr	r2, [r3, #24]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	699a      	ldr	r2, [r3, #24]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6999      	ldr	r1, [r3, #24]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	021a      	lsls	r2, r3, #8
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	619a      	str	r2, [r3, #24]
      break;
 80068c8:	e043      	b.n	8006952 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68b9      	ldr	r1, [r7, #8]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 fa91 	bl	8006df8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	69da      	ldr	r2, [r3, #28]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f042 0208 	orr.w	r2, r2, #8
 80068e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	69da      	ldr	r2, [r3, #28]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0204 	bic.w	r2, r2, #4
 80068f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	69d9      	ldr	r1, [r3, #28]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	691a      	ldr	r2, [r3, #16]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	430a      	orrs	r2, r1
 8006906:	61da      	str	r2, [r3, #28]
      break;
 8006908:	e023      	b.n	8006952 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68b9      	ldr	r1, [r7, #8]
 8006910:	4618      	mov	r0, r3
 8006912:	f000 fae5 	bl	8006ee0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69da      	ldr	r2, [r3, #28]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006924:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	69da      	ldr	r2, [r3, #28]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006934:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69d9      	ldr	r1, [r3, #28]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	021a      	lsls	r2, r3, #8
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	430a      	orrs	r2, r1
 8006948:	61da      	str	r2, [r3, #28]
      break;
 800694a:	e002      	b.n	8006952 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	75fb      	strb	r3, [r7, #23]
      break;
 8006950:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800695a:	7dfb      	ldrb	r3, [r7, #23]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3718      	adds	r7, #24
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800696e:	2300      	movs	r3, #0
 8006970:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006978:	2b01      	cmp	r3, #1
 800697a:	d101      	bne.n	8006980 <HAL_TIM_ConfigClockSource+0x1c>
 800697c:	2302      	movs	r3, #2
 800697e:	e0b4      	b.n	8006aea <HAL_TIM_ConfigClockSource+0x186>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800699e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069b8:	d03e      	beq.n	8006a38 <HAL_TIM_ConfigClockSource+0xd4>
 80069ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069be:	f200 8087 	bhi.w	8006ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80069c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069c6:	f000 8086 	beq.w	8006ad6 <HAL_TIM_ConfigClockSource+0x172>
 80069ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ce:	d87f      	bhi.n	8006ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80069d0:	2b70      	cmp	r3, #112	@ 0x70
 80069d2:	d01a      	beq.n	8006a0a <HAL_TIM_ConfigClockSource+0xa6>
 80069d4:	2b70      	cmp	r3, #112	@ 0x70
 80069d6:	d87b      	bhi.n	8006ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80069d8:	2b60      	cmp	r3, #96	@ 0x60
 80069da:	d050      	beq.n	8006a7e <HAL_TIM_ConfigClockSource+0x11a>
 80069dc:	2b60      	cmp	r3, #96	@ 0x60
 80069de:	d877      	bhi.n	8006ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80069e0:	2b50      	cmp	r3, #80	@ 0x50
 80069e2:	d03c      	beq.n	8006a5e <HAL_TIM_ConfigClockSource+0xfa>
 80069e4:	2b50      	cmp	r3, #80	@ 0x50
 80069e6:	d873      	bhi.n	8006ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80069e8:	2b40      	cmp	r3, #64	@ 0x40
 80069ea:	d058      	beq.n	8006a9e <HAL_TIM_ConfigClockSource+0x13a>
 80069ec:	2b40      	cmp	r3, #64	@ 0x40
 80069ee:	d86f      	bhi.n	8006ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80069f0:	2b30      	cmp	r3, #48	@ 0x30
 80069f2:	d064      	beq.n	8006abe <HAL_TIM_ConfigClockSource+0x15a>
 80069f4:	2b30      	cmp	r3, #48	@ 0x30
 80069f6:	d86b      	bhi.n	8006ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80069f8:	2b20      	cmp	r3, #32
 80069fa:	d060      	beq.n	8006abe <HAL_TIM_ConfigClockSource+0x15a>
 80069fc:	2b20      	cmp	r3, #32
 80069fe:	d867      	bhi.n	8006ad0 <HAL_TIM_ConfigClockSource+0x16c>
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d05c      	beq.n	8006abe <HAL_TIM_ConfigClockSource+0x15a>
 8006a04:	2b10      	cmp	r3, #16
 8006a06:	d05a      	beq.n	8006abe <HAL_TIM_ConfigClockSource+0x15a>
 8006a08:	e062      	b.n	8006ad0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a1a:	f000 fb2c 	bl	8007076 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006a2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	609a      	str	r2, [r3, #8]
      break;
 8006a36:	e04f      	b.n	8006ad8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a48:	f000 fb15 	bl	8007076 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689a      	ldr	r2, [r3, #8]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a5a:	609a      	str	r2, [r3, #8]
      break;
 8006a5c:	e03c      	b.n	8006ad8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	f000 fa8c 	bl	8006f88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2150      	movs	r1, #80	@ 0x50
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 fae3 	bl	8007042 <TIM_ITRx_SetConfig>
      break;
 8006a7c:	e02c      	b.n	8006ad8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f000 faaa 	bl	8006fe4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2160      	movs	r1, #96	@ 0x60
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fad3 	bl	8007042 <TIM_ITRx_SetConfig>
      break;
 8006a9c:	e01c      	b.n	8006ad8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aaa:	461a      	mov	r2, r3
 8006aac:	f000 fa6c 	bl	8006f88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2140      	movs	r1, #64	@ 0x40
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 fac3 	bl	8007042 <TIM_ITRx_SetConfig>
      break;
 8006abc:	e00c      	b.n	8006ad8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	4610      	mov	r0, r2
 8006aca:	f000 faba 	bl	8007042 <TIM_ITRx_SetConfig>
      break;
 8006ace:	e003      	b.n	8006ad8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ad4:	e000      	b.n	8006ad8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ad6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006afa:	bf00      	nop
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bc80      	pop	{r7}
 8006b02:	4770      	bx	lr

08006b04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bc80      	pop	{r7}
 8006b14:	4770      	bx	lr

08006b16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b083      	sub	sp, #12
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b1e:	bf00      	nop
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bc80      	pop	{r7}
 8006b26:	4770      	bx	lr

08006b28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bc80      	pop	{r7}
 8006b38:	4770      	bx	lr
	...

08006b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a33      	ldr	r2, [pc, #204]	@ (8006c1c <TIM_Base_SetConfig+0xe0>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d013      	beq.n	8006b7c <TIM_Base_SetConfig+0x40>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a32      	ldr	r2, [pc, #200]	@ (8006c20 <TIM_Base_SetConfig+0xe4>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d00f      	beq.n	8006b7c <TIM_Base_SetConfig+0x40>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b62:	d00b      	beq.n	8006b7c <TIM_Base_SetConfig+0x40>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a2f      	ldr	r2, [pc, #188]	@ (8006c24 <TIM_Base_SetConfig+0xe8>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d007      	beq.n	8006b7c <TIM_Base_SetConfig+0x40>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a2e      	ldr	r2, [pc, #184]	@ (8006c28 <TIM_Base_SetConfig+0xec>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d003      	beq.n	8006b7c <TIM_Base_SetConfig+0x40>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a2d      	ldr	r2, [pc, #180]	@ (8006c2c <TIM_Base_SetConfig+0xf0>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d108      	bne.n	8006b8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a22      	ldr	r2, [pc, #136]	@ (8006c1c <TIM_Base_SetConfig+0xe0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d013      	beq.n	8006bbe <TIM_Base_SetConfig+0x82>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a21      	ldr	r2, [pc, #132]	@ (8006c20 <TIM_Base_SetConfig+0xe4>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00f      	beq.n	8006bbe <TIM_Base_SetConfig+0x82>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ba4:	d00b      	beq.n	8006bbe <TIM_Base_SetConfig+0x82>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a1e      	ldr	r2, [pc, #120]	@ (8006c24 <TIM_Base_SetConfig+0xe8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d007      	beq.n	8006bbe <TIM_Base_SetConfig+0x82>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8006c28 <TIM_Base_SetConfig+0xec>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d003      	beq.n	8006bbe <TIM_Base_SetConfig+0x82>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8006c2c <TIM_Base_SetConfig+0xf0>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d108      	bne.n	8006bd0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a09      	ldr	r2, [pc, #36]	@ (8006c1c <TIM_Base_SetConfig+0xe0>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d003      	beq.n	8006c04 <TIM_Base_SetConfig+0xc8>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a08      	ldr	r2, [pc, #32]	@ (8006c20 <TIM_Base_SetConfig+0xe4>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d103      	bne.n	8006c0c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	691a      	ldr	r2, [r3, #16]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	615a      	str	r2, [r3, #20]
}
 8006c12:	bf00      	nop
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bc80      	pop	{r7}
 8006c1a:	4770      	bx	lr
 8006c1c:	40012c00 	.word	0x40012c00
 8006c20:	40013400 	.word	0x40013400
 8006c24:	40000400 	.word	0x40000400
 8006c28:	40000800 	.word	0x40000800
 8006c2c:	40000c00 	.word	0x40000c00

08006c30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b087      	sub	sp, #28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	f023 0201 	bic.w	r2, r3, #1
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 0303 	bic.w	r3, r3, #3
 8006c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f023 0302 	bic.w	r3, r3, #2
 8006c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a20      	ldr	r2, [pc, #128]	@ (8006d08 <TIM_OC1_SetConfig+0xd8>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d003      	beq.n	8006c94 <TIM_OC1_SetConfig+0x64>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8006d0c <TIM_OC1_SetConfig+0xdc>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d10c      	bne.n	8006cae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f023 0308 	bic.w	r3, r3, #8
 8006c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f023 0304 	bic.w	r3, r3, #4
 8006cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a15      	ldr	r2, [pc, #84]	@ (8006d08 <TIM_OC1_SetConfig+0xd8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d003      	beq.n	8006cbe <TIM_OC1_SetConfig+0x8e>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a14      	ldr	r2, [pc, #80]	@ (8006d0c <TIM_OC1_SetConfig+0xdc>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d111      	bne.n	8006ce2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	621a      	str	r2, [r3, #32]
}
 8006cfc:	bf00      	nop
 8006cfe:	371c      	adds	r7, #28
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bc80      	pop	{r7}
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	40012c00 	.word	0x40012c00
 8006d0c:	40013400 	.word	0x40013400

08006d10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	f023 0210 	bic.w	r2, r3, #16
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	021b      	lsls	r3, r3, #8
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f023 0320 	bic.w	r3, r3, #32
 8006d5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	011b      	lsls	r3, r3, #4
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a21      	ldr	r2, [pc, #132]	@ (8006df0 <TIM_OC2_SetConfig+0xe0>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d003      	beq.n	8006d78 <TIM_OC2_SetConfig+0x68>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a20      	ldr	r2, [pc, #128]	@ (8006df4 <TIM_OC2_SetConfig+0xe4>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d10d      	bne.n	8006d94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	011b      	lsls	r3, r3, #4
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a16      	ldr	r2, [pc, #88]	@ (8006df0 <TIM_OC2_SetConfig+0xe0>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d003      	beq.n	8006da4 <TIM_OC2_SetConfig+0x94>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a15      	ldr	r2, [pc, #84]	@ (8006df4 <TIM_OC2_SetConfig+0xe4>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d113      	bne.n	8006dcc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006daa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006db2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	621a      	str	r2, [r3, #32]
}
 8006de6:	bf00      	nop
 8006de8:	371c      	adds	r7, #28
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bc80      	pop	{r7}
 8006dee:	4770      	bx	lr
 8006df0:	40012c00 	.word	0x40012c00
 8006df4:	40013400 	.word	0x40013400

08006df8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f023 0303 	bic.w	r3, r3, #3
 8006e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	021b      	lsls	r3, r3, #8
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a21      	ldr	r2, [pc, #132]	@ (8006ed8 <TIM_OC3_SetConfig+0xe0>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d003      	beq.n	8006e5e <TIM_OC3_SetConfig+0x66>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a20      	ldr	r2, [pc, #128]	@ (8006edc <TIM_OC3_SetConfig+0xe4>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d10d      	bne.n	8006e7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	021b      	lsls	r3, r3, #8
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a16      	ldr	r2, [pc, #88]	@ (8006ed8 <TIM_OC3_SetConfig+0xe0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d003      	beq.n	8006e8a <TIM_OC3_SetConfig+0x92>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a15      	ldr	r2, [pc, #84]	@ (8006edc <TIM_OC3_SetConfig+0xe4>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d113      	bne.n	8006eb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	011b      	lsls	r3, r3, #4
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	621a      	str	r2, [r3, #32]
}
 8006ecc:	bf00      	nop
 8006ece:	371c      	adds	r7, #28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bc80      	pop	{r7}
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	40012c00 	.word	0x40012c00
 8006edc:	40013400 	.word	0x40013400

08006ee0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b087      	sub	sp, #28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a1b      	ldr	r3, [r3, #32]
 8006ef4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	021b      	lsls	r3, r3, #8
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	031b      	lsls	r3, r3, #12
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a11      	ldr	r2, [pc, #68]	@ (8006f80 <TIM_OC4_SetConfig+0xa0>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d003      	beq.n	8006f48 <TIM_OC4_SetConfig+0x68>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a10      	ldr	r2, [pc, #64]	@ (8006f84 <TIM_OC4_SetConfig+0xa4>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d109      	bne.n	8006f5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	695b      	ldr	r3, [r3, #20]
 8006f54:	019b      	lsls	r3, r3, #6
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	621a      	str	r2, [r3, #32]
}
 8006f76:	bf00      	nop
 8006f78:	371c      	adds	r7, #28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bc80      	pop	{r7}
 8006f7e:	4770      	bx	lr
 8006f80:	40012c00 	.word	0x40012c00
 8006f84:	40013400 	.word	0x40013400

08006f88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	f023 0201 	bic.w	r2, r3, #1
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f023 030a 	bic.w	r3, r3, #10
 8006fc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	621a      	str	r2, [r3, #32]
}
 8006fda:	bf00      	nop
 8006fdc:	371c      	adds	r7, #28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bc80      	pop	{r7}
 8006fe2:	4770      	bx	lr

08006fe4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	f023 0210 	bic.w	r2, r3, #16
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800700e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	031b      	lsls	r3, r3, #12
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	4313      	orrs	r3, r2
 8007018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007020:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	011b      	lsls	r3, r3, #4
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	4313      	orrs	r3, r2
 800702a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	621a      	str	r2, [r3, #32]
}
 8007038:	bf00      	nop
 800703a:	371c      	adds	r7, #28
 800703c:	46bd      	mov	sp, r7
 800703e:	bc80      	pop	{r7}
 8007040:	4770      	bx	lr

08007042 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007042:	b480      	push	{r7}
 8007044:	b085      	sub	sp, #20
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007058:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4313      	orrs	r3, r2
 8007060:	f043 0307 	orr.w	r3, r3, #7
 8007064:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	609a      	str	r2, [r3, #8]
}
 800706c:	bf00      	nop
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	bc80      	pop	{r7}
 8007074:	4770      	bx	lr

08007076 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007076:	b480      	push	{r7}
 8007078:	b087      	sub	sp, #28
 800707a:	af00      	add	r7, sp, #0
 800707c:	60f8      	str	r0, [r7, #12]
 800707e:	60b9      	str	r1, [r7, #8]
 8007080:	607a      	str	r2, [r7, #4]
 8007082:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007090:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	021a      	lsls	r2, r3, #8
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	431a      	orrs	r2, r3
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	4313      	orrs	r3, r2
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	609a      	str	r2, [r3, #8]
}
 80070aa:	bf00      	nop
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bc80      	pop	{r7}
 80070b2:	4770      	bx	lr

080070b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f003 031f 	and.w	r3, r3, #31
 80070c6:	2201      	movs	r2, #1
 80070c8:	fa02 f303 	lsl.w	r3, r2, r3
 80070cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6a1a      	ldr	r2, [r3, #32]
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	43db      	mvns	r3, r3
 80070d6:	401a      	ands	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6a1a      	ldr	r2, [r3, #32]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	f003 031f 	and.w	r3, r3, #31
 80070e6:	6879      	ldr	r1, [r7, #4]
 80070e8:	fa01 f303 	lsl.w	r3, r1, r3
 80070ec:	431a      	orrs	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	621a      	str	r2, [r3, #32]
}
 80070f2:	bf00      	nop
 80070f4:	371c      	adds	r7, #28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bc80      	pop	{r7}
 80070fa:	4770      	bx	lr

080070fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800710c:	2b01      	cmp	r3, #1
 800710e:	d101      	bne.n	8007114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007110:	2302      	movs	r3, #2
 8007112:	e050      	b.n	80071b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800713a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	4313      	orrs	r3, r2
 8007144:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a1b      	ldr	r2, [pc, #108]	@ (80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d018      	beq.n	800718a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a19      	ldr	r2, [pc, #100]	@ (80071c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d013      	beq.n	800718a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800716a:	d00e      	beq.n	800718a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a15      	ldr	r2, [pc, #84]	@ (80071c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d009      	beq.n	800718a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a14      	ldr	r2, [pc, #80]	@ (80071cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d004      	beq.n	800718a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a12      	ldr	r2, [pc, #72]	@ (80071d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d10c      	bne.n	80071a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007190:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	4313      	orrs	r3, r2
 800719a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bc80      	pop	{r7}
 80071be:	4770      	bx	lr
 80071c0:	40012c00 	.word	0x40012c00
 80071c4:	40013400 	.word	0x40013400
 80071c8:	40000400 	.word	0x40000400
 80071cc:	40000800 	.word	0x40000800
 80071d0:	40000c00 	.word	0x40000c00

080071d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d101      	bne.n	80071f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80071ec:	2302      	movs	r3, #2
 80071ee:	e03d      	b.n	800726c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	4313      	orrs	r3, r2
 8007204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	4313      	orrs	r3, r2
 8007212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	4313      	orrs	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4313      	orrs	r3, r2
 800722e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	4313      	orrs	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	695b      	ldr	r3, [r3, #20]
 8007248:	4313      	orrs	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	4313      	orrs	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3714      	adds	r7, #20
 8007270:	46bd      	mov	sp, r7
 8007272:	bc80      	pop	{r7}
 8007274:	4770      	bx	lr

08007276 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007276:	b480      	push	{r7}
 8007278:	b083      	sub	sp, #12
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800727e:	bf00      	nop
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	bc80      	pop	{r7}
 8007286:	4770      	bx	lr

08007288 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	bc80      	pop	{r7}
 8007298:	4770      	bx	lr

0800729a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b082      	sub	sp, #8
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e042      	b.n	8007332 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d106      	bne.n	80072c6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7fc fbc5 	bl	8003a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2224      	movs	r2, #36	@ 0x24
 80072ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68da      	ldr	r2, [r3, #12]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80072dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fdc6 	bl	8007e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	691a      	ldr	r2, [r3, #16]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	695a      	ldr	r2, [r3, #20]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007302:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68da      	ldr	r2, [r3, #12]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007312:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2220      	movs	r2, #32
 800731e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2220      	movs	r2, #32
 8007326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b08a      	sub	sp, #40	@ 0x28
 800733e:	af02      	add	r7, sp, #8
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	603b      	str	r3, [r7, #0]
 8007346:	4613      	mov	r3, r2
 8007348:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800734a:	2300      	movs	r3, #0
 800734c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b20      	cmp	r3, #32
 8007358:	d16d      	bne.n	8007436 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <HAL_UART_Transmit+0x2c>
 8007360:	88fb      	ldrh	r3, [r7, #6]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e066      	b.n	8007438 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2221      	movs	r2, #33	@ 0x21
 8007374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007378:	f7fc fc66 	bl	8003c48 <HAL_GetTick>
 800737c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	88fa      	ldrh	r2, [r7, #6]
 8007382:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	88fa      	ldrh	r2, [r7, #6]
 8007388:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007392:	d108      	bne.n	80073a6 <HAL_UART_Transmit+0x6c>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d104      	bne.n	80073a6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800739c:	2300      	movs	r3, #0
 800739e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	61bb      	str	r3, [r7, #24]
 80073a4:	e003      	b.n	80073ae <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073aa:	2300      	movs	r3, #0
 80073ac:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80073ae:	e02a      	b.n	8007406 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	2200      	movs	r2, #0
 80073b8:	2180      	movs	r1, #128	@ 0x80
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f000 fb15 	bl	80079ea <UART_WaitOnFlagUntilTimeout>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e036      	b.n	8007438 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10b      	bne.n	80073e8 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073de:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	3302      	adds	r3, #2
 80073e4:	61bb      	str	r3, [r7, #24]
 80073e6:	e007      	b.n	80073f8 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	781a      	ldrb	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	3301      	adds	r3, #1
 80073f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	3b01      	subs	r3, #1
 8007400:	b29a      	uxth	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800740a:	b29b      	uxth	r3, r3
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1cf      	bne.n	80073b0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	2200      	movs	r2, #0
 8007418:	2140      	movs	r1, #64	@ 0x40
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 fae5 	bl	80079ea <UART_WaitOnFlagUntilTimeout>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e006      	b.n	8007438 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2220      	movs	r2, #32
 800742e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	e000      	b.n	8007438 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007436:	2302      	movs	r3, #2
  }
}
 8007438:	4618      	mov	r0, r3
 800743a:	3720      	adds	r7, #32
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	4613      	mov	r3, r2
 800744c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b20      	cmp	r3, #32
 8007458:	d112      	bne.n	8007480 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <HAL_UART_Receive_IT+0x26>
 8007460:	88fb      	ldrh	r3, [r7, #6]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e00b      	b.n	8007482 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007470:	88fb      	ldrh	r3, [r7, #6]
 8007472:	461a      	mov	r2, r3
 8007474:	68b9      	ldr	r1, [r7, #8]
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f000 fb25 	bl	8007ac6 <UART_Start_Receive_IT>
 800747c:	4603      	mov	r3, r0
 800747e:	e000      	b.n	8007482 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007480:	2302      	movs	r3, #2
  }
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b0ba      	sub	sp, #232	@ 0xe8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074c2:	f003 030f 	and.w	r3, r3, #15
 80074c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80074ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10f      	bne.n	80074f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074d6:	f003 0320 	and.w	r3, r3, #32
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d009      	beq.n	80074f2 <HAL_UART_IRQHandler+0x66>
 80074de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074e2:	f003 0320 	and.w	r3, r3, #32
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fc01 	bl	8007cf2 <UART_Receive_IT>
      return;
 80074f0:	e25b      	b.n	80079aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80074f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f000 80de 	beq.w	80076b8 <HAL_UART_IRQHandler+0x22c>
 80074fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	d106      	bne.n	8007516 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800750c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007510:	2b00      	cmp	r3, #0
 8007512:	f000 80d1 	beq.w	80076b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00b      	beq.n	800753a <HAL_UART_IRQHandler+0xae>
 8007522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800752a:	2b00      	cmp	r3, #0
 800752c:	d005      	beq.n	800753a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007532:	f043 0201 	orr.w	r2, r3, #1
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800753a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800753e:	f003 0304 	and.w	r3, r3, #4
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00b      	beq.n	800755e <HAL_UART_IRQHandler+0xd2>
 8007546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b00      	cmp	r3, #0
 8007550:	d005      	beq.n	800755e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007556:	f043 0202 	orr.w	r2, r3, #2
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800755e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007562:	f003 0302 	and.w	r3, r3, #2
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00b      	beq.n	8007582 <HAL_UART_IRQHandler+0xf6>
 800756a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b00      	cmp	r3, #0
 8007574:	d005      	beq.n	8007582 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800757a:	f043 0204 	orr.w	r2, r3, #4
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007586:	f003 0308 	and.w	r3, r3, #8
 800758a:	2b00      	cmp	r3, #0
 800758c:	d011      	beq.n	80075b2 <HAL_UART_IRQHandler+0x126>
 800758e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007592:	f003 0320 	and.w	r3, r3, #32
 8007596:	2b00      	cmp	r3, #0
 8007598:	d105      	bne.n	80075a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800759a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d005      	beq.n	80075b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075aa:	f043 0208 	orr.w	r2, r3, #8
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f000 81f2 	beq.w	80079a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075c0:	f003 0320 	and.w	r3, r3, #32
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d008      	beq.n	80075da <HAL_UART_IRQHandler+0x14e>
 80075c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075cc:	f003 0320 	and.w	r3, r3, #32
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fb8c 	bl	8007cf2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	bf14      	ite	ne
 80075e8:	2301      	movne	r3, #1
 80075ea:	2300      	moveq	r3, #0
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075f6:	f003 0308 	and.w	r3, r3, #8
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d103      	bne.n	8007606 <HAL_UART_IRQHandler+0x17a>
 80075fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007602:	2b00      	cmp	r3, #0
 8007604:	d04f      	beq.n	80076a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fa96 	bl	8007b38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007616:	2b00      	cmp	r3, #0
 8007618:	d041      	beq.n	800769e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3314      	adds	r3, #20
 8007620:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007630:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007634:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007638:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3314      	adds	r3, #20
 8007642:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007646:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800764a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007652:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007656:	e841 2300 	strex	r3, r2, [r1]
 800765a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800765e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1d9      	bne.n	800761a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800766a:	2b00      	cmp	r3, #0
 800766c:	d013      	beq.n	8007696 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007672:	4a7e      	ldr	r2, [pc, #504]	@ (800786c <HAL_UART_IRQHandler+0x3e0>)
 8007674:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800767a:	4618      	mov	r0, r3
 800767c:	f7fc fcd2 	bl	8004024 <HAL_DMA_Abort_IT>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d016      	beq.n	80076b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800768a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007690:	4610      	mov	r0, r2
 8007692:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007694:	e00e      	b.n	80076b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f993 	bl	80079c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800769c:	e00a      	b.n	80076b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f98f 	bl	80079c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a4:	e006      	b.n	80076b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f98b 	bl	80079c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80076b2:	e175      	b.n	80079a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b4:	bf00      	nop
    return;
 80076b6:	e173      	b.n	80079a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076bc:	2b01      	cmp	r3, #1
 80076be:	f040 814f 	bne.w	8007960 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80076c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076c6:	f003 0310 	and.w	r3, r3, #16
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 8148 	beq.w	8007960 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80076d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076d4:	f003 0310 	and.w	r3, r3, #16
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f000 8141 	beq.w	8007960 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076de:	2300      	movs	r3, #0
 80076e0:	60bb      	str	r3, [r7, #8]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	60bb      	str	r3, [r7, #8]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	60bb      	str	r3, [r7, #8]
 80076f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f000 80b6 	beq.w	8007870 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007710:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 8145 	beq.w	80079a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800771e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007722:	429a      	cmp	r2, r3
 8007724:	f080 813e 	bcs.w	80079a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800772e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	2b20      	cmp	r3, #32
 8007738:	f000 8088 	beq.w	800784c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	330c      	adds	r3, #12
 8007742:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007746:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800774a:	e853 3f00 	ldrex	r3, [r3]
 800774e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007752:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007756:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800775a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	330c      	adds	r3, #12
 8007764:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007768:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800776c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007770:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007774:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007778:	e841 2300 	strex	r3, r2, [r1]
 800777c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007780:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1d9      	bne.n	800773c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3314      	adds	r3, #20
 800778e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007790:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007792:	e853 3f00 	ldrex	r3, [r3]
 8007796:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007798:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800779a:	f023 0301 	bic.w	r3, r3, #1
 800779e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3314      	adds	r3, #20
 80077a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80077ac:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80077b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80077b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80077b8:	e841 2300 	strex	r3, r2, [r1]
 80077bc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80077be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1e1      	bne.n	8007788 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3314      	adds	r3, #20
 80077ca:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077ce:	e853 3f00 	ldrex	r3, [r3]
 80077d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80077d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3314      	adds	r3, #20
 80077e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80077e8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80077ea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ec:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80077ee:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80077f0:	e841 2300 	strex	r3, r2, [r1]
 80077f4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80077f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1e3      	bne.n	80077c4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2220      	movs	r2, #32
 8007800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	330c      	adds	r3, #12
 8007810:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800781a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800781c:	f023 0310 	bic.w	r3, r3, #16
 8007820:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	330c      	adds	r3, #12
 800782a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800782e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007830:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007832:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007834:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007836:	e841 2300 	strex	r3, r2, [r1]
 800783a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800783c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1e3      	bne.n	800780a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007846:	4618      	mov	r0, r3
 8007848:	f7fc fbb0 	bl	8003fac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2202      	movs	r2, #2
 8007850:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800785a:	b29b      	uxth	r3, r3
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	b29b      	uxth	r3, r3
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f8b6 	bl	80079d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007868:	e09c      	b.n	80079a4 <HAL_UART_IRQHandler+0x518>
 800786a:	bf00      	nop
 800786c:	08007bfd 	.word	0x08007bfd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007878:	b29b      	uxth	r3, r3
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007884:	b29b      	uxth	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	f000 808e 	beq.w	80079a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800788c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 8089 	beq.w	80079a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	330c      	adds	r3, #12
 800789c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a0:	e853 3f00 	ldrex	r3, [r3]
 80078a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	330c      	adds	r3, #12
 80078b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80078ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80078bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078c2:	e841 2300 	strex	r3, r2, [r1]
 80078c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1e3      	bne.n	8007896 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3314      	adds	r3, #20
 80078d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d8:	e853 3f00 	ldrex	r3, [r3]
 80078dc:	623b      	str	r3, [r7, #32]
   return(result);
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	f023 0301 	bic.w	r3, r3, #1
 80078e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	3314      	adds	r3, #20
 80078ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80078f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80078f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078fa:	e841 2300 	strex	r3, r2, [r1]
 80078fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1e3      	bne.n	80078ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2220      	movs	r2, #32
 800790a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	330c      	adds	r3, #12
 800791a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	e853 3f00 	ldrex	r3, [r3]
 8007922:	60fb      	str	r3, [r7, #12]
   return(result);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f023 0310 	bic.w	r3, r3, #16
 800792a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	330c      	adds	r3, #12
 8007934:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007938:	61fa      	str	r2, [r7, #28]
 800793a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793c:	69b9      	ldr	r1, [r7, #24]
 800793e:	69fa      	ldr	r2, [r7, #28]
 8007940:	e841 2300 	strex	r3, r2, [r1]
 8007944:	617b      	str	r3, [r7, #20]
   return(result);
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1e3      	bne.n	8007914 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2202      	movs	r2, #2
 8007950:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007952:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f83b 	bl	80079d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800795e:	e023      	b.n	80079a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007964:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007968:	2b00      	cmp	r3, #0
 800796a:	d009      	beq.n	8007980 <HAL_UART_IRQHandler+0x4f4>
 800796c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007970:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f953 	bl	8007c24 <UART_Transmit_IT>
    return;
 800797e:	e014      	b.n	80079aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00e      	beq.n	80079aa <HAL_UART_IRQHandler+0x51e>
 800798c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007994:	2b00      	cmp	r3, #0
 8007996:	d008      	beq.n	80079aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f992 	bl	8007cc2 <UART_EndTransmit_IT>
    return;
 800799e:	e004      	b.n	80079aa <HAL_UART_IRQHandler+0x51e>
    return;
 80079a0:	bf00      	nop
 80079a2:	e002      	b.n	80079aa <HAL_UART_IRQHandler+0x51e>
      return;
 80079a4:	bf00      	nop
 80079a6:	e000      	b.n	80079aa <HAL_UART_IRQHandler+0x51e>
      return;
 80079a8:	bf00      	nop
  }
}
 80079aa:	37e8      	adds	r7, #232	@ 0xe8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	bc80      	pop	{r7}
 80079c0:	4770      	bx	lr

080079c2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80079ca:	bf00      	nop
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bc80      	pop	{r7}
 80079d2:	4770      	bx	lr

080079d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	460b      	mov	r3, r1
 80079de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bc80      	pop	{r7}
 80079e8:	4770      	bx	lr

080079ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b090      	sub	sp, #64	@ 0x40
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	60f8      	str	r0, [r7, #12]
 80079f2:	60b9      	str	r1, [r7, #8]
 80079f4:	603b      	str	r3, [r7, #0]
 80079f6:	4613      	mov	r3, r2
 80079f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079fa:	e050      	b.n	8007a9e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a02:	d04c      	beq.n	8007a9e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007a04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d007      	beq.n	8007a1a <UART_WaitOnFlagUntilTimeout+0x30>
 8007a0a:	f7fc f91d 	bl	8003c48 <HAL_GetTick>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d241      	bcs.n	8007a9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	330c      	adds	r3, #12
 8007a20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a24:	e853 3f00 	ldrex	r3, [r3]
 8007a28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	330c      	adds	r3, #12
 8007a38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007a3a:	637a      	str	r2, [r7, #52]	@ 0x34
 8007a3c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007a40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e5      	bne.n	8007a1a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3314      	adds	r3, #20
 8007a54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f023 0301 	bic.w	r3, r3, #1
 8007a64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3314      	adds	r3, #20
 8007a6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a6e:	623a      	str	r2, [r7, #32]
 8007a70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a72:	69f9      	ldr	r1, [r7, #28]
 8007a74:	6a3a      	ldr	r2, [r7, #32]
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e5      	bne.n	8007a4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2220      	movs	r2, #32
 8007a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2220      	movs	r2, #32
 8007a8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e00f      	b.n	8007abe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	bf0c      	ite	eq
 8007aae:	2301      	moveq	r3, #1
 8007ab0:	2300      	movne	r3, #0
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	79fb      	ldrb	r3, [r7, #7]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d09f      	beq.n	80079fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3740      	adds	r7, #64	@ 0x40
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b085      	sub	sp, #20
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	60f8      	str	r0, [r7, #12]
 8007ace:	60b9      	str	r1, [r7, #8]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	88fa      	ldrh	r2, [r7, #6]
 8007ade:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	88fa      	ldrh	r2, [r7, #6]
 8007ae4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2222      	movs	r2, #34	@ 0x22
 8007af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d007      	beq.n	8007b0c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68da      	ldr	r2, [r3, #12]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b0a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	695a      	ldr	r2, [r3, #20]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f042 0201 	orr.w	r2, r2, #1
 8007b1a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68da      	ldr	r2, [r3, #12]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f042 0220 	orr.w	r2, r2, #32
 8007b2a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bc80      	pop	{r7}
 8007b36:	4770      	bx	lr

08007b38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b095      	sub	sp, #84	@ 0x54
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	330c      	adds	r3, #12
 8007b46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b4a:	e853 3f00 	ldrex	r3, [r3]
 8007b4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	330c      	adds	r3, #12
 8007b5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b60:	643a      	str	r2, [r7, #64]	@ 0x40
 8007b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b68:	e841 2300 	strex	r3, r2, [r1]
 8007b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1e5      	bne.n	8007b40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3314      	adds	r3, #20
 8007b7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7c:	6a3b      	ldr	r3, [r7, #32]
 8007b7e:	e853 3f00 	ldrex	r3, [r3]
 8007b82:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	f023 0301 	bic.w	r3, r3, #1
 8007b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3314      	adds	r3, #20
 8007b92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b9c:	e841 2300 	strex	r3, r2, [r1]
 8007ba0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1e5      	bne.n	8007b74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d119      	bne.n	8007be4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	330c      	adds	r3, #12
 8007bb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	e853 3f00 	ldrex	r3, [r3]
 8007bbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	f023 0310 	bic.w	r3, r3, #16
 8007bc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	330c      	adds	r3, #12
 8007bce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bd0:	61ba      	str	r2, [r7, #24]
 8007bd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd4:	6979      	ldr	r1, [r7, #20]
 8007bd6:	69ba      	ldr	r2, [r7, #24]
 8007bd8:	e841 2300 	strex	r3, r2, [r1]
 8007bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1e5      	bne.n	8007bb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2220      	movs	r2, #32
 8007be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007bf2:	bf00      	nop
 8007bf4:	3754      	adds	r7, #84	@ 0x54
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bc80      	pop	{r7}
 8007bfa:	4770      	bx	lr

08007bfc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7ff fed3 	bl	80079c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c1c:	bf00      	nop
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b21      	cmp	r3, #33	@ 0x21
 8007c36:	d13e      	bne.n	8007cb6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c40:	d114      	bne.n	8007c6c <UART_Transmit_IT+0x48>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d110      	bne.n	8007c6c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	461a      	mov	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c5e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a1b      	ldr	r3, [r3, #32]
 8007c64:	1c9a      	adds	r2, r3, #2
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	621a      	str	r2, [r3, #32]
 8007c6a:	e008      	b.n	8007c7e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
 8007c70:	1c59      	adds	r1, r3, #1
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	6211      	str	r1, [r2, #32]
 8007c76:	781a      	ldrb	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	3b01      	subs	r3, #1
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10f      	bne.n	8007cb2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68da      	ldr	r2, [r3, #12]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ca0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68da      	ldr	r2, [r3, #12]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cb0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	e000      	b.n	8007cb8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007cb6:	2302      	movs	r3, #2
  }
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bc80      	pop	{r7}
 8007cc0:	4770      	bx	lr

08007cc2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b082      	sub	sp, #8
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68da      	ldr	r2, [r3, #12]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cd8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7ff fe64 	bl	80079b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b08c      	sub	sp, #48	@ 0x30
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b22      	cmp	r3, #34	@ 0x22
 8007d04:	f040 80ae 	bne.w	8007e64 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d10:	d117      	bne.n	8007d42 <UART_Receive_IT+0x50>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d113      	bne.n	8007d42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d22:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3a:	1c9a      	adds	r2, r3, #2
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d40:	e026      	b.n	8007d90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d54:	d007      	beq.n	8007d66 <UART_Receive_IT+0x74>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10a      	bne.n	8007d74 <UART_Receive_IT+0x82>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d106      	bne.n	8007d74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d70:	701a      	strb	r2, [r3, #0]
 8007d72:	e008      	b.n	8007d86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	3b01      	subs	r3, #1
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d15d      	bne.n	8007e60 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68da      	ldr	r2, [r3, #12]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f022 0220 	bic.w	r2, r2, #32
 8007db2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68da      	ldr	r2, [r3, #12]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007dc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	695a      	ldr	r2, [r3, #20]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f022 0201 	bic.w	r2, r2, #1
 8007dd2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d135      	bne.n	8007e56 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	330c      	adds	r3, #12
 8007df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	e853 3f00 	ldrex	r3, [r3]
 8007dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	f023 0310 	bic.w	r3, r3, #16
 8007e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	330c      	adds	r3, #12
 8007e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e10:	623a      	str	r2, [r7, #32]
 8007e12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e14:	69f9      	ldr	r1, [r7, #28]
 8007e16:	6a3a      	ldr	r2, [r7, #32]
 8007e18:	e841 2300 	strex	r3, r2, [r1]
 8007e1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1e5      	bne.n	8007df0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0310 	and.w	r3, r3, #16
 8007e2e:	2b10      	cmp	r3, #16
 8007e30:	d10a      	bne.n	8007e48 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e32:	2300      	movs	r3, #0
 8007e34:	60fb      	str	r3, [r7, #12]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	60fb      	str	r3, [r7, #12]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	60fb      	str	r3, [r7, #12]
 8007e46:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7ff fdc0 	bl	80079d4 <HAL_UARTEx_RxEventCallback>
 8007e54:	e002      	b.n	8007e5c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7fa ff2e 	bl	8002cb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	e002      	b.n	8007e66 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007e60:	2300      	movs	r3, #0
 8007e62:	e000      	b.n	8007e66 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007e64:	2302      	movs	r3, #2
  }
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3730      	adds	r7, #48	@ 0x30
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	689a      	ldr	r2, [r3, #8]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	431a      	orrs	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007eaa:	f023 030c 	bic.w	r3, r3, #12
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	6812      	ldr	r2, [r2, #0]
 8007eb2:	68b9      	ldr	r1, [r7, #8]
 8007eb4:	430b      	orrs	r3, r1
 8007eb6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	699a      	ldr	r2, [r3, #24]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8007f84 <UART_SetConfig+0x114>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d103      	bne.n	8007ee0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007ed8:	f7fd face 	bl	8005478 <HAL_RCC_GetPCLK2Freq>
 8007edc:	60f8      	str	r0, [r7, #12]
 8007ede:	e002      	b.n	8007ee6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007ee0:	f7fd fab6 	bl	8005450 <HAL_RCC_GetPCLK1Freq>
 8007ee4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4413      	add	r3, r2
 8007eee:	009a      	lsls	r2, r3, #2
 8007ef0:	441a      	add	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efc:	4a22      	ldr	r2, [pc, #136]	@ (8007f88 <UART_SetConfig+0x118>)
 8007efe:	fba2 2303 	umull	r2, r3, r2, r3
 8007f02:	095b      	lsrs	r3, r3, #5
 8007f04:	0119      	lsls	r1, r3, #4
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	4413      	add	r3, r2
 8007f0e:	009a      	lsls	r2, r3, #2
 8007f10:	441a      	add	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8007f88 <UART_SetConfig+0x118>)
 8007f1e:	fba3 0302 	umull	r0, r3, r3, r2
 8007f22:	095b      	lsrs	r3, r3, #5
 8007f24:	2064      	movs	r0, #100	@ 0x64
 8007f26:	fb00 f303 	mul.w	r3, r0, r3
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	011b      	lsls	r3, r3, #4
 8007f2e:	3332      	adds	r3, #50	@ 0x32
 8007f30:	4a15      	ldr	r2, [pc, #84]	@ (8007f88 <UART_SetConfig+0x118>)
 8007f32:	fba2 2303 	umull	r2, r3, r2, r3
 8007f36:	095b      	lsrs	r3, r3, #5
 8007f38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f3c:	4419      	add	r1, r3
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	4613      	mov	r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4413      	add	r3, r2
 8007f46:	009a      	lsls	r2, r3, #2
 8007f48:	441a      	add	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f54:	4b0c      	ldr	r3, [pc, #48]	@ (8007f88 <UART_SetConfig+0x118>)
 8007f56:	fba3 0302 	umull	r0, r3, r3, r2
 8007f5a:	095b      	lsrs	r3, r3, #5
 8007f5c:	2064      	movs	r0, #100	@ 0x64
 8007f5e:	fb00 f303 	mul.w	r3, r0, r3
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	011b      	lsls	r3, r3, #4
 8007f66:	3332      	adds	r3, #50	@ 0x32
 8007f68:	4a07      	ldr	r2, [pc, #28]	@ (8007f88 <UART_SetConfig+0x118>)
 8007f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f6e:	095b      	lsrs	r3, r3, #5
 8007f70:	f003 020f 	and.w	r2, r3, #15
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	440a      	add	r2, r1
 8007f7a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007f7c:	bf00      	nop
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	40013800 	.word	0x40013800
 8007f88:	51eb851f 	.word	0x51eb851f

08007f8c <__cvt>:
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f92:	461d      	mov	r5, r3
 8007f94:	bfbb      	ittet	lt
 8007f96:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007f9a:	461d      	movlt	r5, r3
 8007f9c:	2300      	movge	r3, #0
 8007f9e:	232d      	movlt	r3, #45	@ 0x2d
 8007fa0:	b088      	sub	sp, #32
 8007fa2:	4614      	mov	r4, r2
 8007fa4:	bfb8      	it	lt
 8007fa6:	4614      	movlt	r4, r2
 8007fa8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007faa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007fac:	7013      	strb	r3, [r2, #0]
 8007fae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007fb0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007fb4:	f023 0820 	bic.w	r8, r3, #32
 8007fb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007fbc:	d005      	beq.n	8007fca <__cvt+0x3e>
 8007fbe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007fc2:	d100      	bne.n	8007fc6 <__cvt+0x3a>
 8007fc4:	3601      	adds	r6, #1
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	e000      	b.n	8007fcc <__cvt+0x40>
 8007fca:	2303      	movs	r3, #3
 8007fcc:	aa07      	add	r2, sp, #28
 8007fce:	9204      	str	r2, [sp, #16]
 8007fd0:	aa06      	add	r2, sp, #24
 8007fd2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007fd6:	e9cd 3600 	strd	r3, r6, [sp]
 8007fda:	4622      	mov	r2, r4
 8007fdc:	462b      	mov	r3, r5
 8007fde:	f000 fe4f 	bl	8008c80 <_dtoa_r>
 8007fe2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007fe6:	4607      	mov	r7, r0
 8007fe8:	d119      	bne.n	800801e <__cvt+0x92>
 8007fea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007fec:	07db      	lsls	r3, r3, #31
 8007fee:	d50e      	bpl.n	800800e <__cvt+0x82>
 8007ff0:	eb00 0906 	add.w	r9, r0, r6
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	f7f8 fd40 	bl	8000a80 <__aeabi_dcmpeq>
 8008000:	b108      	cbz	r0, 8008006 <__cvt+0x7a>
 8008002:	f8cd 901c 	str.w	r9, [sp, #28]
 8008006:	2230      	movs	r2, #48	@ 0x30
 8008008:	9b07      	ldr	r3, [sp, #28]
 800800a:	454b      	cmp	r3, r9
 800800c:	d31e      	bcc.n	800804c <__cvt+0xc0>
 800800e:	4638      	mov	r0, r7
 8008010:	9b07      	ldr	r3, [sp, #28]
 8008012:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008014:	1bdb      	subs	r3, r3, r7
 8008016:	6013      	str	r3, [r2, #0]
 8008018:	b008      	add	sp, #32
 800801a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800801e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008022:	eb00 0906 	add.w	r9, r0, r6
 8008026:	d1e5      	bne.n	8007ff4 <__cvt+0x68>
 8008028:	7803      	ldrb	r3, [r0, #0]
 800802a:	2b30      	cmp	r3, #48	@ 0x30
 800802c:	d10a      	bne.n	8008044 <__cvt+0xb8>
 800802e:	2200      	movs	r2, #0
 8008030:	2300      	movs	r3, #0
 8008032:	4620      	mov	r0, r4
 8008034:	4629      	mov	r1, r5
 8008036:	f7f8 fd23 	bl	8000a80 <__aeabi_dcmpeq>
 800803a:	b918      	cbnz	r0, 8008044 <__cvt+0xb8>
 800803c:	f1c6 0601 	rsb	r6, r6, #1
 8008040:	f8ca 6000 	str.w	r6, [sl]
 8008044:	f8da 3000 	ldr.w	r3, [sl]
 8008048:	4499      	add	r9, r3
 800804a:	e7d3      	b.n	8007ff4 <__cvt+0x68>
 800804c:	1c59      	adds	r1, r3, #1
 800804e:	9107      	str	r1, [sp, #28]
 8008050:	701a      	strb	r2, [r3, #0]
 8008052:	e7d9      	b.n	8008008 <__cvt+0x7c>

08008054 <__exponent>:
 8008054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008056:	2900      	cmp	r1, #0
 8008058:	bfb6      	itet	lt
 800805a:	232d      	movlt	r3, #45	@ 0x2d
 800805c:	232b      	movge	r3, #43	@ 0x2b
 800805e:	4249      	neglt	r1, r1
 8008060:	2909      	cmp	r1, #9
 8008062:	7002      	strb	r2, [r0, #0]
 8008064:	7043      	strb	r3, [r0, #1]
 8008066:	dd29      	ble.n	80080bc <__exponent+0x68>
 8008068:	f10d 0307 	add.w	r3, sp, #7
 800806c:	461d      	mov	r5, r3
 800806e:	270a      	movs	r7, #10
 8008070:	fbb1 f6f7 	udiv	r6, r1, r7
 8008074:	461a      	mov	r2, r3
 8008076:	fb07 1416 	mls	r4, r7, r6, r1
 800807a:	3430      	adds	r4, #48	@ 0x30
 800807c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008080:	460c      	mov	r4, r1
 8008082:	2c63      	cmp	r4, #99	@ 0x63
 8008084:	4631      	mov	r1, r6
 8008086:	f103 33ff 	add.w	r3, r3, #4294967295
 800808a:	dcf1      	bgt.n	8008070 <__exponent+0x1c>
 800808c:	3130      	adds	r1, #48	@ 0x30
 800808e:	1e94      	subs	r4, r2, #2
 8008090:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008094:	4623      	mov	r3, r4
 8008096:	1c41      	adds	r1, r0, #1
 8008098:	42ab      	cmp	r3, r5
 800809a:	d30a      	bcc.n	80080b2 <__exponent+0x5e>
 800809c:	f10d 0309 	add.w	r3, sp, #9
 80080a0:	1a9b      	subs	r3, r3, r2
 80080a2:	42ac      	cmp	r4, r5
 80080a4:	bf88      	it	hi
 80080a6:	2300      	movhi	r3, #0
 80080a8:	3302      	adds	r3, #2
 80080aa:	4403      	add	r3, r0
 80080ac:	1a18      	subs	r0, r3, r0
 80080ae:	b003      	add	sp, #12
 80080b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80080b6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80080ba:	e7ed      	b.n	8008098 <__exponent+0x44>
 80080bc:	2330      	movs	r3, #48	@ 0x30
 80080be:	3130      	adds	r1, #48	@ 0x30
 80080c0:	7083      	strb	r3, [r0, #2]
 80080c2:	70c1      	strb	r1, [r0, #3]
 80080c4:	1d03      	adds	r3, r0, #4
 80080c6:	e7f1      	b.n	80080ac <__exponent+0x58>

080080c8 <_printf_float>:
 80080c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080cc:	b091      	sub	sp, #68	@ 0x44
 80080ce:	460c      	mov	r4, r1
 80080d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80080d4:	4616      	mov	r6, r2
 80080d6:	461f      	mov	r7, r3
 80080d8:	4605      	mov	r5, r0
 80080da:	f000 fcc1 	bl	8008a60 <_localeconv_r>
 80080de:	6803      	ldr	r3, [r0, #0]
 80080e0:	4618      	mov	r0, r3
 80080e2:	9308      	str	r3, [sp, #32]
 80080e4:	f7f8 f8a0 	bl	8000228 <strlen>
 80080e8:	2300      	movs	r3, #0
 80080ea:	930e      	str	r3, [sp, #56]	@ 0x38
 80080ec:	f8d8 3000 	ldr.w	r3, [r8]
 80080f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80080f2:	3307      	adds	r3, #7
 80080f4:	f023 0307 	bic.w	r3, r3, #7
 80080f8:	f103 0208 	add.w	r2, r3, #8
 80080fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008100:	f8d4 b000 	ldr.w	fp, [r4]
 8008104:	f8c8 2000 	str.w	r2, [r8]
 8008108:	e9d3 8900 	ldrd	r8, r9, [r3]
 800810c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008110:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008112:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008116:	f04f 32ff 	mov.w	r2, #4294967295
 800811a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800811e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008122:	4b9c      	ldr	r3, [pc, #624]	@ (8008394 <_printf_float+0x2cc>)
 8008124:	f7f8 fcde 	bl	8000ae4 <__aeabi_dcmpun>
 8008128:	bb70      	cbnz	r0, 8008188 <_printf_float+0xc0>
 800812a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800812e:	f04f 32ff 	mov.w	r2, #4294967295
 8008132:	4b98      	ldr	r3, [pc, #608]	@ (8008394 <_printf_float+0x2cc>)
 8008134:	f7f8 fcb8 	bl	8000aa8 <__aeabi_dcmple>
 8008138:	bb30      	cbnz	r0, 8008188 <_printf_float+0xc0>
 800813a:	2200      	movs	r2, #0
 800813c:	2300      	movs	r3, #0
 800813e:	4640      	mov	r0, r8
 8008140:	4649      	mov	r1, r9
 8008142:	f7f8 fca7 	bl	8000a94 <__aeabi_dcmplt>
 8008146:	b110      	cbz	r0, 800814e <_printf_float+0x86>
 8008148:	232d      	movs	r3, #45	@ 0x2d
 800814a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800814e:	4a92      	ldr	r2, [pc, #584]	@ (8008398 <_printf_float+0x2d0>)
 8008150:	4b92      	ldr	r3, [pc, #584]	@ (800839c <_printf_float+0x2d4>)
 8008152:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008156:	bf94      	ite	ls
 8008158:	4690      	movls	r8, r2
 800815a:	4698      	movhi	r8, r3
 800815c:	2303      	movs	r3, #3
 800815e:	f04f 0900 	mov.w	r9, #0
 8008162:	6123      	str	r3, [r4, #16]
 8008164:	f02b 0304 	bic.w	r3, fp, #4
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	4633      	mov	r3, r6
 800816c:	4621      	mov	r1, r4
 800816e:	4628      	mov	r0, r5
 8008170:	9700      	str	r7, [sp, #0]
 8008172:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008174:	f000 f9d4 	bl	8008520 <_printf_common>
 8008178:	3001      	adds	r0, #1
 800817a:	f040 8090 	bne.w	800829e <_printf_float+0x1d6>
 800817e:	f04f 30ff 	mov.w	r0, #4294967295
 8008182:	b011      	add	sp, #68	@ 0x44
 8008184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008188:	4642      	mov	r2, r8
 800818a:	464b      	mov	r3, r9
 800818c:	4640      	mov	r0, r8
 800818e:	4649      	mov	r1, r9
 8008190:	f7f8 fca8 	bl	8000ae4 <__aeabi_dcmpun>
 8008194:	b148      	cbz	r0, 80081aa <_printf_float+0xe2>
 8008196:	464b      	mov	r3, r9
 8008198:	2b00      	cmp	r3, #0
 800819a:	bfb8      	it	lt
 800819c:	232d      	movlt	r3, #45	@ 0x2d
 800819e:	4a80      	ldr	r2, [pc, #512]	@ (80083a0 <_printf_float+0x2d8>)
 80081a0:	bfb8      	it	lt
 80081a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80081a6:	4b7f      	ldr	r3, [pc, #508]	@ (80083a4 <_printf_float+0x2dc>)
 80081a8:	e7d3      	b.n	8008152 <_printf_float+0x8a>
 80081aa:	6863      	ldr	r3, [r4, #4]
 80081ac:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80081b0:	1c5a      	adds	r2, r3, #1
 80081b2:	d13f      	bne.n	8008234 <_printf_float+0x16c>
 80081b4:	2306      	movs	r3, #6
 80081b6:	6063      	str	r3, [r4, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80081be:	6023      	str	r3, [r4, #0]
 80081c0:	9206      	str	r2, [sp, #24]
 80081c2:	aa0e      	add	r2, sp, #56	@ 0x38
 80081c4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80081c8:	aa0d      	add	r2, sp, #52	@ 0x34
 80081ca:	9203      	str	r2, [sp, #12]
 80081cc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80081d0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80081d4:	6863      	ldr	r3, [r4, #4]
 80081d6:	4642      	mov	r2, r8
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	4628      	mov	r0, r5
 80081dc:	464b      	mov	r3, r9
 80081de:	910a      	str	r1, [sp, #40]	@ 0x28
 80081e0:	f7ff fed4 	bl	8007f8c <__cvt>
 80081e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80081e6:	4680      	mov	r8, r0
 80081e8:	2947      	cmp	r1, #71	@ 0x47
 80081ea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80081ec:	d128      	bne.n	8008240 <_printf_float+0x178>
 80081ee:	1cc8      	adds	r0, r1, #3
 80081f0:	db02      	blt.n	80081f8 <_printf_float+0x130>
 80081f2:	6863      	ldr	r3, [r4, #4]
 80081f4:	4299      	cmp	r1, r3
 80081f6:	dd40      	ble.n	800827a <_printf_float+0x1b2>
 80081f8:	f1aa 0a02 	sub.w	sl, sl, #2
 80081fc:	fa5f fa8a 	uxtb.w	sl, sl
 8008200:	4652      	mov	r2, sl
 8008202:	3901      	subs	r1, #1
 8008204:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008208:	910d      	str	r1, [sp, #52]	@ 0x34
 800820a:	f7ff ff23 	bl	8008054 <__exponent>
 800820e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008210:	4681      	mov	r9, r0
 8008212:	1813      	adds	r3, r2, r0
 8008214:	2a01      	cmp	r2, #1
 8008216:	6123      	str	r3, [r4, #16]
 8008218:	dc02      	bgt.n	8008220 <_printf_float+0x158>
 800821a:	6822      	ldr	r2, [r4, #0]
 800821c:	07d2      	lsls	r2, r2, #31
 800821e:	d501      	bpl.n	8008224 <_printf_float+0x15c>
 8008220:	3301      	adds	r3, #1
 8008222:	6123      	str	r3, [r4, #16]
 8008224:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008228:	2b00      	cmp	r3, #0
 800822a:	d09e      	beq.n	800816a <_printf_float+0xa2>
 800822c:	232d      	movs	r3, #45	@ 0x2d
 800822e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008232:	e79a      	b.n	800816a <_printf_float+0xa2>
 8008234:	2947      	cmp	r1, #71	@ 0x47
 8008236:	d1bf      	bne.n	80081b8 <_printf_float+0xf0>
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1bd      	bne.n	80081b8 <_printf_float+0xf0>
 800823c:	2301      	movs	r3, #1
 800823e:	e7ba      	b.n	80081b6 <_printf_float+0xee>
 8008240:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008244:	d9dc      	bls.n	8008200 <_printf_float+0x138>
 8008246:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800824a:	d118      	bne.n	800827e <_printf_float+0x1b6>
 800824c:	2900      	cmp	r1, #0
 800824e:	6863      	ldr	r3, [r4, #4]
 8008250:	dd0b      	ble.n	800826a <_printf_float+0x1a2>
 8008252:	6121      	str	r1, [r4, #16]
 8008254:	b913      	cbnz	r3, 800825c <_printf_float+0x194>
 8008256:	6822      	ldr	r2, [r4, #0]
 8008258:	07d0      	lsls	r0, r2, #31
 800825a:	d502      	bpl.n	8008262 <_printf_float+0x19a>
 800825c:	3301      	adds	r3, #1
 800825e:	440b      	add	r3, r1
 8008260:	6123      	str	r3, [r4, #16]
 8008262:	f04f 0900 	mov.w	r9, #0
 8008266:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008268:	e7dc      	b.n	8008224 <_printf_float+0x15c>
 800826a:	b913      	cbnz	r3, 8008272 <_printf_float+0x1aa>
 800826c:	6822      	ldr	r2, [r4, #0]
 800826e:	07d2      	lsls	r2, r2, #31
 8008270:	d501      	bpl.n	8008276 <_printf_float+0x1ae>
 8008272:	3302      	adds	r3, #2
 8008274:	e7f4      	b.n	8008260 <_printf_float+0x198>
 8008276:	2301      	movs	r3, #1
 8008278:	e7f2      	b.n	8008260 <_printf_float+0x198>
 800827a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800827e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008280:	4299      	cmp	r1, r3
 8008282:	db05      	blt.n	8008290 <_printf_float+0x1c8>
 8008284:	6823      	ldr	r3, [r4, #0]
 8008286:	6121      	str	r1, [r4, #16]
 8008288:	07d8      	lsls	r0, r3, #31
 800828a:	d5ea      	bpl.n	8008262 <_printf_float+0x19a>
 800828c:	1c4b      	adds	r3, r1, #1
 800828e:	e7e7      	b.n	8008260 <_printf_float+0x198>
 8008290:	2900      	cmp	r1, #0
 8008292:	bfcc      	ite	gt
 8008294:	2201      	movgt	r2, #1
 8008296:	f1c1 0202 	rsble	r2, r1, #2
 800829a:	4413      	add	r3, r2
 800829c:	e7e0      	b.n	8008260 <_printf_float+0x198>
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	055a      	lsls	r2, r3, #21
 80082a2:	d407      	bmi.n	80082b4 <_printf_float+0x1ec>
 80082a4:	6923      	ldr	r3, [r4, #16]
 80082a6:	4642      	mov	r2, r8
 80082a8:	4631      	mov	r1, r6
 80082aa:	4628      	mov	r0, r5
 80082ac:	47b8      	blx	r7
 80082ae:	3001      	adds	r0, #1
 80082b0:	d12b      	bne.n	800830a <_printf_float+0x242>
 80082b2:	e764      	b.n	800817e <_printf_float+0xb6>
 80082b4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80082b8:	f240 80dc 	bls.w	8008474 <_printf_float+0x3ac>
 80082bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80082c0:	2200      	movs	r2, #0
 80082c2:	2300      	movs	r3, #0
 80082c4:	f7f8 fbdc 	bl	8000a80 <__aeabi_dcmpeq>
 80082c8:	2800      	cmp	r0, #0
 80082ca:	d033      	beq.n	8008334 <_printf_float+0x26c>
 80082cc:	2301      	movs	r3, #1
 80082ce:	4631      	mov	r1, r6
 80082d0:	4628      	mov	r0, r5
 80082d2:	4a35      	ldr	r2, [pc, #212]	@ (80083a8 <_printf_float+0x2e0>)
 80082d4:	47b8      	blx	r7
 80082d6:	3001      	adds	r0, #1
 80082d8:	f43f af51 	beq.w	800817e <_printf_float+0xb6>
 80082dc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80082e0:	4543      	cmp	r3, r8
 80082e2:	db02      	blt.n	80082ea <_printf_float+0x222>
 80082e4:	6823      	ldr	r3, [r4, #0]
 80082e6:	07d8      	lsls	r0, r3, #31
 80082e8:	d50f      	bpl.n	800830a <_printf_float+0x242>
 80082ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80082ee:	4631      	mov	r1, r6
 80082f0:	4628      	mov	r0, r5
 80082f2:	47b8      	blx	r7
 80082f4:	3001      	adds	r0, #1
 80082f6:	f43f af42 	beq.w	800817e <_printf_float+0xb6>
 80082fa:	f04f 0900 	mov.w	r9, #0
 80082fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8008302:	f104 0a1a 	add.w	sl, r4, #26
 8008306:	45c8      	cmp	r8, r9
 8008308:	dc09      	bgt.n	800831e <_printf_float+0x256>
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	079b      	lsls	r3, r3, #30
 800830e:	f100 8102 	bmi.w	8008516 <_printf_float+0x44e>
 8008312:	68e0      	ldr	r0, [r4, #12]
 8008314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008316:	4298      	cmp	r0, r3
 8008318:	bfb8      	it	lt
 800831a:	4618      	movlt	r0, r3
 800831c:	e731      	b.n	8008182 <_printf_float+0xba>
 800831e:	2301      	movs	r3, #1
 8008320:	4652      	mov	r2, sl
 8008322:	4631      	mov	r1, r6
 8008324:	4628      	mov	r0, r5
 8008326:	47b8      	blx	r7
 8008328:	3001      	adds	r0, #1
 800832a:	f43f af28 	beq.w	800817e <_printf_float+0xb6>
 800832e:	f109 0901 	add.w	r9, r9, #1
 8008332:	e7e8      	b.n	8008306 <_printf_float+0x23e>
 8008334:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008336:	2b00      	cmp	r3, #0
 8008338:	dc38      	bgt.n	80083ac <_printf_float+0x2e4>
 800833a:	2301      	movs	r3, #1
 800833c:	4631      	mov	r1, r6
 800833e:	4628      	mov	r0, r5
 8008340:	4a19      	ldr	r2, [pc, #100]	@ (80083a8 <_printf_float+0x2e0>)
 8008342:	47b8      	blx	r7
 8008344:	3001      	adds	r0, #1
 8008346:	f43f af1a 	beq.w	800817e <_printf_float+0xb6>
 800834a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800834e:	ea59 0303 	orrs.w	r3, r9, r3
 8008352:	d102      	bne.n	800835a <_printf_float+0x292>
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	07d9      	lsls	r1, r3, #31
 8008358:	d5d7      	bpl.n	800830a <_printf_float+0x242>
 800835a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800835e:	4631      	mov	r1, r6
 8008360:	4628      	mov	r0, r5
 8008362:	47b8      	blx	r7
 8008364:	3001      	adds	r0, #1
 8008366:	f43f af0a 	beq.w	800817e <_printf_float+0xb6>
 800836a:	f04f 0a00 	mov.w	sl, #0
 800836e:	f104 0b1a 	add.w	fp, r4, #26
 8008372:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008374:	425b      	negs	r3, r3
 8008376:	4553      	cmp	r3, sl
 8008378:	dc01      	bgt.n	800837e <_printf_float+0x2b6>
 800837a:	464b      	mov	r3, r9
 800837c:	e793      	b.n	80082a6 <_printf_float+0x1de>
 800837e:	2301      	movs	r3, #1
 8008380:	465a      	mov	r2, fp
 8008382:	4631      	mov	r1, r6
 8008384:	4628      	mov	r0, r5
 8008386:	47b8      	blx	r7
 8008388:	3001      	adds	r0, #1
 800838a:	f43f aef8 	beq.w	800817e <_printf_float+0xb6>
 800838e:	f10a 0a01 	add.w	sl, sl, #1
 8008392:	e7ee      	b.n	8008372 <_printf_float+0x2aa>
 8008394:	7fefffff 	.word	0x7fefffff
 8008398:	0800ba72 	.word	0x0800ba72
 800839c:	0800ba76 	.word	0x0800ba76
 80083a0:	0800ba7a 	.word	0x0800ba7a
 80083a4:	0800ba7e 	.word	0x0800ba7e
 80083a8:	0800ba82 	.word	0x0800ba82
 80083ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80083ae:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80083b2:	4553      	cmp	r3, sl
 80083b4:	bfa8      	it	ge
 80083b6:	4653      	movge	r3, sl
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	4699      	mov	r9, r3
 80083bc:	dc36      	bgt.n	800842c <_printf_float+0x364>
 80083be:	f04f 0b00 	mov.w	fp, #0
 80083c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083c6:	f104 021a 	add.w	r2, r4, #26
 80083ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80083cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80083ce:	eba3 0309 	sub.w	r3, r3, r9
 80083d2:	455b      	cmp	r3, fp
 80083d4:	dc31      	bgt.n	800843a <_printf_float+0x372>
 80083d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083d8:	459a      	cmp	sl, r3
 80083da:	dc3a      	bgt.n	8008452 <_printf_float+0x38a>
 80083dc:	6823      	ldr	r3, [r4, #0]
 80083de:	07da      	lsls	r2, r3, #31
 80083e0:	d437      	bmi.n	8008452 <_printf_float+0x38a>
 80083e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083e4:	ebaa 0903 	sub.w	r9, sl, r3
 80083e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083ea:	ebaa 0303 	sub.w	r3, sl, r3
 80083ee:	4599      	cmp	r9, r3
 80083f0:	bfa8      	it	ge
 80083f2:	4699      	movge	r9, r3
 80083f4:	f1b9 0f00 	cmp.w	r9, #0
 80083f8:	dc33      	bgt.n	8008462 <_printf_float+0x39a>
 80083fa:	f04f 0800 	mov.w	r8, #0
 80083fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008402:	f104 0b1a 	add.w	fp, r4, #26
 8008406:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008408:	ebaa 0303 	sub.w	r3, sl, r3
 800840c:	eba3 0309 	sub.w	r3, r3, r9
 8008410:	4543      	cmp	r3, r8
 8008412:	f77f af7a 	ble.w	800830a <_printf_float+0x242>
 8008416:	2301      	movs	r3, #1
 8008418:	465a      	mov	r2, fp
 800841a:	4631      	mov	r1, r6
 800841c:	4628      	mov	r0, r5
 800841e:	47b8      	blx	r7
 8008420:	3001      	adds	r0, #1
 8008422:	f43f aeac 	beq.w	800817e <_printf_float+0xb6>
 8008426:	f108 0801 	add.w	r8, r8, #1
 800842a:	e7ec      	b.n	8008406 <_printf_float+0x33e>
 800842c:	4642      	mov	r2, r8
 800842e:	4631      	mov	r1, r6
 8008430:	4628      	mov	r0, r5
 8008432:	47b8      	blx	r7
 8008434:	3001      	adds	r0, #1
 8008436:	d1c2      	bne.n	80083be <_printf_float+0x2f6>
 8008438:	e6a1      	b.n	800817e <_printf_float+0xb6>
 800843a:	2301      	movs	r3, #1
 800843c:	4631      	mov	r1, r6
 800843e:	4628      	mov	r0, r5
 8008440:	920a      	str	r2, [sp, #40]	@ 0x28
 8008442:	47b8      	blx	r7
 8008444:	3001      	adds	r0, #1
 8008446:	f43f ae9a 	beq.w	800817e <_printf_float+0xb6>
 800844a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800844c:	f10b 0b01 	add.w	fp, fp, #1
 8008450:	e7bb      	b.n	80083ca <_printf_float+0x302>
 8008452:	4631      	mov	r1, r6
 8008454:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008458:	4628      	mov	r0, r5
 800845a:	47b8      	blx	r7
 800845c:	3001      	adds	r0, #1
 800845e:	d1c0      	bne.n	80083e2 <_printf_float+0x31a>
 8008460:	e68d      	b.n	800817e <_printf_float+0xb6>
 8008462:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008464:	464b      	mov	r3, r9
 8008466:	4631      	mov	r1, r6
 8008468:	4628      	mov	r0, r5
 800846a:	4442      	add	r2, r8
 800846c:	47b8      	blx	r7
 800846e:	3001      	adds	r0, #1
 8008470:	d1c3      	bne.n	80083fa <_printf_float+0x332>
 8008472:	e684      	b.n	800817e <_printf_float+0xb6>
 8008474:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008478:	f1ba 0f01 	cmp.w	sl, #1
 800847c:	dc01      	bgt.n	8008482 <_printf_float+0x3ba>
 800847e:	07db      	lsls	r3, r3, #31
 8008480:	d536      	bpl.n	80084f0 <_printf_float+0x428>
 8008482:	2301      	movs	r3, #1
 8008484:	4642      	mov	r2, r8
 8008486:	4631      	mov	r1, r6
 8008488:	4628      	mov	r0, r5
 800848a:	47b8      	blx	r7
 800848c:	3001      	adds	r0, #1
 800848e:	f43f ae76 	beq.w	800817e <_printf_float+0xb6>
 8008492:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008496:	4631      	mov	r1, r6
 8008498:	4628      	mov	r0, r5
 800849a:	47b8      	blx	r7
 800849c:	3001      	adds	r0, #1
 800849e:	f43f ae6e 	beq.w	800817e <_printf_float+0xb6>
 80084a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80084a6:	2200      	movs	r2, #0
 80084a8:	2300      	movs	r3, #0
 80084aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084ae:	f7f8 fae7 	bl	8000a80 <__aeabi_dcmpeq>
 80084b2:	b9c0      	cbnz	r0, 80084e6 <_printf_float+0x41e>
 80084b4:	4653      	mov	r3, sl
 80084b6:	f108 0201 	add.w	r2, r8, #1
 80084ba:	4631      	mov	r1, r6
 80084bc:	4628      	mov	r0, r5
 80084be:	47b8      	blx	r7
 80084c0:	3001      	adds	r0, #1
 80084c2:	d10c      	bne.n	80084de <_printf_float+0x416>
 80084c4:	e65b      	b.n	800817e <_printf_float+0xb6>
 80084c6:	2301      	movs	r3, #1
 80084c8:	465a      	mov	r2, fp
 80084ca:	4631      	mov	r1, r6
 80084cc:	4628      	mov	r0, r5
 80084ce:	47b8      	blx	r7
 80084d0:	3001      	adds	r0, #1
 80084d2:	f43f ae54 	beq.w	800817e <_printf_float+0xb6>
 80084d6:	f108 0801 	add.w	r8, r8, #1
 80084da:	45d0      	cmp	r8, sl
 80084dc:	dbf3      	blt.n	80084c6 <_printf_float+0x3fe>
 80084de:	464b      	mov	r3, r9
 80084e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80084e4:	e6e0      	b.n	80082a8 <_printf_float+0x1e0>
 80084e6:	f04f 0800 	mov.w	r8, #0
 80084ea:	f104 0b1a 	add.w	fp, r4, #26
 80084ee:	e7f4      	b.n	80084da <_printf_float+0x412>
 80084f0:	2301      	movs	r3, #1
 80084f2:	4642      	mov	r2, r8
 80084f4:	e7e1      	b.n	80084ba <_printf_float+0x3f2>
 80084f6:	2301      	movs	r3, #1
 80084f8:	464a      	mov	r2, r9
 80084fa:	4631      	mov	r1, r6
 80084fc:	4628      	mov	r0, r5
 80084fe:	47b8      	blx	r7
 8008500:	3001      	adds	r0, #1
 8008502:	f43f ae3c 	beq.w	800817e <_printf_float+0xb6>
 8008506:	f108 0801 	add.w	r8, r8, #1
 800850a:	68e3      	ldr	r3, [r4, #12]
 800850c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800850e:	1a5b      	subs	r3, r3, r1
 8008510:	4543      	cmp	r3, r8
 8008512:	dcf0      	bgt.n	80084f6 <_printf_float+0x42e>
 8008514:	e6fd      	b.n	8008312 <_printf_float+0x24a>
 8008516:	f04f 0800 	mov.w	r8, #0
 800851a:	f104 0919 	add.w	r9, r4, #25
 800851e:	e7f4      	b.n	800850a <_printf_float+0x442>

08008520 <_printf_common>:
 8008520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008524:	4616      	mov	r6, r2
 8008526:	4698      	mov	r8, r3
 8008528:	688a      	ldr	r2, [r1, #8]
 800852a:	690b      	ldr	r3, [r1, #16]
 800852c:	4607      	mov	r7, r0
 800852e:	4293      	cmp	r3, r2
 8008530:	bfb8      	it	lt
 8008532:	4613      	movlt	r3, r2
 8008534:	6033      	str	r3, [r6, #0]
 8008536:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800853a:	460c      	mov	r4, r1
 800853c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008540:	b10a      	cbz	r2, 8008546 <_printf_common+0x26>
 8008542:	3301      	adds	r3, #1
 8008544:	6033      	str	r3, [r6, #0]
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	0699      	lsls	r1, r3, #26
 800854a:	bf42      	ittt	mi
 800854c:	6833      	ldrmi	r3, [r6, #0]
 800854e:	3302      	addmi	r3, #2
 8008550:	6033      	strmi	r3, [r6, #0]
 8008552:	6825      	ldr	r5, [r4, #0]
 8008554:	f015 0506 	ands.w	r5, r5, #6
 8008558:	d106      	bne.n	8008568 <_printf_common+0x48>
 800855a:	f104 0a19 	add.w	sl, r4, #25
 800855e:	68e3      	ldr	r3, [r4, #12]
 8008560:	6832      	ldr	r2, [r6, #0]
 8008562:	1a9b      	subs	r3, r3, r2
 8008564:	42ab      	cmp	r3, r5
 8008566:	dc2b      	bgt.n	80085c0 <_printf_common+0xa0>
 8008568:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800856c:	6822      	ldr	r2, [r4, #0]
 800856e:	3b00      	subs	r3, #0
 8008570:	bf18      	it	ne
 8008572:	2301      	movne	r3, #1
 8008574:	0692      	lsls	r2, r2, #26
 8008576:	d430      	bmi.n	80085da <_printf_common+0xba>
 8008578:	4641      	mov	r1, r8
 800857a:	4638      	mov	r0, r7
 800857c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008580:	47c8      	blx	r9
 8008582:	3001      	adds	r0, #1
 8008584:	d023      	beq.n	80085ce <_printf_common+0xae>
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	6922      	ldr	r2, [r4, #16]
 800858a:	f003 0306 	and.w	r3, r3, #6
 800858e:	2b04      	cmp	r3, #4
 8008590:	bf14      	ite	ne
 8008592:	2500      	movne	r5, #0
 8008594:	6833      	ldreq	r3, [r6, #0]
 8008596:	f04f 0600 	mov.w	r6, #0
 800859a:	bf08      	it	eq
 800859c:	68e5      	ldreq	r5, [r4, #12]
 800859e:	f104 041a 	add.w	r4, r4, #26
 80085a2:	bf08      	it	eq
 80085a4:	1aed      	subeq	r5, r5, r3
 80085a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80085aa:	bf08      	it	eq
 80085ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085b0:	4293      	cmp	r3, r2
 80085b2:	bfc4      	itt	gt
 80085b4:	1a9b      	subgt	r3, r3, r2
 80085b6:	18ed      	addgt	r5, r5, r3
 80085b8:	42b5      	cmp	r5, r6
 80085ba:	d11a      	bne.n	80085f2 <_printf_common+0xd2>
 80085bc:	2000      	movs	r0, #0
 80085be:	e008      	b.n	80085d2 <_printf_common+0xb2>
 80085c0:	2301      	movs	r3, #1
 80085c2:	4652      	mov	r2, sl
 80085c4:	4641      	mov	r1, r8
 80085c6:	4638      	mov	r0, r7
 80085c8:	47c8      	blx	r9
 80085ca:	3001      	adds	r0, #1
 80085cc:	d103      	bne.n	80085d6 <_printf_common+0xb6>
 80085ce:	f04f 30ff 	mov.w	r0, #4294967295
 80085d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d6:	3501      	adds	r5, #1
 80085d8:	e7c1      	b.n	800855e <_printf_common+0x3e>
 80085da:	2030      	movs	r0, #48	@ 0x30
 80085dc:	18e1      	adds	r1, r4, r3
 80085de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80085e2:	1c5a      	adds	r2, r3, #1
 80085e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80085e8:	4422      	add	r2, r4
 80085ea:	3302      	adds	r3, #2
 80085ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80085f0:	e7c2      	b.n	8008578 <_printf_common+0x58>
 80085f2:	2301      	movs	r3, #1
 80085f4:	4622      	mov	r2, r4
 80085f6:	4641      	mov	r1, r8
 80085f8:	4638      	mov	r0, r7
 80085fa:	47c8      	blx	r9
 80085fc:	3001      	adds	r0, #1
 80085fe:	d0e6      	beq.n	80085ce <_printf_common+0xae>
 8008600:	3601      	adds	r6, #1
 8008602:	e7d9      	b.n	80085b8 <_printf_common+0x98>

08008604 <_printf_i>:
 8008604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008608:	7e0f      	ldrb	r7, [r1, #24]
 800860a:	4691      	mov	r9, r2
 800860c:	2f78      	cmp	r7, #120	@ 0x78
 800860e:	4680      	mov	r8, r0
 8008610:	460c      	mov	r4, r1
 8008612:	469a      	mov	sl, r3
 8008614:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008616:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800861a:	d807      	bhi.n	800862c <_printf_i+0x28>
 800861c:	2f62      	cmp	r7, #98	@ 0x62
 800861e:	d80a      	bhi.n	8008636 <_printf_i+0x32>
 8008620:	2f00      	cmp	r7, #0
 8008622:	f000 80d3 	beq.w	80087cc <_printf_i+0x1c8>
 8008626:	2f58      	cmp	r7, #88	@ 0x58
 8008628:	f000 80ba 	beq.w	80087a0 <_printf_i+0x19c>
 800862c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008630:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008634:	e03a      	b.n	80086ac <_printf_i+0xa8>
 8008636:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800863a:	2b15      	cmp	r3, #21
 800863c:	d8f6      	bhi.n	800862c <_printf_i+0x28>
 800863e:	a101      	add	r1, pc, #4	@ (adr r1, 8008644 <_printf_i+0x40>)
 8008640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008644:	0800869d 	.word	0x0800869d
 8008648:	080086b1 	.word	0x080086b1
 800864c:	0800862d 	.word	0x0800862d
 8008650:	0800862d 	.word	0x0800862d
 8008654:	0800862d 	.word	0x0800862d
 8008658:	0800862d 	.word	0x0800862d
 800865c:	080086b1 	.word	0x080086b1
 8008660:	0800862d 	.word	0x0800862d
 8008664:	0800862d 	.word	0x0800862d
 8008668:	0800862d 	.word	0x0800862d
 800866c:	0800862d 	.word	0x0800862d
 8008670:	080087b3 	.word	0x080087b3
 8008674:	080086db 	.word	0x080086db
 8008678:	0800876d 	.word	0x0800876d
 800867c:	0800862d 	.word	0x0800862d
 8008680:	0800862d 	.word	0x0800862d
 8008684:	080087d5 	.word	0x080087d5
 8008688:	0800862d 	.word	0x0800862d
 800868c:	080086db 	.word	0x080086db
 8008690:	0800862d 	.word	0x0800862d
 8008694:	0800862d 	.word	0x0800862d
 8008698:	08008775 	.word	0x08008775
 800869c:	6833      	ldr	r3, [r6, #0]
 800869e:	1d1a      	adds	r2, r3, #4
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	6032      	str	r2, [r6, #0]
 80086a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80086ac:	2301      	movs	r3, #1
 80086ae:	e09e      	b.n	80087ee <_printf_i+0x1ea>
 80086b0:	6833      	ldr	r3, [r6, #0]
 80086b2:	6820      	ldr	r0, [r4, #0]
 80086b4:	1d19      	adds	r1, r3, #4
 80086b6:	6031      	str	r1, [r6, #0]
 80086b8:	0606      	lsls	r6, r0, #24
 80086ba:	d501      	bpl.n	80086c0 <_printf_i+0xbc>
 80086bc:	681d      	ldr	r5, [r3, #0]
 80086be:	e003      	b.n	80086c8 <_printf_i+0xc4>
 80086c0:	0645      	lsls	r5, r0, #25
 80086c2:	d5fb      	bpl.n	80086bc <_printf_i+0xb8>
 80086c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80086c8:	2d00      	cmp	r5, #0
 80086ca:	da03      	bge.n	80086d4 <_printf_i+0xd0>
 80086cc:	232d      	movs	r3, #45	@ 0x2d
 80086ce:	426d      	negs	r5, r5
 80086d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086d4:	230a      	movs	r3, #10
 80086d6:	4859      	ldr	r0, [pc, #356]	@ (800883c <_printf_i+0x238>)
 80086d8:	e011      	b.n	80086fe <_printf_i+0xfa>
 80086da:	6821      	ldr	r1, [r4, #0]
 80086dc:	6833      	ldr	r3, [r6, #0]
 80086de:	0608      	lsls	r0, r1, #24
 80086e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80086e4:	d402      	bmi.n	80086ec <_printf_i+0xe8>
 80086e6:	0649      	lsls	r1, r1, #25
 80086e8:	bf48      	it	mi
 80086ea:	b2ad      	uxthmi	r5, r5
 80086ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80086ee:	6033      	str	r3, [r6, #0]
 80086f0:	bf14      	ite	ne
 80086f2:	230a      	movne	r3, #10
 80086f4:	2308      	moveq	r3, #8
 80086f6:	4851      	ldr	r0, [pc, #324]	@ (800883c <_printf_i+0x238>)
 80086f8:	2100      	movs	r1, #0
 80086fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086fe:	6866      	ldr	r6, [r4, #4]
 8008700:	2e00      	cmp	r6, #0
 8008702:	bfa8      	it	ge
 8008704:	6821      	ldrge	r1, [r4, #0]
 8008706:	60a6      	str	r6, [r4, #8]
 8008708:	bfa4      	itt	ge
 800870a:	f021 0104 	bicge.w	r1, r1, #4
 800870e:	6021      	strge	r1, [r4, #0]
 8008710:	b90d      	cbnz	r5, 8008716 <_printf_i+0x112>
 8008712:	2e00      	cmp	r6, #0
 8008714:	d04b      	beq.n	80087ae <_printf_i+0x1aa>
 8008716:	4616      	mov	r6, r2
 8008718:	fbb5 f1f3 	udiv	r1, r5, r3
 800871c:	fb03 5711 	mls	r7, r3, r1, r5
 8008720:	5dc7      	ldrb	r7, [r0, r7]
 8008722:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008726:	462f      	mov	r7, r5
 8008728:	42bb      	cmp	r3, r7
 800872a:	460d      	mov	r5, r1
 800872c:	d9f4      	bls.n	8008718 <_printf_i+0x114>
 800872e:	2b08      	cmp	r3, #8
 8008730:	d10b      	bne.n	800874a <_printf_i+0x146>
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	07df      	lsls	r7, r3, #31
 8008736:	d508      	bpl.n	800874a <_printf_i+0x146>
 8008738:	6923      	ldr	r3, [r4, #16]
 800873a:	6861      	ldr	r1, [r4, #4]
 800873c:	4299      	cmp	r1, r3
 800873e:	bfde      	ittt	le
 8008740:	2330      	movle	r3, #48	@ 0x30
 8008742:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008746:	f106 36ff 	addle.w	r6, r6, #4294967295
 800874a:	1b92      	subs	r2, r2, r6
 800874c:	6122      	str	r2, [r4, #16]
 800874e:	464b      	mov	r3, r9
 8008750:	4621      	mov	r1, r4
 8008752:	4640      	mov	r0, r8
 8008754:	f8cd a000 	str.w	sl, [sp]
 8008758:	aa03      	add	r2, sp, #12
 800875a:	f7ff fee1 	bl	8008520 <_printf_common>
 800875e:	3001      	adds	r0, #1
 8008760:	d14a      	bne.n	80087f8 <_printf_i+0x1f4>
 8008762:	f04f 30ff 	mov.w	r0, #4294967295
 8008766:	b004      	add	sp, #16
 8008768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800876c:	6823      	ldr	r3, [r4, #0]
 800876e:	f043 0320 	orr.w	r3, r3, #32
 8008772:	6023      	str	r3, [r4, #0]
 8008774:	2778      	movs	r7, #120	@ 0x78
 8008776:	4832      	ldr	r0, [pc, #200]	@ (8008840 <_printf_i+0x23c>)
 8008778:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	6831      	ldr	r1, [r6, #0]
 8008780:	061f      	lsls	r7, r3, #24
 8008782:	f851 5b04 	ldr.w	r5, [r1], #4
 8008786:	d402      	bmi.n	800878e <_printf_i+0x18a>
 8008788:	065f      	lsls	r7, r3, #25
 800878a:	bf48      	it	mi
 800878c:	b2ad      	uxthmi	r5, r5
 800878e:	6031      	str	r1, [r6, #0]
 8008790:	07d9      	lsls	r1, r3, #31
 8008792:	bf44      	itt	mi
 8008794:	f043 0320 	orrmi.w	r3, r3, #32
 8008798:	6023      	strmi	r3, [r4, #0]
 800879a:	b11d      	cbz	r5, 80087a4 <_printf_i+0x1a0>
 800879c:	2310      	movs	r3, #16
 800879e:	e7ab      	b.n	80086f8 <_printf_i+0xf4>
 80087a0:	4826      	ldr	r0, [pc, #152]	@ (800883c <_printf_i+0x238>)
 80087a2:	e7e9      	b.n	8008778 <_printf_i+0x174>
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	f023 0320 	bic.w	r3, r3, #32
 80087aa:	6023      	str	r3, [r4, #0]
 80087ac:	e7f6      	b.n	800879c <_printf_i+0x198>
 80087ae:	4616      	mov	r6, r2
 80087b0:	e7bd      	b.n	800872e <_printf_i+0x12a>
 80087b2:	6833      	ldr	r3, [r6, #0]
 80087b4:	6825      	ldr	r5, [r4, #0]
 80087b6:	1d18      	adds	r0, r3, #4
 80087b8:	6961      	ldr	r1, [r4, #20]
 80087ba:	6030      	str	r0, [r6, #0]
 80087bc:	062e      	lsls	r6, r5, #24
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	d501      	bpl.n	80087c6 <_printf_i+0x1c2>
 80087c2:	6019      	str	r1, [r3, #0]
 80087c4:	e002      	b.n	80087cc <_printf_i+0x1c8>
 80087c6:	0668      	lsls	r0, r5, #25
 80087c8:	d5fb      	bpl.n	80087c2 <_printf_i+0x1be>
 80087ca:	8019      	strh	r1, [r3, #0]
 80087cc:	2300      	movs	r3, #0
 80087ce:	4616      	mov	r6, r2
 80087d0:	6123      	str	r3, [r4, #16]
 80087d2:	e7bc      	b.n	800874e <_printf_i+0x14a>
 80087d4:	6833      	ldr	r3, [r6, #0]
 80087d6:	2100      	movs	r1, #0
 80087d8:	1d1a      	adds	r2, r3, #4
 80087da:	6032      	str	r2, [r6, #0]
 80087dc:	681e      	ldr	r6, [r3, #0]
 80087de:	6862      	ldr	r2, [r4, #4]
 80087e0:	4630      	mov	r0, r6
 80087e2:	f000 f9b4 	bl	8008b4e <memchr>
 80087e6:	b108      	cbz	r0, 80087ec <_printf_i+0x1e8>
 80087e8:	1b80      	subs	r0, r0, r6
 80087ea:	6060      	str	r0, [r4, #4]
 80087ec:	6863      	ldr	r3, [r4, #4]
 80087ee:	6123      	str	r3, [r4, #16]
 80087f0:	2300      	movs	r3, #0
 80087f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087f6:	e7aa      	b.n	800874e <_printf_i+0x14a>
 80087f8:	4632      	mov	r2, r6
 80087fa:	4649      	mov	r1, r9
 80087fc:	4640      	mov	r0, r8
 80087fe:	6923      	ldr	r3, [r4, #16]
 8008800:	47d0      	blx	sl
 8008802:	3001      	adds	r0, #1
 8008804:	d0ad      	beq.n	8008762 <_printf_i+0x15e>
 8008806:	6823      	ldr	r3, [r4, #0]
 8008808:	079b      	lsls	r3, r3, #30
 800880a:	d413      	bmi.n	8008834 <_printf_i+0x230>
 800880c:	68e0      	ldr	r0, [r4, #12]
 800880e:	9b03      	ldr	r3, [sp, #12]
 8008810:	4298      	cmp	r0, r3
 8008812:	bfb8      	it	lt
 8008814:	4618      	movlt	r0, r3
 8008816:	e7a6      	b.n	8008766 <_printf_i+0x162>
 8008818:	2301      	movs	r3, #1
 800881a:	4632      	mov	r2, r6
 800881c:	4649      	mov	r1, r9
 800881e:	4640      	mov	r0, r8
 8008820:	47d0      	blx	sl
 8008822:	3001      	adds	r0, #1
 8008824:	d09d      	beq.n	8008762 <_printf_i+0x15e>
 8008826:	3501      	adds	r5, #1
 8008828:	68e3      	ldr	r3, [r4, #12]
 800882a:	9903      	ldr	r1, [sp, #12]
 800882c:	1a5b      	subs	r3, r3, r1
 800882e:	42ab      	cmp	r3, r5
 8008830:	dcf2      	bgt.n	8008818 <_printf_i+0x214>
 8008832:	e7eb      	b.n	800880c <_printf_i+0x208>
 8008834:	2500      	movs	r5, #0
 8008836:	f104 0619 	add.w	r6, r4, #25
 800883a:	e7f5      	b.n	8008828 <_printf_i+0x224>
 800883c:	0800ba84 	.word	0x0800ba84
 8008840:	0800ba95 	.word	0x0800ba95

08008844 <std>:
 8008844:	2300      	movs	r3, #0
 8008846:	b510      	push	{r4, lr}
 8008848:	4604      	mov	r4, r0
 800884a:	e9c0 3300 	strd	r3, r3, [r0]
 800884e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008852:	6083      	str	r3, [r0, #8]
 8008854:	8181      	strh	r1, [r0, #12]
 8008856:	6643      	str	r3, [r0, #100]	@ 0x64
 8008858:	81c2      	strh	r2, [r0, #14]
 800885a:	6183      	str	r3, [r0, #24]
 800885c:	4619      	mov	r1, r3
 800885e:	2208      	movs	r2, #8
 8008860:	305c      	adds	r0, #92	@ 0x5c
 8008862:	f000 f8f4 	bl	8008a4e <memset>
 8008866:	4b0d      	ldr	r3, [pc, #52]	@ (800889c <std+0x58>)
 8008868:	6224      	str	r4, [r4, #32]
 800886a:	6263      	str	r3, [r4, #36]	@ 0x24
 800886c:	4b0c      	ldr	r3, [pc, #48]	@ (80088a0 <std+0x5c>)
 800886e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008870:	4b0c      	ldr	r3, [pc, #48]	@ (80088a4 <std+0x60>)
 8008872:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008874:	4b0c      	ldr	r3, [pc, #48]	@ (80088a8 <std+0x64>)
 8008876:	6323      	str	r3, [r4, #48]	@ 0x30
 8008878:	4b0c      	ldr	r3, [pc, #48]	@ (80088ac <std+0x68>)
 800887a:	429c      	cmp	r4, r3
 800887c:	d006      	beq.n	800888c <std+0x48>
 800887e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008882:	4294      	cmp	r4, r2
 8008884:	d002      	beq.n	800888c <std+0x48>
 8008886:	33d0      	adds	r3, #208	@ 0xd0
 8008888:	429c      	cmp	r4, r3
 800888a:	d105      	bne.n	8008898 <std+0x54>
 800888c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008894:	f000 b958 	b.w	8008b48 <__retarget_lock_init_recursive>
 8008898:	bd10      	pop	{r4, pc}
 800889a:	bf00      	nop
 800889c:	080089c9 	.word	0x080089c9
 80088a0:	080089eb 	.word	0x080089eb
 80088a4:	08008a23 	.word	0x08008a23
 80088a8:	08008a47 	.word	0x08008a47
 80088ac:	200005b0 	.word	0x200005b0

080088b0 <stdio_exit_handler>:
 80088b0:	4a02      	ldr	r2, [pc, #8]	@ (80088bc <stdio_exit_handler+0xc>)
 80088b2:	4903      	ldr	r1, [pc, #12]	@ (80088c0 <stdio_exit_handler+0x10>)
 80088b4:	4803      	ldr	r0, [pc, #12]	@ (80088c4 <stdio_exit_handler+0x14>)
 80088b6:	f000 b869 	b.w	800898c <_fwalk_sglue>
 80088ba:	bf00      	nop
 80088bc:	20000058 	.word	0x20000058
 80088c0:	0800a20d 	.word	0x0800a20d
 80088c4:	20000068 	.word	0x20000068

080088c8 <cleanup_stdio>:
 80088c8:	6841      	ldr	r1, [r0, #4]
 80088ca:	4b0c      	ldr	r3, [pc, #48]	@ (80088fc <cleanup_stdio+0x34>)
 80088cc:	b510      	push	{r4, lr}
 80088ce:	4299      	cmp	r1, r3
 80088d0:	4604      	mov	r4, r0
 80088d2:	d001      	beq.n	80088d8 <cleanup_stdio+0x10>
 80088d4:	f001 fc9a 	bl	800a20c <_fflush_r>
 80088d8:	68a1      	ldr	r1, [r4, #8]
 80088da:	4b09      	ldr	r3, [pc, #36]	@ (8008900 <cleanup_stdio+0x38>)
 80088dc:	4299      	cmp	r1, r3
 80088de:	d002      	beq.n	80088e6 <cleanup_stdio+0x1e>
 80088e0:	4620      	mov	r0, r4
 80088e2:	f001 fc93 	bl	800a20c <_fflush_r>
 80088e6:	68e1      	ldr	r1, [r4, #12]
 80088e8:	4b06      	ldr	r3, [pc, #24]	@ (8008904 <cleanup_stdio+0x3c>)
 80088ea:	4299      	cmp	r1, r3
 80088ec:	d004      	beq.n	80088f8 <cleanup_stdio+0x30>
 80088ee:	4620      	mov	r0, r4
 80088f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088f4:	f001 bc8a 	b.w	800a20c <_fflush_r>
 80088f8:	bd10      	pop	{r4, pc}
 80088fa:	bf00      	nop
 80088fc:	200005b0 	.word	0x200005b0
 8008900:	20000618 	.word	0x20000618
 8008904:	20000680 	.word	0x20000680

08008908 <global_stdio_init.part.0>:
 8008908:	b510      	push	{r4, lr}
 800890a:	4b0b      	ldr	r3, [pc, #44]	@ (8008938 <global_stdio_init.part.0+0x30>)
 800890c:	4c0b      	ldr	r4, [pc, #44]	@ (800893c <global_stdio_init.part.0+0x34>)
 800890e:	4a0c      	ldr	r2, [pc, #48]	@ (8008940 <global_stdio_init.part.0+0x38>)
 8008910:	4620      	mov	r0, r4
 8008912:	601a      	str	r2, [r3, #0]
 8008914:	2104      	movs	r1, #4
 8008916:	2200      	movs	r2, #0
 8008918:	f7ff ff94 	bl	8008844 <std>
 800891c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008920:	2201      	movs	r2, #1
 8008922:	2109      	movs	r1, #9
 8008924:	f7ff ff8e 	bl	8008844 <std>
 8008928:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800892c:	2202      	movs	r2, #2
 800892e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008932:	2112      	movs	r1, #18
 8008934:	f7ff bf86 	b.w	8008844 <std>
 8008938:	200006e8 	.word	0x200006e8
 800893c:	200005b0 	.word	0x200005b0
 8008940:	080088b1 	.word	0x080088b1

08008944 <__sfp_lock_acquire>:
 8008944:	4801      	ldr	r0, [pc, #4]	@ (800894c <__sfp_lock_acquire+0x8>)
 8008946:	f000 b900 	b.w	8008b4a <__retarget_lock_acquire_recursive>
 800894a:	bf00      	nop
 800894c:	200006f1 	.word	0x200006f1

08008950 <__sfp_lock_release>:
 8008950:	4801      	ldr	r0, [pc, #4]	@ (8008958 <__sfp_lock_release+0x8>)
 8008952:	f000 b8fb 	b.w	8008b4c <__retarget_lock_release_recursive>
 8008956:	bf00      	nop
 8008958:	200006f1 	.word	0x200006f1

0800895c <__sinit>:
 800895c:	b510      	push	{r4, lr}
 800895e:	4604      	mov	r4, r0
 8008960:	f7ff fff0 	bl	8008944 <__sfp_lock_acquire>
 8008964:	6a23      	ldr	r3, [r4, #32]
 8008966:	b11b      	cbz	r3, 8008970 <__sinit+0x14>
 8008968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800896c:	f7ff bff0 	b.w	8008950 <__sfp_lock_release>
 8008970:	4b04      	ldr	r3, [pc, #16]	@ (8008984 <__sinit+0x28>)
 8008972:	6223      	str	r3, [r4, #32]
 8008974:	4b04      	ldr	r3, [pc, #16]	@ (8008988 <__sinit+0x2c>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1f5      	bne.n	8008968 <__sinit+0xc>
 800897c:	f7ff ffc4 	bl	8008908 <global_stdio_init.part.0>
 8008980:	e7f2      	b.n	8008968 <__sinit+0xc>
 8008982:	bf00      	nop
 8008984:	080088c9 	.word	0x080088c9
 8008988:	200006e8 	.word	0x200006e8

0800898c <_fwalk_sglue>:
 800898c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008990:	4607      	mov	r7, r0
 8008992:	4688      	mov	r8, r1
 8008994:	4614      	mov	r4, r2
 8008996:	2600      	movs	r6, #0
 8008998:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800899c:	f1b9 0901 	subs.w	r9, r9, #1
 80089a0:	d505      	bpl.n	80089ae <_fwalk_sglue+0x22>
 80089a2:	6824      	ldr	r4, [r4, #0]
 80089a4:	2c00      	cmp	r4, #0
 80089a6:	d1f7      	bne.n	8008998 <_fwalk_sglue+0xc>
 80089a8:	4630      	mov	r0, r6
 80089aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ae:	89ab      	ldrh	r3, [r5, #12]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d907      	bls.n	80089c4 <_fwalk_sglue+0x38>
 80089b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089b8:	3301      	adds	r3, #1
 80089ba:	d003      	beq.n	80089c4 <_fwalk_sglue+0x38>
 80089bc:	4629      	mov	r1, r5
 80089be:	4638      	mov	r0, r7
 80089c0:	47c0      	blx	r8
 80089c2:	4306      	orrs	r6, r0
 80089c4:	3568      	adds	r5, #104	@ 0x68
 80089c6:	e7e9      	b.n	800899c <_fwalk_sglue+0x10>

080089c8 <__sread>:
 80089c8:	b510      	push	{r4, lr}
 80089ca:	460c      	mov	r4, r1
 80089cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d0:	f000 f86c 	bl	8008aac <_read_r>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	bfab      	itete	ge
 80089d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80089da:	89a3      	ldrhlt	r3, [r4, #12]
 80089dc:	181b      	addge	r3, r3, r0
 80089de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80089e2:	bfac      	ite	ge
 80089e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80089e6:	81a3      	strhlt	r3, [r4, #12]
 80089e8:	bd10      	pop	{r4, pc}

080089ea <__swrite>:
 80089ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ee:	461f      	mov	r7, r3
 80089f0:	898b      	ldrh	r3, [r1, #12]
 80089f2:	4605      	mov	r5, r0
 80089f4:	05db      	lsls	r3, r3, #23
 80089f6:	460c      	mov	r4, r1
 80089f8:	4616      	mov	r6, r2
 80089fa:	d505      	bpl.n	8008a08 <__swrite+0x1e>
 80089fc:	2302      	movs	r3, #2
 80089fe:	2200      	movs	r2, #0
 8008a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a04:	f000 f840 	bl	8008a88 <_lseek_r>
 8008a08:	89a3      	ldrh	r3, [r4, #12]
 8008a0a:	4632      	mov	r2, r6
 8008a0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a10:	81a3      	strh	r3, [r4, #12]
 8008a12:	4628      	mov	r0, r5
 8008a14:	463b      	mov	r3, r7
 8008a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1e:	f000 b857 	b.w	8008ad0 <_write_r>

08008a22 <__sseek>:
 8008a22:	b510      	push	{r4, lr}
 8008a24:	460c      	mov	r4, r1
 8008a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2a:	f000 f82d 	bl	8008a88 <_lseek_r>
 8008a2e:	1c43      	adds	r3, r0, #1
 8008a30:	89a3      	ldrh	r3, [r4, #12]
 8008a32:	bf15      	itete	ne
 8008a34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008a36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008a3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008a3e:	81a3      	strheq	r3, [r4, #12]
 8008a40:	bf18      	it	ne
 8008a42:	81a3      	strhne	r3, [r4, #12]
 8008a44:	bd10      	pop	{r4, pc}

08008a46 <__sclose>:
 8008a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a4a:	f000 b80d 	b.w	8008a68 <_close_r>

08008a4e <memset>:
 8008a4e:	4603      	mov	r3, r0
 8008a50:	4402      	add	r2, r0
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d100      	bne.n	8008a58 <memset+0xa>
 8008a56:	4770      	bx	lr
 8008a58:	f803 1b01 	strb.w	r1, [r3], #1
 8008a5c:	e7f9      	b.n	8008a52 <memset+0x4>
	...

08008a60 <_localeconv_r>:
 8008a60:	4800      	ldr	r0, [pc, #0]	@ (8008a64 <_localeconv_r+0x4>)
 8008a62:	4770      	bx	lr
 8008a64:	200001a4 	.word	0x200001a4

08008a68 <_close_r>:
 8008a68:	b538      	push	{r3, r4, r5, lr}
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	4d05      	ldr	r5, [pc, #20]	@ (8008a84 <_close_r+0x1c>)
 8008a6e:	4604      	mov	r4, r0
 8008a70:	4608      	mov	r0, r1
 8008a72:	602b      	str	r3, [r5, #0]
 8008a74:	f7fa fc37 	bl	80032e6 <_close>
 8008a78:	1c43      	adds	r3, r0, #1
 8008a7a:	d102      	bne.n	8008a82 <_close_r+0x1a>
 8008a7c:	682b      	ldr	r3, [r5, #0]
 8008a7e:	b103      	cbz	r3, 8008a82 <_close_r+0x1a>
 8008a80:	6023      	str	r3, [r4, #0]
 8008a82:	bd38      	pop	{r3, r4, r5, pc}
 8008a84:	200006ec 	.word	0x200006ec

08008a88 <_lseek_r>:
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	4608      	mov	r0, r1
 8008a8e:	4611      	mov	r1, r2
 8008a90:	2200      	movs	r2, #0
 8008a92:	4d05      	ldr	r5, [pc, #20]	@ (8008aa8 <_lseek_r+0x20>)
 8008a94:	602a      	str	r2, [r5, #0]
 8008a96:	461a      	mov	r2, r3
 8008a98:	f7fa fc49 	bl	800332e <_lseek>
 8008a9c:	1c43      	adds	r3, r0, #1
 8008a9e:	d102      	bne.n	8008aa6 <_lseek_r+0x1e>
 8008aa0:	682b      	ldr	r3, [r5, #0]
 8008aa2:	b103      	cbz	r3, 8008aa6 <_lseek_r+0x1e>
 8008aa4:	6023      	str	r3, [r4, #0]
 8008aa6:	bd38      	pop	{r3, r4, r5, pc}
 8008aa8:	200006ec 	.word	0x200006ec

08008aac <_read_r>:
 8008aac:	b538      	push	{r3, r4, r5, lr}
 8008aae:	4604      	mov	r4, r0
 8008ab0:	4608      	mov	r0, r1
 8008ab2:	4611      	mov	r1, r2
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	4d05      	ldr	r5, [pc, #20]	@ (8008acc <_read_r+0x20>)
 8008ab8:	602a      	str	r2, [r5, #0]
 8008aba:	461a      	mov	r2, r3
 8008abc:	f7fa fbda 	bl	8003274 <_read>
 8008ac0:	1c43      	adds	r3, r0, #1
 8008ac2:	d102      	bne.n	8008aca <_read_r+0x1e>
 8008ac4:	682b      	ldr	r3, [r5, #0]
 8008ac6:	b103      	cbz	r3, 8008aca <_read_r+0x1e>
 8008ac8:	6023      	str	r3, [r4, #0]
 8008aca:	bd38      	pop	{r3, r4, r5, pc}
 8008acc:	200006ec 	.word	0x200006ec

08008ad0 <_write_r>:
 8008ad0:	b538      	push	{r3, r4, r5, lr}
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	4608      	mov	r0, r1
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	2200      	movs	r2, #0
 8008ada:	4d05      	ldr	r5, [pc, #20]	@ (8008af0 <_write_r+0x20>)
 8008adc:	602a      	str	r2, [r5, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f7fa fbe5 	bl	80032ae <_write>
 8008ae4:	1c43      	adds	r3, r0, #1
 8008ae6:	d102      	bne.n	8008aee <_write_r+0x1e>
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	b103      	cbz	r3, 8008aee <_write_r+0x1e>
 8008aec:	6023      	str	r3, [r4, #0]
 8008aee:	bd38      	pop	{r3, r4, r5, pc}
 8008af0:	200006ec 	.word	0x200006ec

08008af4 <__errno>:
 8008af4:	4b01      	ldr	r3, [pc, #4]	@ (8008afc <__errno+0x8>)
 8008af6:	6818      	ldr	r0, [r3, #0]
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	20000064 	.word	0x20000064

08008b00 <__libc_init_array>:
 8008b00:	b570      	push	{r4, r5, r6, lr}
 8008b02:	2600      	movs	r6, #0
 8008b04:	4d0c      	ldr	r5, [pc, #48]	@ (8008b38 <__libc_init_array+0x38>)
 8008b06:	4c0d      	ldr	r4, [pc, #52]	@ (8008b3c <__libc_init_array+0x3c>)
 8008b08:	1b64      	subs	r4, r4, r5
 8008b0a:	10a4      	asrs	r4, r4, #2
 8008b0c:	42a6      	cmp	r6, r4
 8008b0e:	d109      	bne.n	8008b24 <__libc_init_array+0x24>
 8008b10:	f002 ff8c 	bl	800ba2c <_init>
 8008b14:	2600      	movs	r6, #0
 8008b16:	4d0a      	ldr	r5, [pc, #40]	@ (8008b40 <__libc_init_array+0x40>)
 8008b18:	4c0a      	ldr	r4, [pc, #40]	@ (8008b44 <__libc_init_array+0x44>)
 8008b1a:	1b64      	subs	r4, r4, r5
 8008b1c:	10a4      	asrs	r4, r4, #2
 8008b1e:	42a6      	cmp	r6, r4
 8008b20:	d105      	bne.n	8008b2e <__libc_init_array+0x2e>
 8008b22:	bd70      	pop	{r4, r5, r6, pc}
 8008b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b28:	4798      	blx	r3
 8008b2a:	3601      	adds	r6, #1
 8008b2c:	e7ee      	b.n	8008b0c <__libc_init_array+0xc>
 8008b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b32:	4798      	blx	r3
 8008b34:	3601      	adds	r6, #1
 8008b36:	e7f2      	b.n	8008b1e <__libc_init_array+0x1e>
 8008b38:	0800be58 	.word	0x0800be58
 8008b3c:	0800be58 	.word	0x0800be58
 8008b40:	0800be58 	.word	0x0800be58
 8008b44:	0800be5c 	.word	0x0800be5c

08008b48 <__retarget_lock_init_recursive>:
 8008b48:	4770      	bx	lr

08008b4a <__retarget_lock_acquire_recursive>:
 8008b4a:	4770      	bx	lr

08008b4c <__retarget_lock_release_recursive>:
 8008b4c:	4770      	bx	lr

08008b4e <memchr>:
 8008b4e:	4603      	mov	r3, r0
 8008b50:	b510      	push	{r4, lr}
 8008b52:	b2c9      	uxtb	r1, r1
 8008b54:	4402      	add	r2, r0
 8008b56:	4293      	cmp	r3, r2
 8008b58:	4618      	mov	r0, r3
 8008b5a:	d101      	bne.n	8008b60 <memchr+0x12>
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	e003      	b.n	8008b68 <memchr+0x1a>
 8008b60:	7804      	ldrb	r4, [r0, #0]
 8008b62:	3301      	adds	r3, #1
 8008b64:	428c      	cmp	r4, r1
 8008b66:	d1f6      	bne.n	8008b56 <memchr+0x8>
 8008b68:	bd10      	pop	{r4, pc}

08008b6a <quorem>:
 8008b6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6e:	6903      	ldr	r3, [r0, #16]
 8008b70:	690c      	ldr	r4, [r1, #16]
 8008b72:	4607      	mov	r7, r0
 8008b74:	42a3      	cmp	r3, r4
 8008b76:	db7e      	blt.n	8008c76 <quorem+0x10c>
 8008b78:	3c01      	subs	r4, #1
 8008b7a:	00a3      	lsls	r3, r4, #2
 8008b7c:	f100 0514 	add.w	r5, r0, #20
 8008b80:	f101 0814 	add.w	r8, r1, #20
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b8a:	9301      	str	r3, [sp, #4]
 8008b8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b94:	3301      	adds	r3, #1
 8008b96:	429a      	cmp	r2, r3
 8008b98:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ba0:	d32e      	bcc.n	8008c00 <quorem+0x96>
 8008ba2:	f04f 0a00 	mov.w	sl, #0
 8008ba6:	46c4      	mov	ip, r8
 8008ba8:	46ae      	mov	lr, r5
 8008baa:	46d3      	mov	fp, sl
 8008bac:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008bb0:	b298      	uxth	r0, r3
 8008bb2:	fb06 a000 	mla	r0, r6, r0, sl
 8008bb6:	0c1b      	lsrs	r3, r3, #16
 8008bb8:	0c02      	lsrs	r2, r0, #16
 8008bba:	fb06 2303 	mla	r3, r6, r3, r2
 8008bbe:	f8de 2000 	ldr.w	r2, [lr]
 8008bc2:	b280      	uxth	r0, r0
 8008bc4:	b292      	uxth	r2, r2
 8008bc6:	1a12      	subs	r2, r2, r0
 8008bc8:	445a      	add	r2, fp
 8008bca:	f8de 0000 	ldr.w	r0, [lr]
 8008bce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008bd8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008bdc:	b292      	uxth	r2, r2
 8008bde:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008be2:	45e1      	cmp	r9, ip
 8008be4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008be8:	f84e 2b04 	str.w	r2, [lr], #4
 8008bec:	d2de      	bcs.n	8008bac <quorem+0x42>
 8008bee:	9b00      	ldr	r3, [sp, #0]
 8008bf0:	58eb      	ldr	r3, [r5, r3]
 8008bf2:	b92b      	cbnz	r3, 8008c00 <quorem+0x96>
 8008bf4:	9b01      	ldr	r3, [sp, #4]
 8008bf6:	3b04      	subs	r3, #4
 8008bf8:	429d      	cmp	r5, r3
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	d32f      	bcc.n	8008c5e <quorem+0xf4>
 8008bfe:	613c      	str	r4, [r7, #16]
 8008c00:	4638      	mov	r0, r7
 8008c02:	f001 f97b 	bl	8009efc <__mcmp>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	db25      	blt.n	8008c56 <quorem+0xec>
 8008c0a:	4629      	mov	r1, r5
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c12:	f8d1 c000 	ldr.w	ip, [r1]
 8008c16:	fa1f fe82 	uxth.w	lr, r2
 8008c1a:	fa1f f38c 	uxth.w	r3, ip
 8008c1e:	eba3 030e 	sub.w	r3, r3, lr
 8008c22:	4403      	add	r3, r0
 8008c24:	0c12      	lsrs	r2, r2, #16
 8008c26:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008c2a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c34:	45c1      	cmp	r9, r8
 8008c36:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008c3a:	f841 3b04 	str.w	r3, [r1], #4
 8008c3e:	d2e6      	bcs.n	8008c0e <quorem+0xa4>
 8008c40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c48:	b922      	cbnz	r2, 8008c54 <quorem+0xea>
 8008c4a:	3b04      	subs	r3, #4
 8008c4c:	429d      	cmp	r5, r3
 8008c4e:	461a      	mov	r2, r3
 8008c50:	d30b      	bcc.n	8008c6a <quorem+0x100>
 8008c52:	613c      	str	r4, [r7, #16]
 8008c54:	3601      	adds	r6, #1
 8008c56:	4630      	mov	r0, r6
 8008c58:	b003      	add	sp, #12
 8008c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5e:	6812      	ldr	r2, [r2, #0]
 8008c60:	3b04      	subs	r3, #4
 8008c62:	2a00      	cmp	r2, #0
 8008c64:	d1cb      	bne.n	8008bfe <quorem+0x94>
 8008c66:	3c01      	subs	r4, #1
 8008c68:	e7c6      	b.n	8008bf8 <quorem+0x8e>
 8008c6a:	6812      	ldr	r2, [r2, #0]
 8008c6c:	3b04      	subs	r3, #4
 8008c6e:	2a00      	cmp	r2, #0
 8008c70:	d1ef      	bne.n	8008c52 <quorem+0xe8>
 8008c72:	3c01      	subs	r4, #1
 8008c74:	e7ea      	b.n	8008c4c <quorem+0xe2>
 8008c76:	2000      	movs	r0, #0
 8008c78:	e7ee      	b.n	8008c58 <quorem+0xee>
 8008c7a:	0000      	movs	r0, r0
 8008c7c:	0000      	movs	r0, r0
	...

08008c80 <_dtoa_r>:
 8008c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c84:	4614      	mov	r4, r2
 8008c86:	461d      	mov	r5, r3
 8008c88:	69c7      	ldr	r7, [r0, #28]
 8008c8a:	b097      	sub	sp, #92	@ 0x5c
 8008c8c:	4683      	mov	fp, r0
 8008c8e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008c92:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008c94:	b97f      	cbnz	r7, 8008cb6 <_dtoa_r+0x36>
 8008c96:	2010      	movs	r0, #16
 8008c98:	f000 fe02 	bl	80098a0 <malloc>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	f8cb 001c 	str.w	r0, [fp, #28]
 8008ca2:	b920      	cbnz	r0, 8008cae <_dtoa_r+0x2e>
 8008ca4:	21ef      	movs	r1, #239	@ 0xef
 8008ca6:	4ba8      	ldr	r3, [pc, #672]	@ (8008f48 <_dtoa_r+0x2c8>)
 8008ca8:	48a8      	ldr	r0, [pc, #672]	@ (8008f4c <_dtoa_r+0x2cc>)
 8008caa:	f001 faf5 	bl	800a298 <__assert_func>
 8008cae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008cb2:	6007      	str	r7, [r0, #0]
 8008cb4:	60c7      	str	r7, [r0, #12]
 8008cb6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008cba:	6819      	ldr	r1, [r3, #0]
 8008cbc:	b159      	cbz	r1, 8008cd6 <_dtoa_r+0x56>
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	4093      	lsls	r3, r2
 8008cc4:	604a      	str	r2, [r1, #4]
 8008cc6:	608b      	str	r3, [r1, #8]
 8008cc8:	4658      	mov	r0, fp
 8008cca:	f000 fedf 	bl	8009a8c <_Bfree>
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008cd4:	601a      	str	r2, [r3, #0]
 8008cd6:	1e2b      	subs	r3, r5, #0
 8008cd8:	bfaf      	iteee	ge
 8008cda:	2300      	movge	r3, #0
 8008cdc:	2201      	movlt	r2, #1
 8008cde:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008ce2:	9303      	strlt	r3, [sp, #12]
 8008ce4:	bfa8      	it	ge
 8008ce6:	6033      	strge	r3, [r6, #0]
 8008ce8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008cec:	4b98      	ldr	r3, [pc, #608]	@ (8008f50 <_dtoa_r+0x2d0>)
 8008cee:	bfb8      	it	lt
 8008cf0:	6032      	strlt	r2, [r6, #0]
 8008cf2:	ea33 0308 	bics.w	r3, r3, r8
 8008cf6:	d112      	bne.n	8008d1e <_dtoa_r+0x9e>
 8008cf8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008cfc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008cfe:	6013      	str	r3, [r2, #0]
 8008d00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008d04:	4323      	orrs	r3, r4
 8008d06:	f000 8550 	beq.w	80097aa <_dtoa_r+0xb2a>
 8008d0a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008d0c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8008f54 <_dtoa_r+0x2d4>
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 8552 	beq.w	80097ba <_dtoa_r+0xb3a>
 8008d16:	f10a 0303 	add.w	r3, sl, #3
 8008d1a:	f000 bd4c 	b.w	80097b6 <_dtoa_r+0xb36>
 8008d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d22:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008d26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	f7f7 fea7 	bl	8000a80 <__aeabi_dcmpeq>
 8008d32:	4607      	mov	r7, r0
 8008d34:	b158      	cbz	r0, 8008d4e <_dtoa_r+0xce>
 8008d36:	2301      	movs	r3, #1
 8008d38:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008d3a:	6013      	str	r3, [r2, #0]
 8008d3c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008d3e:	b113      	cbz	r3, 8008d46 <_dtoa_r+0xc6>
 8008d40:	4b85      	ldr	r3, [pc, #532]	@ (8008f58 <_dtoa_r+0x2d8>)
 8008d42:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008d44:	6013      	str	r3, [r2, #0]
 8008d46:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8008f5c <_dtoa_r+0x2dc>
 8008d4a:	f000 bd36 	b.w	80097ba <_dtoa_r+0xb3a>
 8008d4e:	ab14      	add	r3, sp, #80	@ 0x50
 8008d50:	9301      	str	r3, [sp, #4]
 8008d52:	ab15      	add	r3, sp, #84	@ 0x54
 8008d54:	9300      	str	r3, [sp, #0]
 8008d56:	4658      	mov	r0, fp
 8008d58:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008d5c:	f001 f97e 	bl	800a05c <__d2b>
 8008d60:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008d64:	4681      	mov	r9, r0
 8008d66:	2e00      	cmp	r6, #0
 8008d68:	d077      	beq.n	8008e5a <_dtoa_r+0x1da>
 8008d6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d70:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d78:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008d7c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008d80:	9712      	str	r7, [sp, #72]	@ 0x48
 8008d82:	4619      	mov	r1, r3
 8008d84:	2200      	movs	r2, #0
 8008d86:	4b76      	ldr	r3, [pc, #472]	@ (8008f60 <_dtoa_r+0x2e0>)
 8008d88:	f7f7 fa5a 	bl	8000240 <__aeabi_dsub>
 8008d8c:	a368      	add	r3, pc, #416	@ (adr r3, 8008f30 <_dtoa_r+0x2b0>)
 8008d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d92:	f7f7 fc0d 	bl	80005b0 <__aeabi_dmul>
 8008d96:	a368      	add	r3, pc, #416	@ (adr r3, 8008f38 <_dtoa_r+0x2b8>)
 8008d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9c:	f7f7 fa52 	bl	8000244 <__adddf3>
 8008da0:	4604      	mov	r4, r0
 8008da2:	4630      	mov	r0, r6
 8008da4:	460d      	mov	r5, r1
 8008da6:	f7f7 fb99 	bl	80004dc <__aeabi_i2d>
 8008daa:	a365      	add	r3, pc, #404	@ (adr r3, 8008f40 <_dtoa_r+0x2c0>)
 8008dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db0:	f7f7 fbfe 	bl	80005b0 <__aeabi_dmul>
 8008db4:	4602      	mov	r2, r0
 8008db6:	460b      	mov	r3, r1
 8008db8:	4620      	mov	r0, r4
 8008dba:	4629      	mov	r1, r5
 8008dbc:	f7f7 fa42 	bl	8000244 <__adddf3>
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	460d      	mov	r5, r1
 8008dc4:	f7f7 fea4 	bl	8000b10 <__aeabi_d2iz>
 8008dc8:	2200      	movs	r2, #0
 8008dca:	4607      	mov	r7, r0
 8008dcc:	2300      	movs	r3, #0
 8008dce:	4620      	mov	r0, r4
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	f7f7 fe5f 	bl	8000a94 <__aeabi_dcmplt>
 8008dd6:	b140      	cbz	r0, 8008dea <_dtoa_r+0x16a>
 8008dd8:	4638      	mov	r0, r7
 8008dda:	f7f7 fb7f 	bl	80004dc <__aeabi_i2d>
 8008dde:	4622      	mov	r2, r4
 8008de0:	462b      	mov	r3, r5
 8008de2:	f7f7 fe4d 	bl	8000a80 <__aeabi_dcmpeq>
 8008de6:	b900      	cbnz	r0, 8008dea <_dtoa_r+0x16a>
 8008de8:	3f01      	subs	r7, #1
 8008dea:	2f16      	cmp	r7, #22
 8008dec:	d853      	bhi.n	8008e96 <_dtoa_r+0x216>
 8008dee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008df2:	4b5c      	ldr	r3, [pc, #368]	@ (8008f64 <_dtoa_r+0x2e4>)
 8008df4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfc:	f7f7 fe4a 	bl	8000a94 <__aeabi_dcmplt>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d04a      	beq.n	8008e9a <_dtoa_r+0x21a>
 8008e04:	2300      	movs	r3, #0
 8008e06:	3f01      	subs	r7, #1
 8008e08:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008e0a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008e0c:	1b9b      	subs	r3, r3, r6
 8008e0e:	1e5a      	subs	r2, r3, #1
 8008e10:	bf46      	itte	mi
 8008e12:	f1c3 0801 	rsbmi	r8, r3, #1
 8008e16:	2300      	movmi	r3, #0
 8008e18:	f04f 0800 	movpl.w	r8, #0
 8008e1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e1e:	bf48      	it	mi
 8008e20:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8008e22:	2f00      	cmp	r7, #0
 8008e24:	db3b      	blt.n	8008e9e <_dtoa_r+0x21e>
 8008e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e28:	970e      	str	r7, [sp, #56]	@ 0x38
 8008e2a:	443b      	add	r3, r7
 8008e2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e2e:	2300      	movs	r3, #0
 8008e30:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008e34:	2b09      	cmp	r3, #9
 8008e36:	d866      	bhi.n	8008f06 <_dtoa_r+0x286>
 8008e38:	2b05      	cmp	r3, #5
 8008e3a:	bfc4      	itt	gt
 8008e3c:	3b04      	subgt	r3, #4
 8008e3e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008e40:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008e42:	bfc8      	it	gt
 8008e44:	2400      	movgt	r4, #0
 8008e46:	f1a3 0302 	sub.w	r3, r3, #2
 8008e4a:	bfd8      	it	le
 8008e4c:	2401      	movle	r4, #1
 8008e4e:	2b03      	cmp	r3, #3
 8008e50:	d864      	bhi.n	8008f1c <_dtoa_r+0x29c>
 8008e52:	e8df f003 	tbb	[pc, r3]
 8008e56:	382b      	.short	0x382b
 8008e58:	5636      	.short	0x5636
 8008e5a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008e5e:	441e      	add	r6, r3
 8008e60:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008e64:	2b20      	cmp	r3, #32
 8008e66:	bfc1      	itttt	gt
 8008e68:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008e6c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008e70:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008e74:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008e78:	bfd6      	itet	le
 8008e7a:	f1c3 0320 	rsble	r3, r3, #32
 8008e7e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008e82:	fa04 f003 	lslle.w	r0, r4, r3
 8008e86:	f7f7 fb19 	bl	80004bc <__aeabi_ui2d>
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008e90:	3e01      	subs	r6, #1
 8008e92:	9212      	str	r2, [sp, #72]	@ 0x48
 8008e94:	e775      	b.n	8008d82 <_dtoa_r+0x102>
 8008e96:	2301      	movs	r3, #1
 8008e98:	e7b6      	b.n	8008e08 <_dtoa_r+0x188>
 8008e9a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008e9c:	e7b5      	b.n	8008e0a <_dtoa_r+0x18a>
 8008e9e:	427b      	negs	r3, r7
 8008ea0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	eba8 0807 	sub.w	r8, r8, r7
 8008ea8:	930e      	str	r3, [sp, #56]	@ 0x38
 8008eaa:	e7c2      	b.n	8008e32 <_dtoa_r+0x1b2>
 8008eac:	2300      	movs	r3, #0
 8008eae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008eb0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	dc35      	bgt.n	8008f22 <_dtoa_r+0x2a2>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	461a      	mov	r2, r3
 8008eba:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008ebe:	9221      	str	r2, [sp, #132]	@ 0x84
 8008ec0:	e00b      	b.n	8008eda <_dtoa_r+0x25a>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e7f3      	b.n	8008eae <_dtoa_r+0x22e>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008eca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ecc:	18fb      	adds	r3, r7, r3
 8008ece:	9308      	str	r3, [sp, #32]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	9307      	str	r3, [sp, #28]
 8008ed6:	bfb8      	it	lt
 8008ed8:	2301      	movlt	r3, #1
 8008eda:	2100      	movs	r1, #0
 8008edc:	2204      	movs	r2, #4
 8008ede:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008ee2:	f102 0514 	add.w	r5, r2, #20
 8008ee6:	429d      	cmp	r5, r3
 8008ee8:	d91f      	bls.n	8008f2a <_dtoa_r+0x2aa>
 8008eea:	6041      	str	r1, [r0, #4]
 8008eec:	4658      	mov	r0, fp
 8008eee:	f000 fd8d 	bl	8009a0c <_Balloc>
 8008ef2:	4682      	mov	sl, r0
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d139      	bne.n	8008f6c <_dtoa_r+0x2ec>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	f240 11af 	movw	r1, #431	@ 0x1af
 8008efe:	4b1a      	ldr	r3, [pc, #104]	@ (8008f68 <_dtoa_r+0x2e8>)
 8008f00:	e6d2      	b.n	8008ca8 <_dtoa_r+0x28>
 8008f02:	2301      	movs	r3, #1
 8008f04:	e7e0      	b.n	8008ec8 <_dtoa_r+0x248>
 8008f06:	2401      	movs	r4, #1
 8008f08:	2300      	movs	r3, #0
 8008f0a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008f0c:	9320      	str	r3, [sp, #128]	@ 0x80
 8008f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f12:	2200      	movs	r2, #0
 8008f14:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008f18:	2312      	movs	r3, #18
 8008f1a:	e7d0      	b.n	8008ebe <_dtoa_r+0x23e>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f20:	e7f5      	b.n	8008f0e <_dtoa_r+0x28e>
 8008f22:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008f24:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008f28:	e7d7      	b.n	8008eda <_dtoa_r+0x25a>
 8008f2a:	3101      	adds	r1, #1
 8008f2c:	0052      	lsls	r2, r2, #1
 8008f2e:	e7d8      	b.n	8008ee2 <_dtoa_r+0x262>
 8008f30:	636f4361 	.word	0x636f4361
 8008f34:	3fd287a7 	.word	0x3fd287a7
 8008f38:	8b60c8b3 	.word	0x8b60c8b3
 8008f3c:	3fc68a28 	.word	0x3fc68a28
 8008f40:	509f79fb 	.word	0x509f79fb
 8008f44:	3fd34413 	.word	0x3fd34413
 8008f48:	0800bab3 	.word	0x0800bab3
 8008f4c:	0800baca 	.word	0x0800baca
 8008f50:	7ff00000 	.word	0x7ff00000
 8008f54:	0800baaf 	.word	0x0800baaf
 8008f58:	0800ba83 	.word	0x0800ba83
 8008f5c:	0800ba82 	.word	0x0800ba82
 8008f60:	3ff80000 	.word	0x3ff80000
 8008f64:	0800bbc0 	.word	0x0800bbc0
 8008f68:	0800bb22 	.word	0x0800bb22
 8008f6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008f70:	6018      	str	r0, [r3, #0]
 8008f72:	9b07      	ldr	r3, [sp, #28]
 8008f74:	2b0e      	cmp	r3, #14
 8008f76:	f200 80a4 	bhi.w	80090c2 <_dtoa_r+0x442>
 8008f7a:	2c00      	cmp	r4, #0
 8008f7c:	f000 80a1 	beq.w	80090c2 <_dtoa_r+0x442>
 8008f80:	2f00      	cmp	r7, #0
 8008f82:	dd33      	ble.n	8008fec <_dtoa_r+0x36c>
 8008f84:	4b86      	ldr	r3, [pc, #536]	@ (80091a0 <_dtoa_r+0x520>)
 8008f86:	f007 020f 	and.w	r2, r7, #15
 8008f8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f8e:	05f8      	lsls	r0, r7, #23
 8008f90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f94:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008f98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008f9c:	d516      	bpl.n	8008fcc <_dtoa_r+0x34c>
 8008f9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008fa2:	4b80      	ldr	r3, [pc, #512]	@ (80091a4 <_dtoa_r+0x524>)
 8008fa4:	2603      	movs	r6, #3
 8008fa6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008faa:	f7f7 fc2b 	bl	8000804 <__aeabi_ddiv>
 8008fae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fb2:	f004 040f 	and.w	r4, r4, #15
 8008fb6:	4d7b      	ldr	r5, [pc, #492]	@ (80091a4 <_dtoa_r+0x524>)
 8008fb8:	b954      	cbnz	r4, 8008fd0 <_dtoa_r+0x350>
 8008fba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fc2:	f7f7 fc1f 	bl	8000804 <__aeabi_ddiv>
 8008fc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fca:	e028      	b.n	800901e <_dtoa_r+0x39e>
 8008fcc:	2602      	movs	r6, #2
 8008fce:	e7f2      	b.n	8008fb6 <_dtoa_r+0x336>
 8008fd0:	07e1      	lsls	r1, r4, #31
 8008fd2:	d508      	bpl.n	8008fe6 <_dtoa_r+0x366>
 8008fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008fdc:	f7f7 fae8 	bl	80005b0 <__aeabi_dmul>
 8008fe0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fe4:	3601      	adds	r6, #1
 8008fe6:	1064      	asrs	r4, r4, #1
 8008fe8:	3508      	adds	r5, #8
 8008fea:	e7e5      	b.n	8008fb8 <_dtoa_r+0x338>
 8008fec:	f000 80d2 	beq.w	8009194 <_dtoa_r+0x514>
 8008ff0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ff4:	427c      	negs	r4, r7
 8008ff6:	4b6a      	ldr	r3, [pc, #424]	@ (80091a0 <_dtoa_r+0x520>)
 8008ff8:	f004 020f 	and.w	r2, r4, #15
 8008ffc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009004:	f7f7 fad4 	bl	80005b0 <__aeabi_dmul>
 8009008:	2602      	movs	r6, #2
 800900a:	2300      	movs	r3, #0
 800900c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009010:	4d64      	ldr	r5, [pc, #400]	@ (80091a4 <_dtoa_r+0x524>)
 8009012:	1124      	asrs	r4, r4, #4
 8009014:	2c00      	cmp	r4, #0
 8009016:	f040 80b2 	bne.w	800917e <_dtoa_r+0x4fe>
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1d3      	bne.n	8008fc6 <_dtoa_r+0x346>
 800901e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009022:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 80b7 	beq.w	8009198 <_dtoa_r+0x518>
 800902a:	2200      	movs	r2, #0
 800902c:	4620      	mov	r0, r4
 800902e:	4629      	mov	r1, r5
 8009030:	4b5d      	ldr	r3, [pc, #372]	@ (80091a8 <_dtoa_r+0x528>)
 8009032:	f7f7 fd2f 	bl	8000a94 <__aeabi_dcmplt>
 8009036:	2800      	cmp	r0, #0
 8009038:	f000 80ae 	beq.w	8009198 <_dtoa_r+0x518>
 800903c:	9b07      	ldr	r3, [sp, #28]
 800903e:	2b00      	cmp	r3, #0
 8009040:	f000 80aa 	beq.w	8009198 <_dtoa_r+0x518>
 8009044:	9b08      	ldr	r3, [sp, #32]
 8009046:	2b00      	cmp	r3, #0
 8009048:	dd37      	ble.n	80090ba <_dtoa_r+0x43a>
 800904a:	1e7b      	subs	r3, r7, #1
 800904c:	4620      	mov	r0, r4
 800904e:	9304      	str	r3, [sp, #16]
 8009050:	2200      	movs	r2, #0
 8009052:	4629      	mov	r1, r5
 8009054:	4b55      	ldr	r3, [pc, #340]	@ (80091ac <_dtoa_r+0x52c>)
 8009056:	f7f7 faab 	bl	80005b0 <__aeabi_dmul>
 800905a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800905e:	9c08      	ldr	r4, [sp, #32]
 8009060:	3601      	adds	r6, #1
 8009062:	4630      	mov	r0, r6
 8009064:	f7f7 fa3a 	bl	80004dc <__aeabi_i2d>
 8009068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800906c:	f7f7 faa0 	bl	80005b0 <__aeabi_dmul>
 8009070:	2200      	movs	r2, #0
 8009072:	4b4f      	ldr	r3, [pc, #316]	@ (80091b0 <_dtoa_r+0x530>)
 8009074:	f7f7 f8e6 	bl	8000244 <__adddf3>
 8009078:	4605      	mov	r5, r0
 800907a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800907e:	2c00      	cmp	r4, #0
 8009080:	f040 809a 	bne.w	80091b8 <_dtoa_r+0x538>
 8009084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009088:	2200      	movs	r2, #0
 800908a:	4b4a      	ldr	r3, [pc, #296]	@ (80091b4 <_dtoa_r+0x534>)
 800908c:	f7f7 f8d8 	bl	8000240 <__aeabi_dsub>
 8009090:	4602      	mov	r2, r0
 8009092:	460b      	mov	r3, r1
 8009094:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009098:	462a      	mov	r2, r5
 800909a:	4633      	mov	r3, r6
 800909c:	f7f7 fd18 	bl	8000ad0 <__aeabi_dcmpgt>
 80090a0:	2800      	cmp	r0, #0
 80090a2:	f040 828e 	bne.w	80095c2 <_dtoa_r+0x942>
 80090a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090aa:	462a      	mov	r2, r5
 80090ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80090b0:	f7f7 fcf0 	bl	8000a94 <__aeabi_dcmplt>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	f040 8127 	bne.w	8009308 <_dtoa_r+0x688>
 80090ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80090be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80090c2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f2c0 8163 	blt.w	8009390 <_dtoa_r+0x710>
 80090ca:	2f0e      	cmp	r7, #14
 80090cc:	f300 8160 	bgt.w	8009390 <_dtoa_r+0x710>
 80090d0:	4b33      	ldr	r3, [pc, #204]	@ (80091a0 <_dtoa_r+0x520>)
 80090d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80090d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80090da:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80090de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	da03      	bge.n	80090ec <_dtoa_r+0x46c>
 80090e4:	9b07      	ldr	r3, [sp, #28]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f340 8100 	ble.w	80092ec <_dtoa_r+0x66c>
 80090ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80090f0:	4656      	mov	r6, sl
 80090f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090f6:	4620      	mov	r0, r4
 80090f8:	4629      	mov	r1, r5
 80090fa:	f7f7 fb83 	bl	8000804 <__aeabi_ddiv>
 80090fe:	f7f7 fd07 	bl	8000b10 <__aeabi_d2iz>
 8009102:	4680      	mov	r8, r0
 8009104:	f7f7 f9ea 	bl	80004dc <__aeabi_i2d>
 8009108:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800910c:	f7f7 fa50 	bl	80005b0 <__aeabi_dmul>
 8009110:	4602      	mov	r2, r0
 8009112:	460b      	mov	r3, r1
 8009114:	4620      	mov	r0, r4
 8009116:	4629      	mov	r1, r5
 8009118:	f7f7 f892 	bl	8000240 <__aeabi_dsub>
 800911c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009120:	9d07      	ldr	r5, [sp, #28]
 8009122:	f806 4b01 	strb.w	r4, [r6], #1
 8009126:	eba6 040a 	sub.w	r4, r6, sl
 800912a:	42a5      	cmp	r5, r4
 800912c:	4602      	mov	r2, r0
 800912e:	460b      	mov	r3, r1
 8009130:	f040 8116 	bne.w	8009360 <_dtoa_r+0x6e0>
 8009134:	f7f7 f886 	bl	8000244 <__adddf3>
 8009138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800913c:	4604      	mov	r4, r0
 800913e:	460d      	mov	r5, r1
 8009140:	f7f7 fcc6 	bl	8000ad0 <__aeabi_dcmpgt>
 8009144:	2800      	cmp	r0, #0
 8009146:	f040 80f8 	bne.w	800933a <_dtoa_r+0x6ba>
 800914a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800914e:	4620      	mov	r0, r4
 8009150:	4629      	mov	r1, r5
 8009152:	f7f7 fc95 	bl	8000a80 <__aeabi_dcmpeq>
 8009156:	b118      	cbz	r0, 8009160 <_dtoa_r+0x4e0>
 8009158:	f018 0f01 	tst.w	r8, #1
 800915c:	f040 80ed 	bne.w	800933a <_dtoa_r+0x6ba>
 8009160:	4649      	mov	r1, r9
 8009162:	4658      	mov	r0, fp
 8009164:	f000 fc92 	bl	8009a8c <_Bfree>
 8009168:	2300      	movs	r3, #0
 800916a:	7033      	strb	r3, [r6, #0]
 800916c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800916e:	3701      	adds	r7, #1
 8009170:	601f      	str	r7, [r3, #0]
 8009172:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009174:	2b00      	cmp	r3, #0
 8009176:	f000 8320 	beq.w	80097ba <_dtoa_r+0xb3a>
 800917a:	601e      	str	r6, [r3, #0]
 800917c:	e31d      	b.n	80097ba <_dtoa_r+0xb3a>
 800917e:	07e2      	lsls	r2, r4, #31
 8009180:	d505      	bpl.n	800918e <_dtoa_r+0x50e>
 8009182:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009186:	f7f7 fa13 	bl	80005b0 <__aeabi_dmul>
 800918a:	2301      	movs	r3, #1
 800918c:	3601      	adds	r6, #1
 800918e:	1064      	asrs	r4, r4, #1
 8009190:	3508      	adds	r5, #8
 8009192:	e73f      	b.n	8009014 <_dtoa_r+0x394>
 8009194:	2602      	movs	r6, #2
 8009196:	e742      	b.n	800901e <_dtoa_r+0x39e>
 8009198:	9c07      	ldr	r4, [sp, #28]
 800919a:	9704      	str	r7, [sp, #16]
 800919c:	e761      	b.n	8009062 <_dtoa_r+0x3e2>
 800919e:	bf00      	nop
 80091a0:	0800bbc0 	.word	0x0800bbc0
 80091a4:	0800bb98 	.word	0x0800bb98
 80091a8:	3ff00000 	.word	0x3ff00000
 80091ac:	40240000 	.word	0x40240000
 80091b0:	401c0000 	.word	0x401c0000
 80091b4:	40140000 	.word	0x40140000
 80091b8:	4b70      	ldr	r3, [pc, #448]	@ (800937c <_dtoa_r+0x6fc>)
 80091ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80091bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80091c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80091c4:	4454      	add	r4, sl
 80091c6:	2900      	cmp	r1, #0
 80091c8:	d045      	beq.n	8009256 <_dtoa_r+0x5d6>
 80091ca:	2000      	movs	r0, #0
 80091cc:	496c      	ldr	r1, [pc, #432]	@ (8009380 <_dtoa_r+0x700>)
 80091ce:	f7f7 fb19 	bl	8000804 <__aeabi_ddiv>
 80091d2:	4633      	mov	r3, r6
 80091d4:	462a      	mov	r2, r5
 80091d6:	f7f7 f833 	bl	8000240 <__aeabi_dsub>
 80091da:	4656      	mov	r6, sl
 80091dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80091e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091e4:	f7f7 fc94 	bl	8000b10 <__aeabi_d2iz>
 80091e8:	4605      	mov	r5, r0
 80091ea:	f7f7 f977 	bl	80004dc <__aeabi_i2d>
 80091ee:	4602      	mov	r2, r0
 80091f0:	460b      	mov	r3, r1
 80091f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091f6:	f7f7 f823 	bl	8000240 <__aeabi_dsub>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	3530      	adds	r5, #48	@ 0x30
 8009200:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009204:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009208:	f806 5b01 	strb.w	r5, [r6], #1
 800920c:	f7f7 fc42 	bl	8000a94 <__aeabi_dcmplt>
 8009210:	2800      	cmp	r0, #0
 8009212:	d163      	bne.n	80092dc <_dtoa_r+0x65c>
 8009214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009218:	2000      	movs	r0, #0
 800921a:	495a      	ldr	r1, [pc, #360]	@ (8009384 <_dtoa_r+0x704>)
 800921c:	f7f7 f810 	bl	8000240 <__aeabi_dsub>
 8009220:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009224:	f7f7 fc36 	bl	8000a94 <__aeabi_dcmplt>
 8009228:	2800      	cmp	r0, #0
 800922a:	f040 8087 	bne.w	800933c <_dtoa_r+0x6bc>
 800922e:	42a6      	cmp	r6, r4
 8009230:	f43f af43 	beq.w	80090ba <_dtoa_r+0x43a>
 8009234:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009238:	2200      	movs	r2, #0
 800923a:	4b53      	ldr	r3, [pc, #332]	@ (8009388 <_dtoa_r+0x708>)
 800923c:	f7f7 f9b8 	bl	80005b0 <__aeabi_dmul>
 8009240:	2200      	movs	r2, #0
 8009242:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800924a:	4b4f      	ldr	r3, [pc, #316]	@ (8009388 <_dtoa_r+0x708>)
 800924c:	f7f7 f9b0 	bl	80005b0 <__aeabi_dmul>
 8009250:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009254:	e7c4      	b.n	80091e0 <_dtoa_r+0x560>
 8009256:	4631      	mov	r1, r6
 8009258:	4628      	mov	r0, r5
 800925a:	f7f7 f9a9 	bl	80005b0 <__aeabi_dmul>
 800925e:	4656      	mov	r6, sl
 8009260:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009264:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800926a:	f7f7 fc51 	bl	8000b10 <__aeabi_d2iz>
 800926e:	4605      	mov	r5, r0
 8009270:	f7f7 f934 	bl	80004dc <__aeabi_i2d>
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800927c:	f7f6 ffe0 	bl	8000240 <__aeabi_dsub>
 8009280:	4602      	mov	r2, r0
 8009282:	460b      	mov	r3, r1
 8009284:	3530      	adds	r5, #48	@ 0x30
 8009286:	f806 5b01 	strb.w	r5, [r6], #1
 800928a:	42a6      	cmp	r6, r4
 800928c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009290:	f04f 0200 	mov.w	r2, #0
 8009294:	d124      	bne.n	80092e0 <_dtoa_r+0x660>
 8009296:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800929a:	4b39      	ldr	r3, [pc, #228]	@ (8009380 <_dtoa_r+0x700>)
 800929c:	f7f6 ffd2 	bl	8000244 <__adddf3>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092a8:	f7f7 fc12 	bl	8000ad0 <__aeabi_dcmpgt>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	d145      	bne.n	800933c <_dtoa_r+0x6bc>
 80092b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80092b4:	2000      	movs	r0, #0
 80092b6:	4932      	ldr	r1, [pc, #200]	@ (8009380 <_dtoa_r+0x700>)
 80092b8:	f7f6 ffc2 	bl	8000240 <__aeabi_dsub>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092c4:	f7f7 fbe6 	bl	8000a94 <__aeabi_dcmplt>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	f43f aef6 	beq.w	80090ba <_dtoa_r+0x43a>
 80092ce:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80092d0:	1e73      	subs	r3, r6, #1
 80092d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80092d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80092d8:	2b30      	cmp	r3, #48	@ 0x30
 80092da:	d0f8      	beq.n	80092ce <_dtoa_r+0x64e>
 80092dc:	9f04      	ldr	r7, [sp, #16]
 80092de:	e73f      	b.n	8009160 <_dtoa_r+0x4e0>
 80092e0:	4b29      	ldr	r3, [pc, #164]	@ (8009388 <_dtoa_r+0x708>)
 80092e2:	f7f7 f965 	bl	80005b0 <__aeabi_dmul>
 80092e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092ea:	e7bc      	b.n	8009266 <_dtoa_r+0x5e6>
 80092ec:	d10c      	bne.n	8009308 <_dtoa_r+0x688>
 80092ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092f2:	2200      	movs	r2, #0
 80092f4:	4b25      	ldr	r3, [pc, #148]	@ (800938c <_dtoa_r+0x70c>)
 80092f6:	f7f7 f95b 	bl	80005b0 <__aeabi_dmul>
 80092fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092fe:	f7f7 fbdd 	bl	8000abc <__aeabi_dcmpge>
 8009302:	2800      	cmp	r0, #0
 8009304:	f000 815b 	beq.w	80095be <_dtoa_r+0x93e>
 8009308:	2400      	movs	r4, #0
 800930a:	4625      	mov	r5, r4
 800930c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800930e:	4656      	mov	r6, sl
 8009310:	43db      	mvns	r3, r3
 8009312:	9304      	str	r3, [sp, #16]
 8009314:	2700      	movs	r7, #0
 8009316:	4621      	mov	r1, r4
 8009318:	4658      	mov	r0, fp
 800931a:	f000 fbb7 	bl	8009a8c <_Bfree>
 800931e:	2d00      	cmp	r5, #0
 8009320:	d0dc      	beq.n	80092dc <_dtoa_r+0x65c>
 8009322:	b12f      	cbz	r7, 8009330 <_dtoa_r+0x6b0>
 8009324:	42af      	cmp	r7, r5
 8009326:	d003      	beq.n	8009330 <_dtoa_r+0x6b0>
 8009328:	4639      	mov	r1, r7
 800932a:	4658      	mov	r0, fp
 800932c:	f000 fbae 	bl	8009a8c <_Bfree>
 8009330:	4629      	mov	r1, r5
 8009332:	4658      	mov	r0, fp
 8009334:	f000 fbaa 	bl	8009a8c <_Bfree>
 8009338:	e7d0      	b.n	80092dc <_dtoa_r+0x65c>
 800933a:	9704      	str	r7, [sp, #16]
 800933c:	4633      	mov	r3, r6
 800933e:	461e      	mov	r6, r3
 8009340:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009344:	2a39      	cmp	r2, #57	@ 0x39
 8009346:	d107      	bne.n	8009358 <_dtoa_r+0x6d8>
 8009348:	459a      	cmp	sl, r3
 800934a:	d1f8      	bne.n	800933e <_dtoa_r+0x6be>
 800934c:	9a04      	ldr	r2, [sp, #16]
 800934e:	3201      	adds	r2, #1
 8009350:	9204      	str	r2, [sp, #16]
 8009352:	2230      	movs	r2, #48	@ 0x30
 8009354:	f88a 2000 	strb.w	r2, [sl]
 8009358:	781a      	ldrb	r2, [r3, #0]
 800935a:	3201      	adds	r2, #1
 800935c:	701a      	strb	r2, [r3, #0]
 800935e:	e7bd      	b.n	80092dc <_dtoa_r+0x65c>
 8009360:	2200      	movs	r2, #0
 8009362:	4b09      	ldr	r3, [pc, #36]	@ (8009388 <_dtoa_r+0x708>)
 8009364:	f7f7 f924 	bl	80005b0 <__aeabi_dmul>
 8009368:	2200      	movs	r2, #0
 800936a:	2300      	movs	r3, #0
 800936c:	4604      	mov	r4, r0
 800936e:	460d      	mov	r5, r1
 8009370:	f7f7 fb86 	bl	8000a80 <__aeabi_dcmpeq>
 8009374:	2800      	cmp	r0, #0
 8009376:	f43f aebc 	beq.w	80090f2 <_dtoa_r+0x472>
 800937a:	e6f1      	b.n	8009160 <_dtoa_r+0x4e0>
 800937c:	0800bbc0 	.word	0x0800bbc0
 8009380:	3fe00000 	.word	0x3fe00000
 8009384:	3ff00000 	.word	0x3ff00000
 8009388:	40240000 	.word	0x40240000
 800938c:	40140000 	.word	0x40140000
 8009390:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009392:	2a00      	cmp	r2, #0
 8009394:	f000 80db 	beq.w	800954e <_dtoa_r+0x8ce>
 8009398:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800939a:	2a01      	cmp	r2, #1
 800939c:	f300 80bf 	bgt.w	800951e <_dtoa_r+0x89e>
 80093a0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80093a2:	2a00      	cmp	r2, #0
 80093a4:	f000 80b7 	beq.w	8009516 <_dtoa_r+0x896>
 80093a8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80093ac:	4646      	mov	r6, r8
 80093ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80093b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093b2:	2101      	movs	r1, #1
 80093b4:	441a      	add	r2, r3
 80093b6:	4658      	mov	r0, fp
 80093b8:	4498      	add	r8, r3
 80093ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80093bc:	f000 fc1a 	bl	8009bf4 <__i2b>
 80093c0:	4605      	mov	r5, r0
 80093c2:	b15e      	cbz	r6, 80093dc <_dtoa_r+0x75c>
 80093c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	dd08      	ble.n	80093dc <_dtoa_r+0x75c>
 80093ca:	42b3      	cmp	r3, r6
 80093cc:	bfa8      	it	ge
 80093ce:	4633      	movge	r3, r6
 80093d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093d2:	eba8 0803 	sub.w	r8, r8, r3
 80093d6:	1af6      	subs	r6, r6, r3
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	9309      	str	r3, [sp, #36]	@ 0x24
 80093dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093de:	b1f3      	cbz	r3, 800941e <_dtoa_r+0x79e>
 80093e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 80b7 	beq.w	8009556 <_dtoa_r+0x8d6>
 80093e8:	b18c      	cbz	r4, 800940e <_dtoa_r+0x78e>
 80093ea:	4629      	mov	r1, r5
 80093ec:	4622      	mov	r2, r4
 80093ee:	4658      	mov	r0, fp
 80093f0:	f000 fcbe 	bl	8009d70 <__pow5mult>
 80093f4:	464a      	mov	r2, r9
 80093f6:	4601      	mov	r1, r0
 80093f8:	4605      	mov	r5, r0
 80093fa:	4658      	mov	r0, fp
 80093fc:	f000 fc10 	bl	8009c20 <__multiply>
 8009400:	4649      	mov	r1, r9
 8009402:	9004      	str	r0, [sp, #16]
 8009404:	4658      	mov	r0, fp
 8009406:	f000 fb41 	bl	8009a8c <_Bfree>
 800940a:	9b04      	ldr	r3, [sp, #16]
 800940c:	4699      	mov	r9, r3
 800940e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009410:	1b1a      	subs	r2, r3, r4
 8009412:	d004      	beq.n	800941e <_dtoa_r+0x79e>
 8009414:	4649      	mov	r1, r9
 8009416:	4658      	mov	r0, fp
 8009418:	f000 fcaa 	bl	8009d70 <__pow5mult>
 800941c:	4681      	mov	r9, r0
 800941e:	2101      	movs	r1, #1
 8009420:	4658      	mov	r0, fp
 8009422:	f000 fbe7 	bl	8009bf4 <__i2b>
 8009426:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009428:	4604      	mov	r4, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	f000 81c9 	beq.w	80097c2 <_dtoa_r+0xb42>
 8009430:	461a      	mov	r2, r3
 8009432:	4601      	mov	r1, r0
 8009434:	4658      	mov	r0, fp
 8009436:	f000 fc9b 	bl	8009d70 <__pow5mult>
 800943a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800943c:	4604      	mov	r4, r0
 800943e:	2b01      	cmp	r3, #1
 8009440:	f300 808f 	bgt.w	8009562 <_dtoa_r+0x8e2>
 8009444:	9b02      	ldr	r3, [sp, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	f040 8087 	bne.w	800955a <_dtoa_r+0x8da>
 800944c:	9b03      	ldr	r3, [sp, #12]
 800944e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009452:	2b00      	cmp	r3, #0
 8009454:	f040 8083 	bne.w	800955e <_dtoa_r+0x8de>
 8009458:	9b03      	ldr	r3, [sp, #12]
 800945a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800945e:	0d1b      	lsrs	r3, r3, #20
 8009460:	051b      	lsls	r3, r3, #20
 8009462:	b12b      	cbz	r3, 8009470 <_dtoa_r+0x7f0>
 8009464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009466:	f108 0801 	add.w	r8, r8, #1
 800946a:	3301      	adds	r3, #1
 800946c:	9309      	str	r3, [sp, #36]	@ 0x24
 800946e:	2301      	movs	r3, #1
 8009470:	930a      	str	r3, [sp, #40]	@ 0x28
 8009472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009474:	2b00      	cmp	r3, #0
 8009476:	f000 81aa 	beq.w	80097ce <_dtoa_r+0xb4e>
 800947a:	6923      	ldr	r3, [r4, #16]
 800947c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009480:	6918      	ldr	r0, [r3, #16]
 8009482:	f000 fb6b 	bl	8009b5c <__hi0bits>
 8009486:	f1c0 0020 	rsb	r0, r0, #32
 800948a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800948c:	4418      	add	r0, r3
 800948e:	f010 001f 	ands.w	r0, r0, #31
 8009492:	d071      	beq.n	8009578 <_dtoa_r+0x8f8>
 8009494:	f1c0 0320 	rsb	r3, r0, #32
 8009498:	2b04      	cmp	r3, #4
 800949a:	dd65      	ble.n	8009568 <_dtoa_r+0x8e8>
 800949c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800949e:	f1c0 001c 	rsb	r0, r0, #28
 80094a2:	4403      	add	r3, r0
 80094a4:	4480      	add	r8, r0
 80094a6:	4406      	add	r6, r0
 80094a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80094aa:	f1b8 0f00 	cmp.w	r8, #0
 80094ae:	dd05      	ble.n	80094bc <_dtoa_r+0x83c>
 80094b0:	4649      	mov	r1, r9
 80094b2:	4642      	mov	r2, r8
 80094b4:	4658      	mov	r0, fp
 80094b6:	f000 fcb5 	bl	8009e24 <__lshift>
 80094ba:	4681      	mov	r9, r0
 80094bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094be:	2b00      	cmp	r3, #0
 80094c0:	dd05      	ble.n	80094ce <_dtoa_r+0x84e>
 80094c2:	4621      	mov	r1, r4
 80094c4:	461a      	mov	r2, r3
 80094c6:	4658      	mov	r0, fp
 80094c8:	f000 fcac 	bl	8009e24 <__lshift>
 80094cc:	4604      	mov	r4, r0
 80094ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d053      	beq.n	800957c <_dtoa_r+0x8fc>
 80094d4:	4621      	mov	r1, r4
 80094d6:	4648      	mov	r0, r9
 80094d8:	f000 fd10 	bl	8009efc <__mcmp>
 80094dc:	2800      	cmp	r0, #0
 80094de:	da4d      	bge.n	800957c <_dtoa_r+0x8fc>
 80094e0:	1e7b      	subs	r3, r7, #1
 80094e2:	4649      	mov	r1, r9
 80094e4:	9304      	str	r3, [sp, #16]
 80094e6:	220a      	movs	r2, #10
 80094e8:	2300      	movs	r3, #0
 80094ea:	4658      	mov	r0, fp
 80094ec:	f000 faf0 	bl	8009ad0 <__multadd>
 80094f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094f2:	4681      	mov	r9, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f000 816c 	beq.w	80097d2 <_dtoa_r+0xb52>
 80094fa:	2300      	movs	r3, #0
 80094fc:	4629      	mov	r1, r5
 80094fe:	220a      	movs	r2, #10
 8009500:	4658      	mov	r0, fp
 8009502:	f000 fae5 	bl	8009ad0 <__multadd>
 8009506:	9b08      	ldr	r3, [sp, #32]
 8009508:	4605      	mov	r5, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	dc61      	bgt.n	80095d2 <_dtoa_r+0x952>
 800950e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009510:	2b02      	cmp	r3, #2
 8009512:	dc3b      	bgt.n	800958c <_dtoa_r+0x90c>
 8009514:	e05d      	b.n	80095d2 <_dtoa_r+0x952>
 8009516:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009518:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800951c:	e746      	b.n	80093ac <_dtoa_r+0x72c>
 800951e:	9b07      	ldr	r3, [sp, #28]
 8009520:	1e5c      	subs	r4, r3, #1
 8009522:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009524:	42a3      	cmp	r3, r4
 8009526:	bfbf      	itttt	lt
 8009528:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800952a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800952c:	1ae3      	sublt	r3, r4, r3
 800952e:	18d2      	addlt	r2, r2, r3
 8009530:	bfa8      	it	ge
 8009532:	1b1c      	subge	r4, r3, r4
 8009534:	9b07      	ldr	r3, [sp, #28]
 8009536:	bfbe      	ittt	lt
 8009538:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800953a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800953c:	2400      	movlt	r4, #0
 800953e:	2b00      	cmp	r3, #0
 8009540:	bfb5      	itete	lt
 8009542:	eba8 0603 	sublt.w	r6, r8, r3
 8009546:	4646      	movge	r6, r8
 8009548:	2300      	movlt	r3, #0
 800954a:	9b07      	ldrge	r3, [sp, #28]
 800954c:	e730      	b.n	80093b0 <_dtoa_r+0x730>
 800954e:	4646      	mov	r6, r8
 8009550:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009552:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009554:	e735      	b.n	80093c2 <_dtoa_r+0x742>
 8009556:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009558:	e75c      	b.n	8009414 <_dtoa_r+0x794>
 800955a:	2300      	movs	r3, #0
 800955c:	e788      	b.n	8009470 <_dtoa_r+0x7f0>
 800955e:	9b02      	ldr	r3, [sp, #8]
 8009560:	e786      	b.n	8009470 <_dtoa_r+0x7f0>
 8009562:	2300      	movs	r3, #0
 8009564:	930a      	str	r3, [sp, #40]	@ 0x28
 8009566:	e788      	b.n	800947a <_dtoa_r+0x7fa>
 8009568:	d09f      	beq.n	80094aa <_dtoa_r+0x82a>
 800956a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800956c:	331c      	adds	r3, #28
 800956e:	441a      	add	r2, r3
 8009570:	4498      	add	r8, r3
 8009572:	441e      	add	r6, r3
 8009574:	9209      	str	r2, [sp, #36]	@ 0x24
 8009576:	e798      	b.n	80094aa <_dtoa_r+0x82a>
 8009578:	4603      	mov	r3, r0
 800957a:	e7f6      	b.n	800956a <_dtoa_r+0x8ea>
 800957c:	9b07      	ldr	r3, [sp, #28]
 800957e:	9704      	str	r7, [sp, #16]
 8009580:	2b00      	cmp	r3, #0
 8009582:	dc20      	bgt.n	80095c6 <_dtoa_r+0x946>
 8009584:	9308      	str	r3, [sp, #32]
 8009586:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009588:	2b02      	cmp	r3, #2
 800958a:	dd1e      	ble.n	80095ca <_dtoa_r+0x94a>
 800958c:	9b08      	ldr	r3, [sp, #32]
 800958e:	2b00      	cmp	r3, #0
 8009590:	f47f aebc 	bne.w	800930c <_dtoa_r+0x68c>
 8009594:	4621      	mov	r1, r4
 8009596:	2205      	movs	r2, #5
 8009598:	4658      	mov	r0, fp
 800959a:	f000 fa99 	bl	8009ad0 <__multadd>
 800959e:	4601      	mov	r1, r0
 80095a0:	4604      	mov	r4, r0
 80095a2:	4648      	mov	r0, r9
 80095a4:	f000 fcaa 	bl	8009efc <__mcmp>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	f77f aeaf 	ble.w	800930c <_dtoa_r+0x68c>
 80095ae:	2331      	movs	r3, #49	@ 0x31
 80095b0:	4656      	mov	r6, sl
 80095b2:	f806 3b01 	strb.w	r3, [r6], #1
 80095b6:	9b04      	ldr	r3, [sp, #16]
 80095b8:	3301      	adds	r3, #1
 80095ba:	9304      	str	r3, [sp, #16]
 80095bc:	e6aa      	b.n	8009314 <_dtoa_r+0x694>
 80095be:	9c07      	ldr	r4, [sp, #28]
 80095c0:	9704      	str	r7, [sp, #16]
 80095c2:	4625      	mov	r5, r4
 80095c4:	e7f3      	b.n	80095ae <_dtoa_r+0x92e>
 80095c6:	9b07      	ldr	r3, [sp, #28]
 80095c8:	9308      	str	r3, [sp, #32]
 80095ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f000 8104 	beq.w	80097da <_dtoa_r+0xb5a>
 80095d2:	2e00      	cmp	r6, #0
 80095d4:	dd05      	ble.n	80095e2 <_dtoa_r+0x962>
 80095d6:	4629      	mov	r1, r5
 80095d8:	4632      	mov	r2, r6
 80095da:	4658      	mov	r0, fp
 80095dc:	f000 fc22 	bl	8009e24 <__lshift>
 80095e0:	4605      	mov	r5, r0
 80095e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d05a      	beq.n	800969e <_dtoa_r+0xa1e>
 80095e8:	4658      	mov	r0, fp
 80095ea:	6869      	ldr	r1, [r5, #4]
 80095ec:	f000 fa0e 	bl	8009a0c <_Balloc>
 80095f0:	4606      	mov	r6, r0
 80095f2:	b928      	cbnz	r0, 8009600 <_dtoa_r+0x980>
 80095f4:	4602      	mov	r2, r0
 80095f6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80095fa:	4b83      	ldr	r3, [pc, #524]	@ (8009808 <_dtoa_r+0xb88>)
 80095fc:	f7ff bb54 	b.w	8008ca8 <_dtoa_r+0x28>
 8009600:	692a      	ldr	r2, [r5, #16]
 8009602:	f105 010c 	add.w	r1, r5, #12
 8009606:	3202      	adds	r2, #2
 8009608:	0092      	lsls	r2, r2, #2
 800960a:	300c      	adds	r0, #12
 800960c:	f000 fe36 	bl	800a27c <memcpy>
 8009610:	2201      	movs	r2, #1
 8009612:	4631      	mov	r1, r6
 8009614:	4658      	mov	r0, fp
 8009616:	f000 fc05 	bl	8009e24 <__lshift>
 800961a:	462f      	mov	r7, r5
 800961c:	4605      	mov	r5, r0
 800961e:	f10a 0301 	add.w	r3, sl, #1
 8009622:	9307      	str	r3, [sp, #28]
 8009624:	9b08      	ldr	r3, [sp, #32]
 8009626:	4453      	add	r3, sl
 8009628:	930b      	str	r3, [sp, #44]	@ 0x2c
 800962a:	9b02      	ldr	r3, [sp, #8]
 800962c:	f003 0301 	and.w	r3, r3, #1
 8009630:	930a      	str	r3, [sp, #40]	@ 0x28
 8009632:	9b07      	ldr	r3, [sp, #28]
 8009634:	4621      	mov	r1, r4
 8009636:	3b01      	subs	r3, #1
 8009638:	4648      	mov	r0, r9
 800963a:	9302      	str	r3, [sp, #8]
 800963c:	f7ff fa95 	bl	8008b6a <quorem>
 8009640:	4639      	mov	r1, r7
 8009642:	9008      	str	r0, [sp, #32]
 8009644:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009648:	4648      	mov	r0, r9
 800964a:	f000 fc57 	bl	8009efc <__mcmp>
 800964e:	462a      	mov	r2, r5
 8009650:	9009      	str	r0, [sp, #36]	@ 0x24
 8009652:	4621      	mov	r1, r4
 8009654:	4658      	mov	r0, fp
 8009656:	f000 fc6d 	bl	8009f34 <__mdiff>
 800965a:	68c2      	ldr	r2, [r0, #12]
 800965c:	4606      	mov	r6, r0
 800965e:	bb02      	cbnz	r2, 80096a2 <_dtoa_r+0xa22>
 8009660:	4601      	mov	r1, r0
 8009662:	4648      	mov	r0, r9
 8009664:	f000 fc4a 	bl	8009efc <__mcmp>
 8009668:	4602      	mov	r2, r0
 800966a:	4631      	mov	r1, r6
 800966c:	4658      	mov	r0, fp
 800966e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009670:	f000 fa0c 	bl	8009a8c <_Bfree>
 8009674:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009676:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009678:	9e07      	ldr	r6, [sp, #28]
 800967a:	ea43 0102 	orr.w	r1, r3, r2
 800967e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009680:	4319      	orrs	r1, r3
 8009682:	d110      	bne.n	80096a6 <_dtoa_r+0xa26>
 8009684:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009688:	d029      	beq.n	80096de <_dtoa_r+0xa5e>
 800968a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800968c:	2b00      	cmp	r3, #0
 800968e:	dd02      	ble.n	8009696 <_dtoa_r+0xa16>
 8009690:	9b08      	ldr	r3, [sp, #32]
 8009692:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009696:	9b02      	ldr	r3, [sp, #8]
 8009698:	f883 8000 	strb.w	r8, [r3]
 800969c:	e63b      	b.n	8009316 <_dtoa_r+0x696>
 800969e:	4628      	mov	r0, r5
 80096a0:	e7bb      	b.n	800961a <_dtoa_r+0x99a>
 80096a2:	2201      	movs	r2, #1
 80096a4:	e7e1      	b.n	800966a <_dtoa_r+0x9ea>
 80096a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	db04      	blt.n	80096b6 <_dtoa_r+0xa36>
 80096ac:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80096ae:	430b      	orrs	r3, r1
 80096b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80096b2:	430b      	orrs	r3, r1
 80096b4:	d120      	bne.n	80096f8 <_dtoa_r+0xa78>
 80096b6:	2a00      	cmp	r2, #0
 80096b8:	dded      	ble.n	8009696 <_dtoa_r+0xa16>
 80096ba:	4649      	mov	r1, r9
 80096bc:	2201      	movs	r2, #1
 80096be:	4658      	mov	r0, fp
 80096c0:	f000 fbb0 	bl	8009e24 <__lshift>
 80096c4:	4621      	mov	r1, r4
 80096c6:	4681      	mov	r9, r0
 80096c8:	f000 fc18 	bl	8009efc <__mcmp>
 80096cc:	2800      	cmp	r0, #0
 80096ce:	dc03      	bgt.n	80096d8 <_dtoa_r+0xa58>
 80096d0:	d1e1      	bne.n	8009696 <_dtoa_r+0xa16>
 80096d2:	f018 0f01 	tst.w	r8, #1
 80096d6:	d0de      	beq.n	8009696 <_dtoa_r+0xa16>
 80096d8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80096dc:	d1d8      	bne.n	8009690 <_dtoa_r+0xa10>
 80096de:	2339      	movs	r3, #57	@ 0x39
 80096e0:	9a02      	ldr	r2, [sp, #8]
 80096e2:	7013      	strb	r3, [r2, #0]
 80096e4:	4633      	mov	r3, r6
 80096e6:	461e      	mov	r6, r3
 80096e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80096ec:	3b01      	subs	r3, #1
 80096ee:	2a39      	cmp	r2, #57	@ 0x39
 80096f0:	d052      	beq.n	8009798 <_dtoa_r+0xb18>
 80096f2:	3201      	adds	r2, #1
 80096f4:	701a      	strb	r2, [r3, #0]
 80096f6:	e60e      	b.n	8009316 <_dtoa_r+0x696>
 80096f8:	2a00      	cmp	r2, #0
 80096fa:	dd07      	ble.n	800970c <_dtoa_r+0xa8c>
 80096fc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009700:	d0ed      	beq.n	80096de <_dtoa_r+0xa5e>
 8009702:	9a02      	ldr	r2, [sp, #8]
 8009704:	f108 0301 	add.w	r3, r8, #1
 8009708:	7013      	strb	r3, [r2, #0]
 800970a:	e604      	b.n	8009316 <_dtoa_r+0x696>
 800970c:	9b07      	ldr	r3, [sp, #28]
 800970e:	9a07      	ldr	r2, [sp, #28]
 8009710:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009714:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009716:	4293      	cmp	r3, r2
 8009718:	d028      	beq.n	800976c <_dtoa_r+0xaec>
 800971a:	4649      	mov	r1, r9
 800971c:	2300      	movs	r3, #0
 800971e:	220a      	movs	r2, #10
 8009720:	4658      	mov	r0, fp
 8009722:	f000 f9d5 	bl	8009ad0 <__multadd>
 8009726:	42af      	cmp	r7, r5
 8009728:	4681      	mov	r9, r0
 800972a:	f04f 0300 	mov.w	r3, #0
 800972e:	f04f 020a 	mov.w	r2, #10
 8009732:	4639      	mov	r1, r7
 8009734:	4658      	mov	r0, fp
 8009736:	d107      	bne.n	8009748 <_dtoa_r+0xac8>
 8009738:	f000 f9ca 	bl	8009ad0 <__multadd>
 800973c:	4607      	mov	r7, r0
 800973e:	4605      	mov	r5, r0
 8009740:	9b07      	ldr	r3, [sp, #28]
 8009742:	3301      	adds	r3, #1
 8009744:	9307      	str	r3, [sp, #28]
 8009746:	e774      	b.n	8009632 <_dtoa_r+0x9b2>
 8009748:	f000 f9c2 	bl	8009ad0 <__multadd>
 800974c:	4629      	mov	r1, r5
 800974e:	4607      	mov	r7, r0
 8009750:	2300      	movs	r3, #0
 8009752:	220a      	movs	r2, #10
 8009754:	4658      	mov	r0, fp
 8009756:	f000 f9bb 	bl	8009ad0 <__multadd>
 800975a:	4605      	mov	r5, r0
 800975c:	e7f0      	b.n	8009740 <_dtoa_r+0xac0>
 800975e:	9b08      	ldr	r3, [sp, #32]
 8009760:	2700      	movs	r7, #0
 8009762:	2b00      	cmp	r3, #0
 8009764:	bfcc      	ite	gt
 8009766:	461e      	movgt	r6, r3
 8009768:	2601      	movle	r6, #1
 800976a:	4456      	add	r6, sl
 800976c:	4649      	mov	r1, r9
 800976e:	2201      	movs	r2, #1
 8009770:	4658      	mov	r0, fp
 8009772:	f000 fb57 	bl	8009e24 <__lshift>
 8009776:	4621      	mov	r1, r4
 8009778:	4681      	mov	r9, r0
 800977a:	f000 fbbf 	bl	8009efc <__mcmp>
 800977e:	2800      	cmp	r0, #0
 8009780:	dcb0      	bgt.n	80096e4 <_dtoa_r+0xa64>
 8009782:	d102      	bne.n	800978a <_dtoa_r+0xb0a>
 8009784:	f018 0f01 	tst.w	r8, #1
 8009788:	d1ac      	bne.n	80096e4 <_dtoa_r+0xa64>
 800978a:	4633      	mov	r3, r6
 800978c:	461e      	mov	r6, r3
 800978e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009792:	2a30      	cmp	r2, #48	@ 0x30
 8009794:	d0fa      	beq.n	800978c <_dtoa_r+0xb0c>
 8009796:	e5be      	b.n	8009316 <_dtoa_r+0x696>
 8009798:	459a      	cmp	sl, r3
 800979a:	d1a4      	bne.n	80096e6 <_dtoa_r+0xa66>
 800979c:	9b04      	ldr	r3, [sp, #16]
 800979e:	3301      	adds	r3, #1
 80097a0:	9304      	str	r3, [sp, #16]
 80097a2:	2331      	movs	r3, #49	@ 0x31
 80097a4:	f88a 3000 	strb.w	r3, [sl]
 80097a8:	e5b5      	b.n	8009316 <_dtoa_r+0x696>
 80097aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80097ac:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800980c <_dtoa_r+0xb8c>
 80097b0:	b11b      	cbz	r3, 80097ba <_dtoa_r+0xb3a>
 80097b2:	f10a 0308 	add.w	r3, sl, #8
 80097b6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80097b8:	6013      	str	r3, [r2, #0]
 80097ba:	4650      	mov	r0, sl
 80097bc:	b017      	add	sp, #92	@ 0x5c
 80097be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	f77f ae3d 	ble.w	8009444 <_dtoa_r+0x7c4>
 80097ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80097ce:	2001      	movs	r0, #1
 80097d0:	e65b      	b.n	800948a <_dtoa_r+0x80a>
 80097d2:	9b08      	ldr	r3, [sp, #32]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f77f aed6 	ble.w	8009586 <_dtoa_r+0x906>
 80097da:	4656      	mov	r6, sl
 80097dc:	4621      	mov	r1, r4
 80097de:	4648      	mov	r0, r9
 80097e0:	f7ff f9c3 	bl	8008b6a <quorem>
 80097e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80097e8:	9b08      	ldr	r3, [sp, #32]
 80097ea:	f806 8b01 	strb.w	r8, [r6], #1
 80097ee:	eba6 020a 	sub.w	r2, r6, sl
 80097f2:	4293      	cmp	r3, r2
 80097f4:	ddb3      	ble.n	800975e <_dtoa_r+0xade>
 80097f6:	4649      	mov	r1, r9
 80097f8:	2300      	movs	r3, #0
 80097fa:	220a      	movs	r2, #10
 80097fc:	4658      	mov	r0, fp
 80097fe:	f000 f967 	bl	8009ad0 <__multadd>
 8009802:	4681      	mov	r9, r0
 8009804:	e7ea      	b.n	80097dc <_dtoa_r+0xb5c>
 8009806:	bf00      	nop
 8009808:	0800bb22 	.word	0x0800bb22
 800980c:	0800baa6 	.word	0x0800baa6

08009810 <_free_r>:
 8009810:	b538      	push	{r3, r4, r5, lr}
 8009812:	4605      	mov	r5, r0
 8009814:	2900      	cmp	r1, #0
 8009816:	d040      	beq.n	800989a <_free_r+0x8a>
 8009818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800981c:	1f0c      	subs	r4, r1, #4
 800981e:	2b00      	cmp	r3, #0
 8009820:	bfb8      	it	lt
 8009822:	18e4      	addlt	r4, r4, r3
 8009824:	f000 f8e6 	bl	80099f4 <__malloc_lock>
 8009828:	4a1c      	ldr	r2, [pc, #112]	@ (800989c <_free_r+0x8c>)
 800982a:	6813      	ldr	r3, [r2, #0]
 800982c:	b933      	cbnz	r3, 800983c <_free_r+0x2c>
 800982e:	6063      	str	r3, [r4, #4]
 8009830:	6014      	str	r4, [r2, #0]
 8009832:	4628      	mov	r0, r5
 8009834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009838:	f000 b8e2 	b.w	8009a00 <__malloc_unlock>
 800983c:	42a3      	cmp	r3, r4
 800983e:	d908      	bls.n	8009852 <_free_r+0x42>
 8009840:	6820      	ldr	r0, [r4, #0]
 8009842:	1821      	adds	r1, r4, r0
 8009844:	428b      	cmp	r3, r1
 8009846:	bf01      	itttt	eq
 8009848:	6819      	ldreq	r1, [r3, #0]
 800984a:	685b      	ldreq	r3, [r3, #4]
 800984c:	1809      	addeq	r1, r1, r0
 800984e:	6021      	streq	r1, [r4, #0]
 8009850:	e7ed      	b.n	800982e <_free_r+0x1e>
 8009852:	461a      	mov	r2, r3
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	b10b      	cbz	r3, 800985c <_free_r+0x4c>
 8009858:	42a3      	cmp	r3, r4
 800985a:	d9fa      	bls.n	8009852 <_free_r+0x42>
 800985c:	6811      	ldr	r1, [r2, #0]
 800985e:	1850      	adds	r0, r2, r1
 8009860:	42a0      	cmp	r0, r4
 8009862:	d10b      	bne.n	800987c <_free_r+0x6c>
 8009864:	6820      	ldr	r0, [r4, #0]
 8009866:	4401      	add	r1, r0
 8009868:	1850      	adds	r0, r2, r1
 800986a:	4283      	cmp	r3, r0
 800986c:	6011      	str	r1, [r2, #0]
 800986e:	d1e0      	bne.n	8009832 <_free_r+0x22>
 8009870:	6818      	ldr	r0, [r3, #0]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	4408      	add	r0, r1
 8009876:	6010      	str	r0, [r2, #0]
 8009878:	6053      	str	r3, [r2, #4]
 800987a:	e7da      	b.n	8009832 <_free_r+0x22>
 800987c:	d902      	bls.n	8009884 <_free_r+0x74>
 800987e:	230c      	movs	r3, #12
 8009880:	602b      	str	r3, [r5, #0]
 8009882:	e7d6      	b.n	8009832 <_free_r+0x22>
 8009884:	6820      	ldr	r0, [r4, #0]
 8009886:	1821      	adds	r1, r4, r0
 8009888:	428b      	cmp	r3, r1
 800988a:	bf01      	itttt	eq
 800988c:	6819      	ldreq	r1, [r3, #0]
 800988e:	685b      	ldreq	r3, [r3, #4]
 8009890:	1809      	addeq	r1, r1, r0
 8009892:	6021      	streq	r1, [r4, #0]
 8009894:	6063      	str	r3, [r4, #4]
 8009896:	6054      	str	r4, [r2, #4]
 8009898:	e7cb      	b.n	8009832 <_free_r+0x22>
 800989a:	bd38      	pop	{r3, r4, r5, pc}
 800989c:	200006f8 	.word	0x200006f8

080098a0 <malloc>:
 80098a0:	4b02      	ldr	r3, [pc, #8]	@ (80098ac <malloc+0xc>)
 80098a2:	4601      	mov	r1, r0
 80098a4:	6818      	ldr	r0, [r3, #0]
 80098a6:	f000 b825 	b.w	80098f4 <_malloc_r>
 80098aa:	bf00      	nop
 80098ac:	20000064 	.word	0x20000064

080098b0 <sbrk_aligned>:
 80098b0:	b570      	push	{r4, r5, r6, lr}
 80098b2:	4e0f      	ldr	r6, [pc, #60]	@ (80098f0 <sbrk_aligned+0x40>)
 80098b4:	460c      	mov	r4, r1
 80098b6:	6831      	ldr	r1, [r6, #0]
 80098b8:	4605      	mov	r5, r0
 80098ba:	b911      	cbnz	r1, 80098c2 <sbrk_aligned+0x12>
 80098bc:	f000 fcce 	bl	800a25c <_sbrk_r>
 80098c0:	6030      	str	r0, [r6, #0]
 80098c2:	4621      	mov	r1, r4
 80098c4:	4628      	mov	r0, r5
 80098c6:	f000 fcc9 	bl	800a25c <_sbrk_r>
 80098ca:	1c43      	adds	r3, r0, #1
 80098cc:	d103      	bne.n	80098d6 <sbrk_aligned+0x26>
 80098ce:	f04f 34ff 	mov.w	r4, #4294967295
 80098d2:	4620      	mov	r0, r4
 80098d4:	bd70      	pop	{r4, r5, r6, pc}
 80098d6:	1cc4      	adds	r4, r0, #3
 80098d8:	f024 0403 	bic.w	r4, r4, #3
 80098dc:	42a0      	cmp	r0, r4
 80098de:	d0f8      	beq.n	80098d2 <sbrk_aligned+0x22>
 80098e0:	1a21      	subs	r1, r4, r0
 80098e2:	4628      	mov	r0, r5
 80098e4:	f000 fcba 	bl	800a25c <_sbrk_r>
 80098e8:	3001      	adds	r0, #1
 80098ea:	d1f2      	bne.n	80098d2 <sbrk_aligned+0x22>
 80098ec:	e7ef      	b.n	80098ce <sbrk_aligned+0x1e>
 80098ee:	bf00      	nop
 80098f0:	200006f4 	.word	0x200006f4

080098f4 <_malloc_r>:
 80098f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098f8:	1ccd      	adds	r5, r1, #3
 80098fa:	f025 0503 	bic.w	r5, r5, #3
 80098fe:	3508      	adds	r5, #8
 8009900:	2d0c      	cmp	r5, #12
 8009902:	bf38      	it	cc
 8009904:	250c      	movcc	r5, #12
 8009906:	2d00      	cmp	r5, #0
 8009908:	4606      	mov	r6, r0
 800990a:	db01      	blt.n	8009910 <_malloc_r+0x1c>
 800990c:	42a9      	cmp	r1, r5
 800990e:	d904      	bls.n	800991a <_malloc_r+0x26>
 8009910:	230c      	movs	r3, #12
 8009912:	6033      	str	r3, [r6, #0]
 8009914:	2000      	movs	r0, #0
 8009916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800991a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80099f0 <_malloc_r+0xfc>
 800991e:	f000 f869 	bl	80099f4 <__malloc_lock>
 8009922:	f8d8 3000 	ldr.w	r3, [r8]
 8009926:	461c      	mov	r4, r3
 8009928:	bb44      	cbnz	r4, 800997c <_malloc_r+0x88>
 800992a:	4629      	mov	r1, r5
 800992c:	4630      	mov	r0, r6
 800992e:	f7ff ffbf 	bl	80098b0 <sbrk_aligned>
 8009932:	1c43      	adds	r3, r0, #1
 8009934:	4604      	mov	r4, r0
 8009936:	d158      	bne.n	80099ea <_malloc_r+0xf6>
 8009938:	f8d8 4000 	ldr.w	r4, [r8]
 800993c:	4627      	mov	r7, r4
 800993e:	2f00      	cmp	r7, #0
 8009940:	d143      	bne.n	80099ca <_malloc_r+0xd6>
 8009942:	2c00      	cmp	r4, #0
 8009944:	d04b      	beq.n	80099de <_malloc_r+0xea>
 8009946:	6823      	ldr	r3, [r4, #0]
 8009948:	4639      	mov	r1, r7
 800994a:	4630      	mov	r0, r6
 800994c:	eb04 0903 	add.w	r9, r4, r3
 8009950:	f000 fc84 	bl	800a25c <_sbrk_r>
 8009954:	4581      	cmp	r9, r0
 8009956:	d142      	bne.n	80099de <_malloc_r+0xea>
 8009958:	6821      	ldr	r1, [r4, #0]
 800995a:	4630      	mov	r0, r6
 800995c:	1a6d      	subs	r5, r5, r1
 800995e:	4629      	mov	r1, r5
 8009960:	f7ff ffa6 	bl	80098b0 <sbrk_aligned>
 8009964:	3001      	adds	r0, #1
 8009966:	d03a      	beq.n	80099de <_malloc_r+0xea>
 8009968:	6823      	ldr	r3, [r4, #0]
 800996a:	442b      	add	r3, r5
 800996c:	6023      	str	r3, [r4, #0]
 800996e:	f8d8 3000 	ldr.w	r3, [r8]
 8009972:	685a      	ldr	r2, [r3, #4]
 8009974:	bb62      	cbnz	r2, 80099d0 <_malloc_r+0xdc>
 8009976:	f8c8 7000 	str.w	r7, [r8]
 800997a:	e00f      	b.n	800999c <_malloc_r+0xa8>
 800997c:	6822      	ldr	r2, [r4, #0]
 800997e:	1b52      	subs	r2, r2, r5
 8009980:	d420      	bmi.n	80099c4 <_malloc_r+0xd0>
 8009982:	2a0b      	cmp	r2, #11
 8009984:	d917      	bls.n	80099b6 <_malloc_r+0xc2>
 8009986:	1961      	adds	r1, r4, r5
 8009988:	42a3      	cmp	r3, r4
 800998a:	6025      	str	r5, [r4, #0]
 800998c:	bf18      	it	ne
 800998e:	6059      	strne	r1, [r3, #4]
 8009990:	6863      	ldr	r3, [r4, #4]
 8009992:	bf08      	it	eq
 8009994:	f8c8 1000 	streq.w	r1, [r8]
 8009998:	5162      	str	r2, [r4, r5]
 800999a:	604b      	str	r3, [r1, #4]
 800999c:	4630      	mov	r0, r6
 800999e:	f000 f82f 	bl	8009a00 <__malloc_unlock>
 80099a2:	f104 000b 	add.w	r0, r4, #11
 80099a6:	1d23      	adds	r3, r4, #4
 80099a8:	f020 0007 	bic.w	r0, r0, #7
 80099ac:	1ac2      	subs	r2, r0, r3
 80099ae:	bf1c      	itt	ne
 80099b0:	1a1b      	subne	r3, r3, r0
 80099b2:	50a3      	strne	r3, [r4, r2]
 80099b4:	e7af      	b.n	8009916 <_malloc_r+0x22>
 80099b6:	6862      	ldr	r2, [r4, #4]
 80099b8:	42a3      	cmp	r3, r4
 80099ba:	bf0c      	ite	eq
 80099bc:	f8c8 2000 	streq.w	r2, [r8]
 80099c0:	605a      	strne	r2, [r3, #4]
 80099c2:	e7eb      	b.n	800999c <_malloc_r+0xa8>
 80099c4:	4623      	mov	r3, r4
 80099c6:	6864      	ldr	r4, [r4, #4]
 80099c8:	e7ae      	b.n	8009928 <_malloc_r+0x34>
 80099ca:	463c      	mov	r4, r7
 80099cc:	687f      	ldr	r7, [r7, #4]
 80099ce:	e7b6      	b.n	800993e <_malloc_r+0x4a>
 80099d0:	461a      	mov	r2, r3
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	42a3      	cmp	r3, r4
 80099d6:	d1fb      	bne.n	80099d0 <_malloc_r+0xdc>
 80099d8:	2300      	movs	r3, #0
 80099da:	6053      	str	r3, [r2, #4]
 80099dc:	e7de      	b.n	800999c <_malloc_r+0xa8>
 80099de:	230c      	movs	r3, #12
 80099e0:	4630      	mov	r0, r6
 80099e2:	6033      	str	r3, [r6, #0]
 80099e4:	f000 f80c 	bl	8009a00 <__malloc_unlock>
 80099e8:	e794      	b.n	8009914 <_malloc_r+0x20>
 80099ea:	6005      	str	r5, [r0, #0]
 80099ec:	e7d6      	b.n	800999c <_malloc_r+0xa8>
 80099ee:	bf00      	nop
 80099f0:	200006f8 	.word	0x200006f8

080099f4 <__malloc_lock>:
 80099f4:	4801      	ldr	r0, [pc, #4]	@ (80099fc <__malloc_lock+0x8>)
 80099f6:	f7ff b8a8 	b.w	8008b4a <__retarget_lock_acquire_recursive>
 80099fa:	bf00      	nop
 80099fc:	200006f0 	.word	0x200006f0

08009a00 <__malloc_unlock>:
 8009a00:	4801      	ldr	r0, [pc, #4]	@ (8009a08 <__malloc_unlock+0x8>)
 8009a02:	f7ff b8a3 	b.w	8008b4c <__retarget_lock_release_recursive>
 8009a06:	bf00      	nop
 8009a08:	200006f0 	.word	0x200006f0

08009a0c <_Balloc>:
 8009a0c:	b570      	push	{r4, r5, r6, lr}
 8009a0e:	69c6      	ldr	r6, [r0, #28]
 8009a10:	4604      	mov	r4, r0
 8009a12:	460d      	mov	r5, r1
 8009a14:	b976      	cbnz	r6, 8009a34 <_Balloc+0x28>
 8009a16:	2010      	movs	r0, #16
 8009a18:	f7ff ff42 	bl	80098a0 <malloc>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	61e0      	str	r0, [r4, #28]
 8009a20:	b920      	cbnz	r0, 8009a2c <_Balloc+0x20>
 8009a22:	216b      	movs	r1, #107	@ 0x6b
 8009a24:	4b17      	ldr	r3, [pc, #92]	@ (8009a84 <_Balloc+0x78>)
 8009a26:	4818      	ldr	r0, [pc, #96]	@ (8009a88 <_Balloc+0x7c>)
 8009a28:	f000 fc36 	bl	800a298 <__assert_func>
 8009a2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a30:	6006      	str	r6, [r0, #0]
 8009a32:	60c6      	str	r6, [r0, #12]
 8009a34:	69e6      	ldr	r6, [r4, #28]
 8009a36:	68f3      	ldr	r3, [r6, #12]
 8009a38:	b183      	cbz	r3, 8009a5c <_Balloc+0x50>
 8009a3a:	69e3      	ldr	r3, [r4, #28]
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a42:	b9b8      	cbnz	r0, 8009a74 <_Balloc+0x68>
 8009a44:	2101      	movs	r1, #1
 8009a46:	fa01 f605 	lsl.w	r6, r1, r5
 8009a4a:	1d72      	adds	r2, r6, #5
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	0092      	lsls	r2, r2, #2
 8009a50:	f000 fc40 	bl	800a2d4 <_calloc_r>
 8009a54:	b160      	cbz	r0, 8009a70 <_Balloc+0x64>
 8009a56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a5a:	e00e      	b.n	8009a7a <_Balloc+0x6e>
 8009a5c:	2221      	movs	r2, #33	@ 0x21
 8009a5e:	2104      	movs	r1, #4
 8009a60:	4620      	mov	r0, r4
 8009a62:	f000 fc37 	bl	800a2d4 <_calloc_r>
 8009a66:	69e3      	ldr	r3, [r4, #28]
 8009a68:	60f0      	str	r0, [r6, #12]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d1e4      	bne.n	8009a3a <_Balloc+0x2e>
 8009a70:	2000      	movs	r0, #0
 8009a72:	bd70      	pop	{r4, r5, r6, pc}
 8009a74:	6802      	ldr	r2, [r0, #0]
 8009a76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a80:	e7f7      	b.n	8009a72 <_Balloc+0x66>
 8009a82:	bf00      	nop
 8009a84:	0800bab3 	.word	0x0800bab3
 8009a88:	0800bb33 	.word	0x0800bb33

08009a8c <_Bfree>:
 8009a8c:	b570      	push	{r4, r5, r6, lr}
 8009a8e:	69c6      	ldr	r6, [r0, #28]
 8009a90:	4605      	mov	r5, r0
 8009a92:	460c      	mov	r4, r1
 8009a94:	b976      	cbnz	r6, 8009ab4 <_Bfree+0x28>
 8009a96:	2010      	movs	r0, #16
 8009a98:	f7ff ff02 	bl	80098a0 <malloc>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	61e8      	str	r0, [r5, #28]
 8009aa0:	b920      	cbnz	r0, 8009aac <_Bfree+0x20>
 8009aa2:	218f      	movs	r1, #143	@ 0x8f
 8009aa4:	4b08      	ldr	r3, [pc, #32]	@ (8009ac8 <_Bfree+0x3c>)
 8009aa6:	4809      	ldr	r0, [pc, #36]	@ (8009acc <_Bfree+0x40>)
 8009aa8:	f000 fbf6 	bl	800a298 <__assert_func>
 8009aac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ab0:	6006      	str	r6, [r0, #0]
 8009ab2:	60c6      	str	r6, [r0, #12]
 8009ab4:	b13c      	cbz	r4, 8009ac6 <_Bfree+0x3a>
 8009ab6:	69eb      	ldr	r3, [r5, #28]
 8009ab8:	6862      	ldr	r2, [r4, #4]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ac0:	6021      	str	r1, [r4, #0]
 8009ac2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ac6:	bd70      	pop	{r4, r5, r6, pc}
 8009ac8:	0800bab3 	.word	0x0800bab3
 8009acc:	0800bb33 	.word	0x0800bb33

08009ad0 <__multadd>:
 8009ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad4:	4607      	mov	r7, r0
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	461e      	mov	r6, r3
 8009ada:	2000      	movs	r0, #0
 8009adc:	690d      	ldr	r5, [r1, #16]
 8009ade:	f101 0c14 	add.w	ip, r1, #20
 8009ae2:	f8dc 3000 	ldr.w	r3, [ip]
 8009ae6:	3001      	adds	r0, #1
 8009ae8:	b299      	uxth	r1, r3
 8009aea:	fb02 6101 	mla	r1, r2, r1, r6
 8009aee:	0c1e      	lsrs	r6, r3, #16
 8009af0:	0c0b      	lsrs	r3, r1, #16
 8009af2:	fb02 3306 	mla	r3, r2, r6, r3
 8009af6:	b289      	uxth	r1, r1
 8009af8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009afc:	4285      	cmp	r5, r0
 8009afe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b02:	f84c 1b04 	str.w	r1, [ip], #4
 8009b06:	dcec      	bgt.n	8009ae2 <__multadd+0x12>
 8009b08:	b30e      	cbz	r6, 8009b4e <__multadd+0x7e>
 8009b0a:	68a3      	ldr	r3, [r4, #8]
 8009b0c:	42ab      	cmp	r3, r5
 8009b0e:	dc19      	bgt.n	8009b44 <__multadd+0x74>
 8009b10:	6861      	ldr	r1, [r4, #4]
 8009b12:	4638      	mov	r0, r7
 8009b14:	3101      	adds	r1, #1
 8009b16:	f7ff ff79 	bl	8009a0c <_Balloc>
 8009b1a:	4680      	mov	r8, r0
 8009b1c:	b928      	cbnz	r0, 8009b2a <__multadd+0x5a>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	21ba      	movs	r1, #186	@ 0xba
 8009b22:	4b0c      	ldr	r3, [pc, #48]	@ (8009b54 <__multadd+0x84>)
 8009b24:	480c      	ldr	r0, [pc, #48]	@ (8009b58 <__multadd+0x88>)
 8009b26:	f000 fbb7 	bl	800a298 <__assert_func>
 8009b2a:	6922      	ldr	r2, [r4, #16]
 8009b2c:	f104 010c 	add.w	r1, r4, #12
 8009b30:	3202      	adds	r2, #2
 8009b32:	0092      	lsls	r2, r2, #2
 8009b34:	300c      	adds	r0, #12
 8009b36:	f000 fba1 	bl	800a27c <memcpy>
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	4638      	mov	r0, r7
 8009b3e:	f7ff ffa5 	bl	8009a8c <_Bfree>
 8009b42:	4644      	mov	r4, r8
 8009b44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b48:	3501      	adds	r5, #1
 8009b4a:	615e      	str	r6, [r3, #20]
 8009b4c:	6125      	str	r5, [r4, #16]
 8009b4e:	4620      	mov	r0, r4
 8009b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b54:	0800bb22 	.word	0x0800bb22
 8009b58:	0800bb33 	.word	0x0800bb33

08009b5c <__hi0bits>:
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009b62:	bf3a      	itte	cc
 8009b64:	0403      	lslcc	r3, r0, #16
 8009b66:	2010      	movcc	r0, #16
 8009b68:	2000      	movcs	r0, #0
 8009b6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b6e:	bf3c      	itt	cc
 8009b70:	021b      	lslcc	r3, r3, #8
 8009b72:	3008      	addcc	r0, #8
 8009b74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b78:	bf3c      	itt	cc
 8009b7a:	011b      	lslcc	r3, r3, #4
 8009b7c:	3004      	addcc	r0, #4
 8009b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b82:	bf3c      	itt	cc
 8009b84:	009b      	lslcc	r3, r3, #2
 8009b86:	3002      	addcc	r0, #2
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	db05      	blt.n	8009b98 <__hi0bits+0x3c>
 8009b8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009b90:	f100 0001 	add.w	r0, r0, #1
 8009b94:	bf08      	it	eq
 8009b96:	2020      	moveq	r0, #32
 8009b98:	4770      	bx	lr

08009b9a <__lo0bits>:
 8009b9a:	6803      	ldr	r3, [r0, #0]
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	f013 0007 	ands.w	r0, r3, #7
 8009ba2:	d00b      	beq.n	8009bbc <__lo0bits+0x22>
 8009ba4:	07d9      	lsls	r1, r3, #31
 8009ba6:	d421      	bmi.n	8009bec <__lo0bits+0x52>
 8009ba8:	0798      	lsls	r0, r3, #30
 8009baa:	bf49      	itett	mi
 8009bac:	085b      	lsrmi	r3, r3, #1
 8009bae:	089b      	lsrpl	r3, r3, #2
 8009bb0:	2001      	movmi	r0, #1
 8009bb2:	6013      	strmi	r3, [r2, #0]
 8009bb4:	bf5c      	itt	pl
 8009bb6:	2002      	movpl	r0, #2
 8009bb8:	6013      	strpl	r3, [r2, #0]
 8009bba:	4770      	bx	lr
 8009bbc:	b299      	uxth	r1, r3
 8009bbe:	b909      	cbnz	r1, 8009bc4 <__lo0bits+0x2a>
 8009bc0:	2010      	movs	r0, #16
 8009bc2:	0c1b      	lsrs	r3, r3, #16
 8009bc4:	b2d9      	uxtb	r1, r3
 8009bc6:	b909      	cbnz	r1, 8009bcc <__lo0bits+0x32>
 8009bc8:	3008      	adds	r0, #8
 8009bca:	0a1b      	lsrs	r3, r3, #8
 8009bcc:	0719      	lsls	r1, r3, #28
 8009bce:	bf04      	itt	eq
 8009bd0:	091b      	lsreq	r3, r3, #4
 8009bd2:	3004      	addeq	r0, #4
 8009bd4:	0799      	lsls	r1, r3, #30
 8009bd6:	bf04      	itt	eq
 8009bd8:	089b      	lsreq	r3, r3, #2
 8009bda:	3002      	addeq	r0, #2
 8009bdc:	07d9      	lsls	r1, r3, #31
 8009bde:	d403      	bmi.n	8009be8 <__lo0bits+0x4e>
 8009be0:	085b      	lsrs	r3, r3, #1
 8009be2:	f100 0001 	add.w	r0, r0, #1
 8009be6:	d003      	beq.n	8009bf0 <__lo0bits+0x56>
 8009be8:	6013      	str	r3, [r2, #0]
 8009bea:	4770      	bx	lr
 8009bec:	2000      	movs	r0, #0
 8009bee:	4770      	bx	lr
 8009bf0:	2020      	movs	r0, #32
 8009bf2:	4770      	bx	lr

08009bf4 <__i2b>:
 8009bf4:	b510      	push	{r4, lr}
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	f7ff ff07 	bl	8009a0c <_Balloc>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	b928      	cbnz	r0, 8009c0e <__i2b+0x1a>
 8009c02:	f240 1145 	movw	r1, #325	@ 0x145
 8009c06:	4b04      	ldr	r3, [pc, #16]	@ (8009c18 <__i2b+0x24>)
 8009c08:	4804      	ldr	r0, [pc, #16]	@ (8009c1c <__i2b+0x28>)
 8009c0a:	f000 fb45 	bl	800a298 <__assert_func>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	6144      	str	r4, [r0, #20]
 8009c12:	6103      	str	r3, [r0, #16]
 8009c14:	bd10      	pop	{r4, pc}
 8009c16:	bf00      	nop
 8009c18:	0800bb22 	.word	0x0800bb22
 8009c1c:	0800bb33 	.word	0x0800bb33

08009c20 <__multiply>:
 8009c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c24:	4614      	mov	r4, r2
 8009c26:	690a      	ldr	r2, [r1, #16]
 8009c28:	6923      	ldr	r3, [r4, #16]
 8009c2a:	460f      	mov	r7, r1
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	bfa2      	ittt	ge
 8009c30:	4623      	movge	r3, r4
 8009c32:	460c      	movge	r4, r1
 8009c34:	461f      	movge	r7, r3
 8009c36:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009c3a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009c3e:	68a3      	ldr	r3, [r4, #8]
 8009c40:	6861      	ldr	r1, [r4, #4]
 8009c42:	eb0a 0609 	add.w	r6, sl, r9
 8009c46:	42b3      	cmp	r3, r6
 8009c48:	b085      	sub	sp, #20
 8009c4a:	bfb8      	it	lt
 8009c4c:	3101      	addlt	r1, #1
 8009c4e:	f7ff fedd 	bl	8009a0c <_Balloc>
 8009c52:	b930      	cbnz	r0, 8009c62 <__multiply+0x42>
 8009c54:	4602      	mov	r2, r0
 8009c56:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009c5a:	4b43      	ldr	r3, [pc, #268]	@ (8009d68 <__multiply+0x148>)
 8009c5c:	4843      	ldr	r0, [pc, #268]	@ (8009d6c <__multiply+0x14c>)
 8009c5e:	f000 fb1b 	bl	800a298 <__assert_func>
 8009c62:	f100 0514 	add.w	r5, r0, #20
 8009c66:	462b      	mov	r3, r5
 8009c68:	2200      	movs	r2, #0
 8009c6a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c6e:	4543      	cmp	r3, r8
 8009c70:	d321      	bcc.n	8009cb6 <__multiply+0x96>
 8009c72:	f107 0114 	add.w	r1, r7, #20
 8009c76:	f104 0214 	add.w	r2, r4, #20
 8009c7a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009c7e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009c82:	9302      	str	r3, [sp, #8]
 8009c84:	1b13      	subs	r3, r2, r4
 8009c86:	3b15      	subs	r3, #21
 8009c88:	f023 0303 	bic.w	r3, r3, #3
 8009c8c:	3304      	adds	r3, #4
 8009c8e:	f104 0715 	add.w	r7, r4, #21
 8009c92:	42ba      	cmp	r2, r7
 8009c94:	bf38      	it	cc
 8009c96:	2304      	movcc	r3, #4
 8009c98:	9301      	str	r3, [sp, #4]
 8009c9a:	9b02      	ldr	r3, [sp, #8]
 8009c9c:	9103      	str	r1, [sp, #12]
 8009c9e:	428b      	cmp	r3, r1
 8009ca0:	d80c      	bhi.n	8009cbc <__multiply+0x9c>
 8009ca2:	2e00      	cmp	r6, #0
 8009ca4:	dd03      	ble.n	8009cae <__multiply+0x8e>
 8009ca6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d05a      	beq.n	8009d64 <__multiply+0x144>
 8009cae:	6106      	str	r6, [r0, #16]
 8009cb0:	b005      	add	sp, #20
 8009cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb6:	f843 2b04 	str.w	r2, [r3], #4
 8009cba:	e7d8      	b.n	8009c6e <__multiply+0x4e>
 8009cbc:	f8b1 a000 	ldrh.w	sl, [r1]
 8009cc0:	f1ba 0f00 	cmp.w	sl, #0
 8009cc4:	d023      	beq.n	8009d0e <__multiply+0xee>
 8009cc6:	46a9      	mov	r9, r5
 8009cc8:	f04f 0c00 	mov.w	ip, #0
 8009ccc:	f104 0e14 	add.w	lr, r4, #20
 8009cd0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009cd4:	f8d9 3000 	ldr.w	r3, [r9]
 8009cd8:	fa1f fb87 	uxth.w	fp, r7
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	fb0a 330b 	mla	r3, sl, fp, r3
 8009ce2:	4463      	add	r3, ip
 8009ce4:	f8d9 c000 	ldr.w	ip, [r9]
 8009ce8:	0c3f      	lsrs	r7, r7, #16
 8009cea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009cee:	fb0a c707 	mla	r7, sl, r7, ip
 8009cf2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009cfc:	4572      	cmp	r2, lr
 8009cfe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009d02:	f849 3b04 	str.w	r3, [r9], #4
 8009d06:	d8e3      	bhi.n	8009cd0 <__multiply+0xb0>
 8009d08:	9b01      	ldr	r3, [sp, #4]
 8009d0a:	f845 c003 	str.w	ip, [r5, r3]
 8009d0e:	9b03      	ldr	r3, [sp, #12]
 8009d10:	3104      	adds	r1, #4
 8009d12:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009d16:	f1b9 0f00 	cmp.w	r9, #0
 8009d1a:	d021      	beq.n	8009d60 <__multiply+0x140>
 8009d1c:	46ae      	mov	lr, r5
 8009d1e:	f04f 0a00 	mov.w	sl, #0
 8009d22:	682b      	ldr	r3, [r5, #0]
 8009d24:	f104 0c14 	add.w	ip, r4, #20
 8009d28:	f8bc b000 	ldrh.w	fp, [ip]
 8009d2c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	fb09 770b 	mla	r7, r9, fp, r7
 8009d36:	4457      	add	r7, sl
 8009d38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009d3c:	f84e 3b04 	str.w	r3, [lr], #4
 8009d40:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d48:	f8be 3000 	ldrh.w	r3, [lr]
 8009d4c:	4562      	cmp	r2, ip
 8009d4e:	fb09 330a 	mla	r3, r9, sl, r3
 8009d52:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009d56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d5a:	d8e5      	bhi.n	8009d28 <__multiply+0x108>
 8009d5c:	9f01      	ldr	r7, [sp, #4]
 8009d5e:	51eb      	str	r3, [r5, r7]
 8009d60:	3504      	adds	r5, #4
 8009d62:	e79a      	b.n	8009c9a <__multiply+0x7a>
 8009d64:	3e01      	subs	r6, #1
 8009d66:	e79c      	b.n	8009ca2 <__multiply+0x82>
 8009d68:	0800bb22 	.word	0x0800bb22
 8009d6c:	0800bb33 	.word	0x0800bb33

08009d70 <__pow5mult>:
 8009d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d74:	4615      	mov	r5, r2
 8009d76:	f012 0203 	ands.w	r2, r2, #3
 8009d7a:	4607      	mov	r7, r0
 8009d7c:	460e      	mov	r6, r1
 8009d7e:	d007      	beq.n	8009d90 <__pow5mult+0x20>
 8009d80:	4c25      	ldr	r4, [pc, #148]	@ (8009e18 <__pow5mult+0xa8>)
 8009d82:	3a01      	subs	r2, #1
 8009d84:	2300      	movs	r3, #0
 8009d86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d8a:	f7ff fea1 	bl	8009ad0 <__multadd>
 8009d8e:	4606      	mov	r6, r0
 8009d90:	10ad      	asrs	r5, r5, #2
 8009d92:	d03d      	beq.n	8009e10 <__pow5mult+0xa0>
 8009d94:	69fc      	ldr	r4, [r7, #28]
 8009d96:	b97c      	cbnz	r4, 8009db8 <__pow5mult+0x48>
 8009d98:	2010      	movs	r0, #16
 8009d9a:	f7ff fd81 	bl	80098a0 <malloc>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	61f8      	str	r0, [r7, #28]
 8009da2:	b928      	cbnz	r0, 8009db0 <__pow5mult+0x40>
 8009da4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009da8:	4b1c      	ldr	r3, [pc, #112]	@ (8009e1c <__pow5mult+0xac>)
 8009daa:	481d      	ldr	r0, [pc, #116]	@ (8009e20 <__pow5mult+0xb0>)
 8009dac:	f000 fa74 	bl	800a298 <__assert_func>
 8009db0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009db4:	6004      	str	r4, [r0, #0]
 8009db6:	60c4      	str	r4, [r0, #12]
 8009db8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009dbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009dc0:	b94c      	cbnz	r4, 8009dd6 <__pow5mult+0x66>
 8009dc2:	f240 2171 	movw	r1, #625	@ 0x271
 8009dc6:	4638      	mov	r0, r7
 8009dc8:	f7ff ff14 	bl	8009bf4 <__i2b>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	4604      	mov	r4, r0
 8009dd0:	f8c8 0008 	str.w	r0, [r8, #8]
 8009dd4:	6003      	str	r3, [r0, #0]
 8009dd6:	f04f 0900 	mov.w	r9, #0
 8009dda:	07eb      	lsls	r3, r5, #31
 8009ddc:	d50a      	bpl.n	8009df4 <__pow5mult+0x84>
 8009dde:	4631      	mov	r1, r6
 8009de0:	4622      	mov	r2, r4
 8009de2:	4638      	mov	r0, r7
 8009de4:	f7ff ff1c 	bl	8009c20 <__multiply>
 8009de8:	4680      	mov	r8, r0
 8009dea:	4631      	mov	r1, r6
 8009dec:	4638      	mov	r0, r7
 8009dee:	f7ff fe4d 	bl	8009a8c <_Bfree>
 8009df2:	4646      	mov	r6, r8
 8009df4:	106d      	asrs	r5, r5, #1
 8009df6:	d00b      	beq.n	8009e10 <__pow5mult+0xa0>
 8009df8:	6820      	ldr	r0, [r4, #0]
 8009dfa:	b938      	cbnz	r0, 8009e0c <__pow5mult+0x9c>
 8009dfc:	4622      	mov	r2, r4
 8009dfe:	4621      	mov	r1, r4
 8009e00:	4638      	mov	r0, r7
 8009e02:	f7ff ff0d 	bl	8009c20 <__multiply>
 8009e06:	6020      	str	r0, [r4, #0]
 8009e08:	f8c0 9000 	str.w	r9, [r0]
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	e7e4      	b.n	8009dda <__pow5mult+0x6a>
 8009e10:	4630      	mov	r0, r6
 8009e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e16:	bf00      	nop
 8009e18:	0800bb8c 	.word	0x0800bb8c
 8009e1c:	0800bab3 	.word	0x0800bab3
 8009e20:	0800bb33 	.word	0x0800bb33

08009e24 <__lshift>:
 8009e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e28:	460c      	mov	r4, r1
 8009e2a:	4607      	mov	r7, r0
 8009e2c:	4691      	mov	r9, r2
 8009e2e:	6923      	ldr	r3, [r4, #16]
 8009e30:	6849      	ldr	r1, [r1, #4]
 8009e32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e36:	68a3      	ldr	r3, [r4, #8]
 8009e38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e3c:	f108 0601 	add.w	r6, r8, #1
 8009e40:	42b3      	cmp	r3, r6
 8009e42:	db0b      	blt.n	8009e5c <__lshift+0x38>
 8009e44:	4638      	mov	r0, r7
 8009e46:	f7ff fde1 	bl	8009a0c <_Balloc>
 8009e4a:	4605      	mov	r5, r0
 8009e4c:	b948      	cbnz	r0, 8009e62 <__lshift+0x3e>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009e54:	4b27      	ldr	r3, [pc, #156]	@ (8009ef4 <__lshift+0xd0>)
 8009e56:	4828      	ldr	r0, [pc, #160]	@ (8009ef8 <__lshift+0xd4>)
 8009e58:	f000 fa1e 	bl	800a298 <__assert_func>
 8009e5c:	3101      	adds	r1, #1
 8009e5e:	005b      	lsls	r3, r3, #1
 8009e60:	e7ee      	b.n	8009e40 <__lshift+0x1c>
 8009e62:	2300      	movs	r3, #0
 8009e64:	f100 0114 	add.w	r1, r0, #20
 8009e68:	f100 0210 	add.w	r2, r0, #16
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	4553      	cmp	r3, sl
 8009e70:	db33      	blt.n	8009eda <__lshift+0xb6>
 8009e72:	6920      	ldr	r0, [r4, #16]
 8009e74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e78:	f104 0314 	add.w	r3, r4, #20
 8009e7c:	f019 091f 	ands.w	r9, r9, #31
 8009e80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e88:	d02b      	beq.n	8009ee2 <__lshift+0xbe>
 8009e8a:	468a      	mov	sl, r1
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f1c9 0e20 	rsb	lr, r9, #32
 8009e92:	6818      	ldr	r0, [r3, #0]
 8009e94:	fa00 f009 	lsl.w	r0, r0, r9
 8009e98:	4310      	orrs	r0, r2
 8009e9a:	f84a 0b04 	str.w	r0, [sl], #4
 8009e9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ea2:	459c      	cmp	ip, r3
 8009ea4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ea8:	d8f3      	bhi.n	8009e92 <__lshift+0x6e>
 8009eaa:	ebac 0304 	sub.w	r3, ip, r4
 8009eae:	3b15      	subs	r3, #21
 8009eb0:	f023 0303 	bic.w	r3, r3, #3
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	f104 0015 	add.w	r0, r4, #21
 8009eba:	4584      	cmp	ip, r0
 8009ebc:	bf38      	it	cc
 8009ebe:	2304      	movcc	r3, #4
 8009ec0:	50ca      	str	r2, [r1, r3]
 8009ec2:	b10a      	cbz	r2, 8009ec8 <__lshift+0xa4>
 8009ec4:	f108 0602 	add.w	r6, r8, #2
 8009ec8:	3e01      	subs	r6, #1
 8009eca:	4638      	mov	r0, r7
 8009ecc:	4621      	mov	r1, r4
 8009ece:	612e      	str	r6, [r5, #16]
 8009ed0:	f7ff fddc 	bl	8009a8c <_Bfree>
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eda:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ede:	3301      	adds	r3, #1
 8009ee0:	e7c5      	b.n	8009e6e <__lshift+0x4a>
 8009ee2:	3904      	subs	r1, #4
 8009ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ee8:	459c      	cmp	ip, r3
 8009eea:	f841 2f04 	str.w	r2, [r1, #4]!
 8009eee:	d8f9      	bhi.n	8009ee4 <__lshift+0xc0>
 8009ef0:	e7ea      	b.n	8009ec8 <__lshift+0xa4>
 8009ef2:	bf00      	nop
 8009ef4:	0800bb22 	.word	0x0800bb22
 8009ef8:	0800bb33 	.word	0x0800bb33

08009efc <__mcmp>:
 8009efc:	4603      	mov	r3, r0
 8009efe:	690a      	ldr	r2, [r1, #16]
 8009f00:	6900      	ldr	r0, [r0, #16]
 8009f02:	b530      	push	{r4, r5, lr}
 8009f04:	1a80      	subs	r0, r0, r2
 8009f06:	d10e      	bne.n	8009f26 <__mcmp+0x2a>
 8009f08:	3314      	adds	r3, #20
 8009f0a:	3114      	adds	r1, #20
 8009f0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009f10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009f14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009f18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009f1c:	4295      	cmp	r5, r2
 8009f1e:	d003      	beq.n	8009f28 <__mcmp+0x2c>
 8009f20:	d205      	bcs.n	8009f2e <__mcmp+0x32>
 8009f22:	f04f 30ff 	mov.w	r0, #4294967295
 8009f26:	bd30      	pop	{r4, r5, pc}
 8009f28:	42a3      	cmp	r3, r4
 8009f2a:	d3f3      	bcc.n	8009f14 <__mcmp+0x18>
 8009f2c:	e7fb      	b.n	8009f26 <__mcmp+0x2a>
 8009f2e:	2001      	movs	r0, #1
 8009f30:	e7f9      	b.n	8009f26 <__mcmp+0x2a>
	...

08009f34 <__mdiff>:
 8009f34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f38:	4689      	mov	r9, r1
 8009f3a:	4606      	mov	r6, r0
 8009f3c:	4611      	mov	r1, r2
 8009f3e:	4648      	mov	r0, r9
 8009f40:	4614      	mov	r4, r2
 8009f42:	f7ff ffdb 	bl	8009efc <__mcmp>
 8009f46:	1e05      	subs	r5, r0, #0
 8009f48:	d112      	bne.n	8009f70 <__mdiff+0x3c>
 8009f4a:	4629      	mov	r1, r5
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	f7ff fd5d 	bl	8009a0c <_Balloc>
 8009f52:	4602      	mov	r2, r0
 8009f54:	b928      	cbnz	r0, 8009f62 <__mdiff+0x2e>
 8009f56:	f240 2137 	movw	r1, #567	@ 0x237
 8009f5a:	4b3e      	ldr	r3, [pc, #248]	@ (800a054 <__mdiff+0x120>)
 8009f5c:	483e      	ldr	r0, [pc, #248]	@ (800a058 <__mdiff+0x124>)
 8009f5e:	f000 f99b 	bl	800a298 <__assert_func>
 8009f62:	2301      	movs	r3, #1
 8009f64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f68:	4610      	mov	r0, r2
 8009f6a:	b003      	add	sp, #12
 8009f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f70:	bfbc      	itt	lt
 8009f72:	464b      	movlt	r3, r9
 8009f74:	46a1      	movlt	r9, r4
 8009f76:	4630      	mov	r0, r6
 8009f78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009f7c:	bfba      	itte	lt
 8009f7e:	461c      	movlt	r4, r3
 8009f80:	2501      	movlt	r5, #1
 8009f82:	2500      	movge	r5, #0
 8009f84:	f7ff fd42 	bl	8009a0c <_Balloc>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	b918      	cbnz	r0, 8009f94 <__mdiff+0x60>
 8009f8c:	f240 2145 	movw	r1, #581	@ 0x245
 8009f90:	4b30      	ldr	r3, [pc, #192]	@ (800a054 <__mdiff+0x120>)
 8009f92:	e7e3      	b.n	8009f5c <__mdiff+0x28>
 8009f94:	f100 0b14 	add.w	fp, r0, #20
 8009f98:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009f9c:	f109 0310 	add.w	r3, r9, #16
 8009fa0:	60c5      	str	r5, [r0, #12]
 8009fa2:	f04f 0c00 	mov.w	ip, #0
 8009fa6:	f109 0514 	add.w	r5, r9, #20
 8009faa:	46d9      	mov	r9, fp
 8009fac:	6926      	ldr	r6, [r4, #16]
 8009fae:	f104 0e14 	add.w	lr, r4, #20
 8009fb2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009fb6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009fba:	9301      	str	r3, [sp, #4]
 8009fbc:	9b01      	ldr	r3, [sp, #4]
 8009fbe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009fc2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009fc6:	b281      	uxth	r1, r0
 8009fc8:	9301      	str	r3, [sp, #4]
 8009fca:	fa1f f38a 	uxth.w	r3, sl
 8009fce:	1a5b      	subs	r3, r3, r1
 8009fd0:	0c00      	lsrs	r0, r0, #16
 8009fd2:	4463      	add	r3, ip
 8009fd4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009fd8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009fe2:	4576      	cmp	r6, lr
 8009fe4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009fe8:	f849 3b04 	str.w	r3, [r9], #4
 8009fec:	d8e6      	bhi.n	8009fbc <__mdiff+0x88>
 8009fee:	1b33      	subs	r3, r6, r4
 8009ff0:	3b15      	subs	r3, #21
 8009ff2:	f023 0303 	bic.w	r3, r3, #3
 8009ff6:	3415      	adds	r4, #21
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	42a6      	cmp	r6, r4
 8009ffc:	bf38      	it	cc
 8009ffe:	2304      	movcc	r3, #4
 800a000:	441d      	add	r5, r3
 800a002:	445b      	add	r3, fp
 800a004:	461e      	mov	r6, r3
 800a006:	462c      	mov	r4, r5
 800a008:	4544      	cmp	r4, r8
 800a00a:	d30e      	bcc.n	800a02a <__mdiff+0xf6>
 800a00c:	f108 0103 	add.w	r1, r8, #3
 800a010:	1b49      	subs	r1, r1, r5
 800a012:	f021 0103 	bic.w	r1, r1, #3
 800a016:	3d03      	subs	r5, #3
 800a018:	45a8      	cmp	r8, r5
 800a01a:	bf38      	it	cc
 800a01c:	2100      	movcc	r1, #0
 800a01e:	440b      	add	r3, r1
 800a020:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a024:	b199      	cbz	r1, 800a04e <__mdiff+0x11a>
 800a026:	6117      	str	r7, [r2, #16]
 800a028:	e79e      	b.n	8009f68 <__mdiff+0x34>
 800a02a:	46e6      	mov	lr, ip
 800a02c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a030:	fa1f fc81 	uxth.w	ip, r1
 800a034:	44f4      	add	ip, lr
 800a036:	0c08      	lsrs	r0, r1, #16
 800a038:	4471      	add	r1, lr
 800a03a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a03e:	b289      	uxth	r1, r1
 800a040:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a044:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a048:	f846 1b04 	str.w	r1, [r6], #4
 800a04c:	e7dc      	b.n	800a008 <__mdiff+0xd4>
 800a04e:	3f01      	subs	r7, #1
 800a050:	e7e6      	b.n	800a020 <__mdiff+0xec>
 800a052:	bf00      	nop
 800a054:	0800bb22 	.word	0x0800bb22
 800a058:	0800bb33 	.word	0x0800bb33

0800a05c <__d2b>:
 800a05c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a060:	2101      	movs	r1, #1
 800a062:	4690      	mov	r8, r2
 800a064:	4699      	mov	r9, r3
 800a066:	9e08      	ldr	r6, [sp, #32]
 800a068:	f7ff fcd0 	bl	8009a0c <_Balloc>
 800a06c:	4604      	mov	r4, r0
 800a06e:	b930      	cbnz	r0, 800a07e <__d2b+0x22>
 800a070:	4602      	mov	r2, r0
 800a072:	f240 310f 	movw	r1, #783	@ 0x30f
 800a076:	4b23      	ldr	r3, [pc, #140]	@ (800a104 <__d2b+0xa8>)
 800a078:	4823      	ldr	r0, [pc, #140]	@ (800a108 <__d2b+0xac>)
 800a07a:	f000 f90d 	bl	800a298 <__assert_func>
 800a07e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a082:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a086:	b10d      	cbz	r5, 800a08c <__d2b+0x30>
 800a088:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a08c:	9301      	str	r3, [sp, #4]
 800a08e:	f1b8 0300 	subs.w	r3, r8, #0
 800a092:	d024      	beq.n	800a0de <__d2b+0x82>
 800a094:	4668      	mov	r0, sp
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	f7ff fd7f 	bl	8009b9a <__lo0bits>
 800a09c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a0a0:	b1d8      	cbz	r0, 800a0da <__d2b+0x7e>
 800a0a2:	f1c0 0320 	rsb	r3, r0, #32
 800a0a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0aa:	430b      	orrs	r3, r1
 800a0ac:	40c2      	lsrs	r2, r0
 800a0ae:	6163      	str	r3, [r4, #20]
 800a0b0:	9201      	str	r2, [sp, #4]
 800a0b2:	9b01      	ldr	r3, [sp, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	bf0c      	ite	eq
 800a0b8:	2201      	moveq	r2, #1
 800a0ba:	2202      	movne	r2, #2
 800a0bc:	61a3      	str	r3, [r4, #24]
 800a0be:	6122      	str	r2, [r4, #16]
 800a0c0:	b1ad      	cbz	r5, 800a0ee <__d2b+0x92>
 800a0c2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a0c6:	4405      	add	r5, r0
 800a0c8:	6035      	str	r5, [r6, #0]
 800a0ca:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a0ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0d0:	6018      	str	r0, [r3, #0]
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	b002      	add	sp, #8
 800a0d6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a0da:	6161      	str	r1, [r4, #20]
 800a0dc:	e7e9      	b.n	800a0b2 <__d2b+0x56>
 800a0de:	a801      	add	r0, sp, #4
 800a0e0:	f7ff fd5b 	bl	8009b9a <__lo0bits>
 800a0e4:	9b01      	ldr	r3, [sp, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	6163      	str	r3, [r4, #20]
 800a0ea:	3020      	adds	r0, #32
 800a0ec:	e7e7      	b.n	800a0be <__d2b+0x62>
 800a0ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a0f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0f6:	6030      	str	r0, [r6, #0]
 800a0f8:	6918      	ldr	r0, [r3, #16]
 800a0fa:	f7ff fd2f 	bl	8009b5c <__hi0bits>
 800a0fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a102:	e7e4      	b.n	800a0ce <__d2b+0x72>
 800a104:	0800bb22 	.word	0x0800bb22
 800a108:	0800bb33 	.word	0x0800bb33

0800a10c <__sflush_r>:
 800a10c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a112:	0716      	lsls	r6, r2, #28
 800a114:	4605      	mov	r5, r0
 800a116:	460c      	mov	r4, r1
 800a118:	d454      	bmi.n	800a1c4 <__sflush_r+0xb8>
 800a11a:	684b      	ldr	r3, [r1, #4]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	dc02      	bgt.n	800a126 <__sflush_r+0x1a>
 800a120:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a122:	2b00      	cmp	r3, #0
 800a124:	dd48      	ble.n	800a1b8 <__sflush_r+0xac>
 800a126:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a128:	2e00      	cmp	r6, #0
 800a12a:	d045      	beq.n	800a1b8 <__sflush_r+0xac>
 800a12c:	2300      	movs	r3, #0
 800a12e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a132:	682f      	ldr	r7, [r5, #0]
 800a134:	6a21      	ldr	r1, [r4, #32]
 800a136:	602b      	str	r3, [r5, #0]
 800a138:	d030      	beq.n	800a19c <__sflush_r+0x90>
 800a13a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a13c:	89a3      	ldrh	r3, [r4, #12]
 800a13e:	0759      	lsls	r1, r3, #29
 800a140:	d505      	bpl.n	800a14e <__sflush_r+0x42>
 800a142:	6863      	ldr	r3, [r4, #4]
 800a144:	1ad2      	subs	r2, r2, r3
 800a146:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a148:	b10b      	cbz	r3, 800a14e <__sflush_r+0x42>
 800a14a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a14c:	1ad2      	subs	r2, r2, r3
 800a14e:	2300      	movs	r3, #0
 800a150:	4628      	mov	r0, r5
 800a152:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a154:	6a21      	ldr	r1, [r4, #32]
 800a156:	47b0      	blx	r6
 800a158:	1c43      	adds	r3, r0, #1
 800a15a:	89a3      	ldrh	r3, [r4, #12]
 800a15c:	d106      	bne.n	800a16c <__sflush_r+0x60>
 800a15e:	6829      	ldr	r1, [r5, #0]
 800a160:	291d      	cmp	r1, #29
 800a162:	d82b      	bhi.n	800a1bc <__sflush_r+0xb0>
 800a164:	4a28      	ldr	r2, [pc, #160]	@ (800a208 <__sflush_r+0xfc>)
 800a166:	410a      	asrs	r2, r1
 800a168:	07d6      	lsls	r6, r2, #31
 800a16a:	d427      	bmi.n	800a1bc <__sflush_r+0xb0>
 800a16c:	2200      	movs	r2, #0
 800a16e:	6062      	str	r2, [r4, #4]
 800a170:	6922      	ldr	r2, [r4, #16]
 800a172:	04d9      	lsls	r1, r3, #19
 800a174:	6022      	str	r2, [r4, #0]
 800a176:	d504      	bpl.n	800a182 <__sflush_r+0x76>
 800a178:	1c42      	adds	r2, r0, #1
 800a17a:	d101      	bne.n	800a180 <__sflush_r+0x74>
 800a17c:	682b      	ldr	r3, [r5, #0]
 800a17e:	b903      	cbnz	r3, 800a182 <__sflush_r+0x76>
 800a180:	6560      	str	r0, [r4, #84]	@ 0x54
 800a182:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a184:	602f      	str	r7, [r5, #0]
 800a186:	b1b9      	cbz	r1, 800a1b8 <__sflush_r+0xac>
 800a188:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a18c:	4299      	cmp	r1, r3
 800a18e:	d002      	beq.n	800a196 <__sflush_r+0x8a>
 800a190:	4628      	mov	r0, r5
 800a192:	f7ff fb3d 	bl	8009810 <_free_r>
 800a196:	2300      	movs	r3, #0
 800a198:	6363      	str	r3, [r4, #52]	@ 0x34
 800a19a:	e00d      	b.n	800a1b8 <__sflush_r+0xac>
 800a19c:	2301      	movs	r3, #1
 800a19e:	4628      	mov	r0, r5
 800a1a0:	47b0      	blx	r6
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	1c50      	adds	r0, r2, #1
 800a1a6:	d1c9      	bne.n	800a13c <__sflush_r+0x30>
 800a1a8:	682b      	ldr	r3, [r5, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d0c6      	beq.n	800a13c <__sflush_r+0x30>
 800a1ae:	2b1d      	cmp	r3, #29
 800a1b0:	d001      	beq.n	800a1b6 <__sflush_r+0xaa>
 800a1b2:	2b16      	cmp	r3, #22
 800a1b4:	d11d      	bne.n	800a1f2 <__sflush_r+0xe6>
 800a1b6:	602f      	str	r7, [r5, #0]
 800a1b8:	2000      	movs	r0, #0
 800a1ba:	e021      	b.n	800a200 <__sflush_r+0xf4>
 800a1bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1c0:	b21b      	sxth	r3, r3
 800a1c2:	e01a      	b.n	800a1fa <__sflush_r+0xee>
 800a1c4:	690f      	ldr	r7, [r1, #16]
 800a1c6:	2f00      	cmp	r7, #0
 800a1c8:	d0f6      	beq.n	800a1b8 <__sflush_r+0xac>
 800a1ca:	0793      	lsls	r3, r2, #30
 800a1cc:	bf18      	it	ne
 800a1ce:	2300      	movne	r3, #0
 800a1d0:	680e      	ldr	r6, [r1, #0]
 800a1d2:	bf08      	it	eq
 800a1d4:	694b      	ldreq	r3, [r1, #20]
 800a1d6:	1bf6      	subs	r6, r6, r7
 800a1d8:	600f      	str	r7, [r1, #0]
 800a1da:	608b      	str	r3, [r1, #8]
 800a1dc:	2e00      	cmp	r6, #0
 800a1de:	ddeb      	ble.n	800a1b8 <__sflush_r+0xac>
 800a1e0:	4633      	mov	r3, r6
 800a1e2:	463a      	mov	r2, r7
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	6a21      	ldr	r1, [r4, #32]
 800a1e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a1ec:	47e0      	blx	ip
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	dc07      	bgt.n	800a202 <__sflush_r+0xf6>
 800a1f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a1fe:	81a3      	strh	r3, [r4, #12]
 800a200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a202:	4407      	add	r7, r0
 800a204:	1a36      	subs	r6, r6, r0
 800a206:	e7e9      	b.n	800a1dc <__sflush_r+0xd0>
 800a208:	dfbffffe 	.word	0xdfbffffe

0800a20c <_fflush_r>:
 800a20c:	b538      	push	{r3, r4, r5, lr}
 800a20e:	690b      	ldr	r3, [r1, #16]
 800a210:	4605      	mov	r5, r0
 800a212:	460c      	mov	r4, r1
 800a214:	b913      	cbnz	r3, 800a21c <_fflush_r+0x10>
 800a216:	2500      	movs	r5, #0
 800a218:	4628      	mov	r0, r5
 800a21a:	bd38      	pop	{r3, r4, r5, pc}
 800a21c:	b118      	cbz	r0, 800a226 <_fflush_r+0x1a>
 800a21e:	6a03      	ldr	r3, [r0, #32]
 800a220:	b90b      	cbnz	r3, 800a226 <_fflush_r+0x1a>
 800a222:	f7fe fb9b 	bl	800895c <__sinit>
 800a226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d0f3      	beq.n	800a216 <_fflush_r+0xa>
 800a22e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a230:	07d0      	lsls	r0, r2, #31
 800a232:	d404      	bmi.n	800a23e <_fflush_r+0x32>
 800a234:	0599      	lsls	r1, r3, #22
 800a236:	d402      	bmi.n	800a23e <_fflush_r+0x32>
 800a238:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a23a:	f7fe fc86 	bl	8008b4a <__retarget_lock_acquire_recursive>
 800a23e:	4628      	mov	r0, r5
 800a240:	4621      	mov	r1, r4
 800a242:	f7ff ff63 	bl	800a10c <__sflush_r>
 800a246:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a248:	4605      	mov	r5, r0
 800a24a:	07da      	lsls	r2, r3, #31
 800a24c:	d4e4      	bmi.n	800a218 <_fflush_r+0xc>
 800a24e:	89a3      	ldrh	r3, [r4, #12]
 800a250:	059b      	lsls	r3, r3, #22
 800a252:	d4e1      	bmi.n	800a218 <_fflush_r+0xc>
 800a254:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a256:	f7fe fc79 	bl	8008b4c <__retarget_lock_release_recursive>
 800a25a:	e7dd      	b.n	800a218 <_fflush_r+0xc>

0800a25c <_sbrk_r>:
 800a25c:	b538      	push	{r3, r4, r5, lr}
 800a25e:	2300      	movs	r3, #0
 800a260:	4d05      	ldr	r5, [pc, #20]	@ (800a278 <_sbrk_r+0x1c>)
 800a262:	4604      	mov	r4, r0
 800a264:	4608      	mov	r0, r1
 800a266:	602b      	str	r3, [r5, #0]
 800a268:	f7f9 f86e 	bl	8003348 <_sbrk>
 800a26c:	1c43      	adds	r3, r0, #1
 800a26e:	d102      	bne.n	800a276 <_sbrk_r+0x1a>
 800a270:	682b      	ldr	r3, [r5, #0]
 800a272:	b103      	cbz	r3, 800a276 <_sbrk_r+0x1a>
 800a274:	6023      	str	r3, [r4, #0]
 800a276:	bd38      	pop	{r3, r4, r5, pc}
 800a278:	200006ec 	.word	0x200006ec

0800a27c <memcpy>:
 800a27c:	440a      	add	r2, r1
 800a27e:	4291      	cmp	r1, r2
 800a280:	f100 33ff 	add.w	r3, r0, #4294967295
 800a284:	d100      	bne.n	800a288 <memcpy+0xc>
 800a286:	4770      	bx	lr
 800a288:	b510      	push	{r4, lr}
 800a28a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a28e:	4291      	cmp	r1, r2
 800a290:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a294:	d1f9      	bne.n	800a28a <memcpy+0xe>
 800a296:	bd10      	pop	{r4, pc}

0800a298 <__assert_func>:
 800a298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a29a:	4614      	mov	r4, r2
 800a29c:	461a      	mov	r2, r3
 800a29e:	4b09      	ldr	r3, [pc, #36]	@ (800a2c4 <__assert_func+0x2c>)
 800a2a0:	4605      	mov	r5, r0
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	68d8      	ldr	r0, [r3, #12]
 800a2a6:	b954      	cbnz	r4, 800a2be <__assert_func+0x26>
 800a2a8:	4b07      	ldr	r3, [pc, #28]	@ (800a2c8 <__assert_func+0x30>)
 800a2aa:	461c      	mov	r4, r3
 800a2ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2b0:	9100      	str	r1, [sp, #0]
 800a2b2:	462b      	mov	r3, r5
 800a2b4:	4905      	ldr	r1, [pc, #20]	@ (800a2cc <__assert_func+0x34>)
 800a2b6:	f000 f841 	bl	800a33c <fiprintf>
 800a2ba:	f000 f851 	bl	800a360 <abort>
 800a2be:	4b04      	ldr	r3, [pc, #16]	@ (800a2d0 <__assert_func+0x38>)
 800a2c0:	e7f4      	b.n	800a2ac <__assert_func+0x14>
 800a2c2:	bf00      	nop
 800a2c4:	20000064 	.word	0x20000064
 800a2c8:	0800bccd 	.word	0x0800bccd
 800a2cc:	0800bc9f 	.word	0x0800bc9f
 800a2d0:	0800bc92 	.word	0x0800bc92

0800a2d4 <_calloc_r>:
 800a2d4:	b570      	push	{r4, r5, r6, lr}
 800a2d6:	fba1 5402 	umull	r5, r4, r1, r2
 800a2da:	b93c      	cbnz	r4, 800a2ec <_calloc_r+0x18>
 800a2dc:	4629      	mov	r1, r5
 800a2de:	f7ff fb09 	bl	80098f4 <_malloc_r>
 800a2e2:	4606      	mov	r6, r0
 800a2e4:	b928      	cbnz	r0, 800a2f2 <_calloc_r+0x1e>
 800a2e6:	2600      	movs	r6, #0
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	bd70      	pop	{r4, r5, r6, pc}
 800a2ec:	220c      	movs	r2, #12
 800a2ee:	6002      	str	r2, [r0, #0]
 800a2f0:	e7f9      	b.n	800a2e6 <_calloc_r+0x12>
 800a2f2:	462a      	mov	r2, r5
 800a2f4:	4621      	mov	r1, r4
 800a2f6:	f7fe fbaa 	bl	8008a4e <memset>
 800a2fa:	e7f5      	b.n	800a2e8 <_calloc_r+0x14>

0800a2fc <__ascii_mbtowc>:
 800a2fc:	b082      	sub	sp, #8
 800a2fe:	b901      	cbnz	r1, 800a302 <__ascii_mbtowc+0x6>
 800a300:	a901      	add	r1, sp, #4
 800a302:	b142      	cbz	r2, 800a316 <__ascii_mbtowc+0x1a>
 800a304:	b14b      	cbz	r3, 800a31a <__ascii_mbtowc+0x1e>
 800a306:	7813      	ldrb	r3, [r2, #0]
 800a308:	600b      	str	r3, [r1, #0]
 800a30a:	7812      	ldrb	r2, [r2, #0]
 800a30c:	1e10      	subs	r0, r2, #0
 800a30e:	bf18      	it	ne
 800a310:	2001      	movne	r0, #1
 800a312:	b002      	add	sp, #8
 800a314:	4770      	bx	lr
 800a316:	4610      	mov	r0, r2
 800a318:	e7fb      	b.n	800a312 <__ascii_mbtowc+0x16>
 800a31a:	f06f 0001 	mvn.w	r0, #1
 800a31e:	e7f8      	b.n	800a312 <__ascii_mbtowc+0x16>

0800a320 <__ascii_wctomb>:
 800a320:	4603      	mov	r3, r0
 800a322:	4608      	mov	r0, r1
 800a324:	b141      	cbz	r1, 800a338 <__ascii_wctomb+0x18>
 800a326:	2aff      	cmp	r2, #255	@ 0xff
 800a328:	d904      	bls.n	800a334 <__ascii_wctomb+0x14>
 800a32a:	228a      	movs	r2, #138	@ 0x8a
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295
 800a330:	601a      	str	r2, [r3, #0]
 800a332:	4770      	bx	lr
 800a334:	2001      	movs	r0, #1
 800a336:	700a      	strb	r2, [r1, #0]
 800a338:	4770      	bx	lr
	...

0800a33c <fiprintf>:
 800a33c:	b40e      	push	{r1, r2, r3}
 800a33e:	b503      	push	{r0, r1, lr}
 800a340:	4601      	mov	r1, r0
 800a342:	ab03      	add	r3, sp, #12
 800a344:	4805      	ldr	r0, [pc, #20]	@ (800a35c <fiprintf+0x20>)
 800a346:	f853 2b04 	ldr.w	r2, [r3], #4
 800a34a:	6800      	ldr	r0, [r0, #0]
 800a34c:	9301      	str	r3, [sp, #4]
 800a34e:	f000 f835 	bl	800a3bc <_vfiprintf_r>
 800a352:	b002      	add	sp, #8
 800a354:	f85d eb04 	ldr.w	lr, [sp], #4
 800a358:	b003      	add	sp, #12
 800a35a:	4770      	bx	lr
 800a35c:	20000064 	.word	0x20000064

0800a360 <abort>:
 800a360:	2006      	movs	r0, #6
 800a362:	b508      	push	{r3, lr}
 800a364:	f000 f9fe 	bl	800a764 <raise>
 800a368:	2001      	movs	r0, #1
 800a36a:	f7f8 ff78 	bl	800325e <_exit>

0800a36e <__sfputc_r>:
 800a36e:	6893      	ldr	r3, [r2, #8]
 800a370:	b410      	push	{r4}
 800a372:	3b01      	subs	r3, #1
 800a374:	2b00      	cmp	r3, #0
 800a376:	6093      	str	r3, [r2, #8]
 800a378:	da07      	bge.n	800a38a <__sfputc_r+0x1c>
 800a37a:	6994      	ldr	r4, [r2, #24]
 800a37c:	42a3      	cmp	r3, r4
 800a37e:	db01      	blt.n	800a384 <__sfputc_r+0x16>
 800a380:	290a      	cmp	r1, #10
 800a382:	d102      	bne.n	800a38a <__sfputc_r+0x1c>
 800a384:	bc10      	pop	{r4}
 800a386:	f000 b931 	b.w	800a5ec <__swbuf_r>
 800a38a:	6813      	ldr	r3, [r2, #0]
 800a38c:	1c58      	adds	r0, r3, #1
 800a38e:	6010      	str	r0, [r2, #0]
 800a390:	7019      	strb	r1, [r3, #0]
 800a392:	4608      	mov	r0, r1
 800a394:	bc10      	pop	{r4}
 800a396:	4770      	bx	lr

0800a398 <__sfputs_r>:
 800a398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39a:	4606      	mov	r6, r0
 800a39c:	460f      	mov	r7, r1
 800a39e:	4614      	mov	r4, r2
 800a3a0:	18d5      	adds	r5, r2, r3
 800a3a2:	42ac      	cmp	r4, r5
 800a3a4:	d101      	bne.n	800a3aa <__sfputs_r+0x12>
 800a3a6:	2000      	movs	r0, #0
 800a3a8:	e007      	b.n	800a3ba <__sfputs_r+0x22>
 800a3aa:	463a      	mov	r2, r7
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3b2:	f7ff ffdc 	bl	800a36e <__sfputc_r>
 800a3b6:	1c43      	adds	r3, r0, #1
 800a3b8:	d1f3      	bne.n	800a3a2 <__sfputs_r+0xa>
 800a3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a3bc <_vfiprintf_r>:
 800a3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c0:	460d      	mov	r5, r1
 800a3c2:	4614      	mov	r4, r2
 800a3c4:	4698      	mov	r8, r3
 800a3c6:	4606      	mov	r6, r0
 800a3c8:	b09d      	sub	sp, #116	@ 0x74
 800a3ca:	b118      	cbz	r0, 800a3d4 <_vfiprintf_r+0x18>
 800a3cc:	6a03      	ldr	r3, [r0, #32]
 800a3ce:	b90b      	cbnz	r3, 800a3d4 <_vfiprintf_r+0x18>
 800a3d0:	f7fe fac4 	bl	800895c <__sinit>
 800a3d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3d6:	07d9      	lsls	r1, r3, #31
 800a3d8:	d405      	bmi.n	800a3e6 <_vfiprintf_r+0x2a>
 800a3da:	89ab      	ldrh	r3, [r5, #12]
 800a3dc:	059a      	lsls	r2, r3, #22
 800a3de:	d402      	bmi.n	800a3e6 <_vfiprintf_r+0x2a>
 800a3e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3e2:	f7fe fbb2 	bl	8008b4a <__retarget_lock_acquire_recursive>
 800a3e6:	89ab      	ldrh	r3, [r5, #12]
 800a3e8:	071b      	lsls	r3, r3, #28
 800a3ea:	d501      	bpl.n	800a3f0 <_vfiprintf_r+0x34>
 800a3ec:	692b      	ldr	r3, [r5, #16]
 800a3ee:	b99b      	cbnz	r3, 800a418 <_vfiprintf_r+0x5c>
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	f000 f938 	bl	800a668 <__swsetup_r>
 800a3f8:	b170      	cbz	r0, 800a418 <_vfiprintf_r+0x5c>
 800a3fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3fc:	07dc      	lsls	r4, r3, #31
 800a3fe:	d504      	bpl.n	800a40a <_vfiprintf_r+0x4e>
 800a400:	f04f 30ff 	mov.w	r0, #4294967295
 800a404:	b01d      	add	sp, #116	@ 0x74
 800a406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a40a:	89ab      	ldrh	r3, [r5, #12]
 800a40c:	0598      	lsls	r0, r3, #22
 800a40e:	d4f7      	bmi.n	800a400 <_vfiprintf_r+0x44>
 800a410:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a412:	f7fe fb9b 	bl	8008b4c <__retarget_lock_release_recursive>
 800a416:	e7f3      	b.n	800a400 <_vfiprintf_r+0x44>
 800a418:	2300      	movs	r3, #0
 800a41a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a41c:	2320      	movs	r3, #32
 800a41e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a422:	2330      	movs	r3, #48	@ 0x30
 800a424:	f04f 0901 	mov.w	r9, #1
 800a428:	f8cd 800c 	str.w	r8, [sp, #12]
 800a42c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a5d8 <_vfiprintf_r+0x21c>
 800a430:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a434:	4623      	mov	r3, r4
 800a436:	469a      	mov	sl, r3
 800a438:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a43c:	b10a      	cbz	r2, 800a442 <_vfiprintf_r+0x86>
 800a43e:	2a25      	cmp	r2, #37	@ 0x25
 800a440:	d1f9      	bne.n	800a436 <_vfiprintf_r+0x7a>
 800a442:	ebba 0b04 	subs.w	fp, sl, r4
 800a446:	d00b      	beq.n	800a460 <_vfiprintf_r+0xa4>
 800a448:	465b      	mov	r3, fp
 800a44a:	4622      	mov	r2, r4
 800a44c:	4629      	mov	r1, r5
 800a44e:	4630      	mov	r0, r6
 800a450:	f7ff ffa2 	bl	800a398 <__sfputs_r>
 800a454:	3001      	adds	r0, #1
 800a456:	f000 80a7 	beq.w	800a5a8 <_vfiprintf_r+0x1ec>
 800a45a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a45c:	445a      	add	r2, fp
 800a45e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a460:	f89a 3000 	ldrb.w	r3, [sl]
 800a464:	2b00      	cmp	r3, #0
 800a466:	f000 809f 	beq.w	800a5a8 <_vfiprintf_r+0x1ec>
 800a46a:	2300      	movs	r3, #0
 800a46c:	f04f 32ff 	mov.w	r2, #4294967295
 800a470:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a474:	f10a 0a01 	add.w	sl, sl, #1
 800a478:	9304      	str	r3, [sp, #16]
 800a47a:	9307      	str	r3, [sp, #28]
 800a47c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a480:	931a      	str	r3, [sp, #104]	@ 0x68
 800a482:	4654      	mov	r4, sl
 800a484:	2205      	movs	r2, #5
 800a486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a48a:	4853      	ldr	r0, [pc, #332]	@ (800a5d8 <_vfiprintf_r+0x21c>)
 800a48c:	f7fe fb5f 	bl	8008b4e <memchr>
 800a490:	9a04      	ldr	r2, [sp, #16]
 800a492:	b9d8      	cbnz	r0, 800a4cc <_vfiprintf_r+0x110>
 800a494:	06d1      	lsls	r1, r2, #27
 800a496:	bf44      	itt	mi
 800a498:	2320      	movmi	r3, #32
 800a49a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a49e:	0713      	lsls	r3, r2, #28
 800a4a0:	bf44      	itt	mi
 800a4a2:	232b      	movmi	r3, #43	@ 0x2b
 800a4a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a4ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4ae:	d015      	beq.n	800a4dc <_vfiprintf_r+0x120>
 800a4b0:	4654      	mov	r4, sl
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	f04f 0c0a 	mov.w	ip, #10
 800a4b8:	9a07      	ldr	r2, [sp, #28]
 800a4ba:	4621      	mov	r1, r4
 800a4bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4c0:	3b30      	subs	r3, #48	@ 0x30
 800a4c2:	2b09      	cmp	r3, #9
 800a4c4:	d94b      	bls.n	800a55e <_vfiprintf_r+0x1a2>
 800a4c6:	b1b0      	cbz	r0, 800a4f6 <_vfiprintf_r+0x13a>
 800a4c8:	9207      	str	r2, [sp, #28]
 800a4ca:	e014      	b.n	800a4f6 <_vfiprintf_r+0x13a>
 800a4cc:	eba0 0308 	sub.w	r3, r0, r8
 800a4d0:	fa09 f303 	lsl.w	r3, r9, r3
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	46a2      	mov	sl, r4
 800a4d8:	9304      	str	r3, [sp, #16]
 800a4da:	e7d2      	b.n	800a482 <_vfiprintf_r+0xc6>
 800a4dc:	9b03      	ldr	r3, [sp, #12]
 800a4de:	1d19      	adds	r1, r3, #4
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	9103      	str	r1, [sp, #12]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	bfbb      	ittet	lt
 800a4e8:	425b      	neglt	r3, r3
 800a4ea:	f042 0202 	orrlt.w	r2, r2, #2
 800a4ee:	9307      	strge	r3, [sp, #28]
 800a4f0:	9307      	strlt	r3, [sp, #28]
 800a4f2:	bfb8      	it	lt
 800a4f4:	9204      	strlt	r2, [sp, #16]
 800a4f6:	7823      	ldrb	r3, [r4, #0]
 800a4f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a4fa:	d10a      	bne.n	800a512 <_vfiprintf_r+0x156>
 800a4fc:	7863      	ldrb	r3, [r4, #1]
 800a4fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800a500:	d132      	bne.n	800a568 <_vfiprintf_r+0x1ac>
 800a502:	9b03      	ldr	r3, [sp, #12]
 800a504:	3402      	adds	r4, #2
 800a506:	1d1a      	adds	r2, r3, #4
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	9203      	str	r2, [sp, #12]
 800a50c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a510:	9305      	str	r3, [sp, #20]
 800a512:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a5dc <_vfiprintf_r+0x220>
 800a516:	2203      	movs	r2, #3
 800a518:	4650      	mov	r0, sl
 800a51a:	7821      	ldrb	r1, [r4, #0]
 800a51c:	f7fe fb17 	bl	8008b4e <memchr>
 800a520:	b138      	cbz	r0, 800a532 <_vfiprintf_r+0x176>
 800a522:	2240      	movs	r2, #64	@ 0x40
 800a524:	9b04      	ldr	r3, [sp, #16]
 800a526:	eba0 000a 	sub.w	r0, r0, sl
 800a52a:	4082      	lsls	r2, r0
 800a52c:	4313      	orrs	r3, r2
 800a52e:	3401      	adds	r4, #1
 800a530:	9304      	str	r3, [sp, #16]
 800a532:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a536:	2206      	movs	r2, #6
 800a538:	4829      	ldr	r0, [pc, #164]	@ (800a5e0 <_vfiprintf_r+0x224>)
 800a53a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a53e:	f7fe fb06 	bl	8008b4e <memchr>
 800a542:	2800      	cmp	r0, #0
 800a544:	d03f      	beq.n	800a5c6 <_vfiprintf_r+0x20a>
 800a546:	4b27      	ldr	r3, [pc, #156]	@ (800a5e4 <_vfiprintf_r+0x228>)
 800a548:	bb1b      	cbnz	r3, 800a592 <_vfiprintf_r+0x1d6>
 800a54a:	9b03      	ldr	r3, [sp, #12]
 800a54c:	3307      	adds	r3, #7
 800a54e:	f023 0307 	bic.w	r3, r3, #7
 800a552:	3308      	adds	r3, #8
 800a554:	9303      	str	r3, [sp, #12]
 800a556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a558:	443b      	add	r3, r7
 800a55a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a55c:	e76a      	b.n	800a434 <_vfiprintf_r+0x78>
 800a55e:	460c      	mov	r4, r1
 800a560:	2001      	movs	r0, #1
 800a562:	fb0c 3202 	mla	r2, ip, r2, r3
 800a566:	e7a8      	b.n	800a4ba <_vfiprintf_r+0xfe>
 800a568:	2300      	movs	r3, #0
 800a56a:	f04f 0c0a 	mov.w	ip, #10
 800a56e:	4619      	mov	r1, r3
 800a570:	3401      	adds	r4, #1
 800a572:	9305      	str	r3, [sp, #20]
 800a574:	4620      	mov	r0, r4
 800a576:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a57a:	3a30      	subs	r2, #48	@ 0x30
 800a57c:	2a09      	cmp	r2, #9
 800a57e:	d903      	bls.n	800a588 <_vfiprintf_r+0x1cc>
 800a580:	2b00      	cmp	r3, #0
 800a582:	d0c6      	beq.n	800a512 <_vfiprintf_r+0x156>
 800a584:	9105      	str	r1, [sp, #20]
 800a586:	e7c4      	b.n	800a512 <_vfiprintf_r+0x156>
 800a588:	4604      	mov	r4, r0
 800a58a:	2301      	movs	r3, #1
 800a58c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a590:	e7f0      	b.n	800a574 <_vfiprintf_r+0x1b8>
 800a592:	ab03      	add	r3, sp, #12
 800a594:	9300      	str	r3, [sp, #0]
 800a596:	462a      	mov	r2, r5
 800a598:	4630      	mov	r0, r6
 800a59a:	4b13      	ldr	r3, [pc, #76]	@ (800a5e8 <_vfiprintf_r+0x22c>)
 800a59c:	a904      	add	r1, sp, #16
 800a59e:	f7fd fd93 	bl	80080c8 <_printf_float>
 800a5a2:	4607      	mov	r7, r0
 800a5a4:	1c78      	adds	r0, r7, #1
 800a5a6:	d1d6      	bne.n	800a556 <_vfiprintf_r+0x19a>
 800a5a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5aa:	07d9      	lsls	r1, r3, #31
 800a5ac:	d405      	bmi.n	800a5ba <_vfiprintf_r+0x1fe>
 800a5ae:	89ab      	ldrh	r3, [r5, #12]
 800a5b0:	059a      	lsls	r2, r3, #22
 800a5b2:	d402      	bmi.n	800a5ba <_vfiprintf_r+0x1fe>
 800a5b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5b6:	f7fe fac9 	bl	8008b4c <__retarget_lock_release_recursive>
 800a5ba:	89ab      	ldrh	r3, [r5, #12]
 800a5bc:	065b      	lsls	r3, r3, #25
 800a5be:	f53f af1f 	bmi.w	800a400 <_vfiprintf_r+0x44>
 800a5c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5c4:	e71e      	b.n	800a404 <_vfiprintf_r+0x48>
 800a5c6:	ab03      	add	r3, sp, #12
 800a5c8:	9300      	str	r3, [sp, #0]
 800a5ca:	462a      	mov	r2, r5
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	4b06      	ldr	r3, [pc, #24]	@ (800a5e8 <_vfiprintf_r+0x22c>)
 800a5d0:	a904      	add	r1, sp, #16
 800a5d2:	f7fe f817 	bl	8008604 <_printf_i>
 800a5d6:	e7e4      	b.n	800a5a2 <_vfiprintf_r+0x1e6>
 800a5d8:	0800bdcf 	.word	0x0800bdcf
 800a5dc:	0800bdd5 	.word	0x0800bdd5
 800a5e0:	0800bdd9 	.word	0x0800bdd9
 800a5e4:	080080c9 	.word	0x080080c9
 800a5e8:	0800a399 	.word	0x0800a399

0800a5ec <__swbuf_r>:
 800a5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ee:	460e      	mov	r6, r1
 800a5f0:	4614      	mov	r4, r2
 800a5f2:	4605      	mov	r5, r0
 800a5f4:	b118      	cbz	r0, 800a5fe <__swbuf_r+0x12>
 800a5f6:	6a03      	ldr	r3, [r0, #32]
 800a5f8:	b90b      	cbnz	r3, 800a5fe <__swbuf_r+0x12>
 800a5fa:	f7fe f9af 	bl	800895c <__sinit>
 800a5fe:	69a3      	ldr	r3, [r4, #24]
 800a600:	60a3      	str	r3, [r4, #8]
 800a602:	89a3      	ldrh	r3, [r4, #12]
 800a604:	071a      	lsls	r2, r3, #28
 800a606:	d501      	bpl.n	800a60c <__swbuf_r+0x20>
 800a608:	6923      	ldr	r3, [r4, #16]
 800a60a:	b943      	cbnz	r3, 800a61e <__swbuf_r+0x32>
 800a60c:	4621      	mov	r1, r4
 800a60e:	4628      	mov	r0, r5
 800a610:	f000 f82a 	bl	800a668 <__swsetup_r>
 800a614:	b118      	cbz	r0, 800a61e <__swbuf_r+0x32>
 800a616:	f04f 37ff 	mov.w	r7, #4294967295
 800a61a:	4638      	mov	r0, r7
 800a61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a61e:	6823      	ldr	r3, [r4, #0]
 800a620:	6922      	ldr	r2, [r4, #16]
 800a622:	b2f6      	uxtb	r6, r6
 800a624:	1a98      	subs	r0, r3, r2
 800a626:	6963      	ldr	r3, [r4, #20]
 800a628:	4637      	mov	r7, r6
 800a62a:	4283      	cmp	r3, r0
 800a62c:	dc05      	bgt.n	800a63a <__swbuf_r+0x4e>
 800a62e:	4621      	mov	r1, r4
 800a630:	4628      	mov	r0, r5
 800a632:	f7ff fdeb 	bl	800a20c <_fflush_r>
 800a636:	2800      	cmp	r0, #0
 800a638:	d1ed      	bne.n	800a616 <__swbuf_r+0x2a>
 800a63a:	68a3      	ldr	r3, [r4, #8]
 800a63c:	3b01      	subs	r3, #1
 800a63e:	60a3      	str	r3, [r4, #8]
 800a640:	6823      	ldr	r3, [r4, #0]
 800a642:	1c5a      	adds	r2, r3, #1
 800a644:	6022      	str	r2, [r4, #0]
 800a646:	701e      	strb	r6, [r3, #0]
 800a648:	6962      	ldr	r2, [r4, #20]
 800a64a:	1c43      	adds	r3, r0, #1
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d004      	beq.n	800a65a <__swbuf_r+0x6e>
 800a650:	89a3      	ldrh	r3, [r4, #12]
 800a652:	07db      	lsls	r3, r3, #31
 800a654:	d5e1      	bpl.n	800a61a <__swbuf_r+0x2e>
 800a656:	2e0a      	cmp	r6, #10
 800a658:	d1df      	bne.n	800a61a <__swbuf_r+0x2e>
 800a65a:	4621      	mov	r1, r4
 800a65c:	4628      	mov	r0, r5
 800a65e:	f7ff fdd5 	bl	800a20c <_fflush_r>
 800a662:	2800      	cmp	r0, #0
 800a664:	d0d9      	beq.n	800a61a <__swbuf_r+0x2e>
 800a666:	e7d6      	b.n	800a616 <__swbuf_r+0x2a>

0800a668 <__swsetup_r>:
 800a668:	b538      	push	{r3, r4, r5, lr}
 800a66a:	4b29      	ldr	r3, [pc, #164]	@ (800a710 <__swsetup_r+0xa8>)
 800a66c:	4605      	mov	r5, r0
 800a66e:	6818      	ldr	r0, [r3, #0]
 800a670:	460c      	mov	r4, r1
 800a672:	b118      	cbz	r0, 800a67c <__swsetup_r+0x14>
 800a674:	6a03      	ldr	r3, [r0, #32]
 800a676:	b90b      	cbnz	r3, 800a67c <__swsetup_r+0x14>
 800a678:	f7fe f970 	bl	800895c <__sinit>
 800a67c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a680:	0719      	lsls	r1, r3, #28
 800a682:	d422      	bmi.n	800a6ca <__swsetup_r+0x62>
 800a684:	06da      	lsls	r2, r3, #27
 800a686:	d407      	bmi.n	800a698 <__swsetup_r+0x30>
 800a688:	2209      	movs	r2, #9
 800a68a:	602a      	str	r2, [r5, #0]
 800a68c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a690:	f04f 30ff 	mov.w	r0, #4294967295
 800a694:	81a3      	strh	r3, [r4, #12]
 800a696:	e033      	b.n	800a700 <__swsetup_r+0x98>
 800a698:	0758      	lsls	r0, r3, #29
 800a69a:	d512      	bpl.n	800a6c2 <__swsetup_r+0x5a>
 800a69c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a69e:	b141      	cbz	r1, 800a6b2 <__swsetup_r+0x4a>
 800a6a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6a4:	4299      	cmp	r1, r3
 800a6a6:	d002      	beq.n	800a6ae <__swsetup_r+0x46>
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	f7ff f8b1 	bl	8009810 <_free_r>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a6b2:	89a3      	ldrh	r3, [r4, #12]
 800a6b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a6b8:	81a3      	strh	r3, [r4, #12]
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	6063      	str	r3, [r4, #4]
 800a6be:	6923      	ldr	r3, [r4, #16]
 800a6c0:	6023      	str	r3, [r4, #0]
 800a6c2:	89a3      	ldrh	r3, [r4, #12]
 800a6c4:	f043 0308 	orr.w	r3, r3, #8
 800a6c8:	81a3      	strh	r3, [r4, #12]
 800a6ca:	6923      	ldr	r3, [r4, #16]
 800a6cc:	b94b      	cbnz	r3, 800a6e2 <__swsetup_r+0x7a>
 800a6ce:	89a3      	ldrh	r3, [r4, #12]
 800a6d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a6d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6d8:	d003      	beq.n	800a6e2 <__swsetup_r+0x7a>
 800a6da:	4621      	mov	r1, r4
 800a6dc:	4628      	mov	r0, r5
 800a6de:	f000 f882 	bl	800a7e6 <__smakebuf_r>
 800a6e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6e6:	f013 0201 	ands.w	r2, r3, #1
 800a6ea:	d00a      	beq.n	800a702 <__swsetup_r+0x9a>
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	60a2      	str	r2, [r4, #8]
 800a6f0:	6962      	ldr	r2, [r4, #20]
 800a6f2:	4252      	negs	r2, r2
 800a6f4:	61a2      	str	r2, [r4, #24]
 800a6f6:	6922      	ldr	r2, [r4, #16]
 800a6f8:	b942      	cbnz	r2, 800a70c <__swsetup_r+0xa4>
 800a6fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a6fe:	d1c5      	bne.n	800a68c <__swsetup_r+0x24>
 800a700:	bd38      	pop	{r3, r4, r5, pc}
 800a702:	0799      	lsls	r1, r3, #30
 800a704:	bf58      	it	pl
 800a706:	6962      	ldrpl	r2, [r4, #20]
 800a708:	60a2      	str	r2, [r4, #8]
 800a70a:	e7f4      	b.n	800a6f6 <__swsetup_r+0x8e>
 800a70c:	2000      	movs	r0, #0
 800a70e:	e7f7      	b.n	800a700 <__swsetup_r+0x98>
 800a710:	20000064 	.word	0x20000064

0800a714 <_raise_r>:
 800a714:	291f      	cmp	r1, #31
 800a716:	b538      	push	{r3, r4, r5, lr}
 800a718:	4605      	mov	r5, r0
 800a71a:	460c      	mov	r4, r1
 800a71c:	d904      	bls.n	800a728 <_raise_r+0x14>
 800a71e:	2316      	movs	r3, #22
 800a720:	6003      	str	r3, [r0, #0]
 800a722:	f04f 30ff 	mov.w	r0, #4294967295
 800a726:	bd38      	pop	{r3, r4, r5, pc}
 800a728:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a72a:	b112      	cbz	r2, 800a732 <_raise_r+0x1e>
 800a72c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a730:	b94b      	cbnz	r3, 800a746 <_raise_r+0x32>
 800a732:	4628      	mov	r0, r5
 800a734:	f000 f830 	bl	800a798 <_getpid_r>
 800a738:	4622      	mov	r2, r4
 800a73a:	4601      	mov	r1, r0
 800a73c:	4628      	mov	r0, r5
 800a73e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a742:	f000 b817 	b.w	800a774 <_kill_r>
 800a746:	2b01      	cmp	r3, #1
 800a748:	d00a      	beq.n	800a760 <_raise_r+0x4c>
 800a74a:	1c59      	adds	r1, r3, #1
 800a74c:	d103      	bne.n	800a756 <_raise_r+0x42>
 800a74e:	2316      	movs	r3, #22
 800a750:	6003      	str	r3, [r0, #0]
 800a752:	2001      	movs	r0, #1
 800a754:	e7e7      	b.n	800a726 <_raise_r+0x12>
 800a756:	2100      	movs	r1, #0
 800a758:	4620      	mov	r0, r4
 800a75a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a75e:	4798      	blx	r3
 800a760:	2000      	movs	r0, #0
 800a762:	e7e0      	b.n	800a726 <_raise_r+0x12>

0800a764 <raise>:
 800a764:	4b02      	ldr	r3, [pc, #8]	@ (800a770 <raise+0xc>)
 800a766:	4601      	mov	r1, r0
 800a768:	6818      	ldr	r0, [r3, #0]
 800a76a:	f7ff bfd3 	b.w	800a714 <_raise_r>
 800a76e:	bf00      	nop
 800a770:	20000064 	.word	0x20000064

0800a774 <_kill_r>:
 800a774:	b538      	push	{r3, r4, r5, lr}
 800a776:	2300      	movs	r3, #0
 800a778:	4d06      	ldr	r5, [pc, #24]	@ (800a794 <_kill_r+0x20>)
 800a77a:	4604      	mov	r4, r0
 800a77c:	4608      	mov	r0, r1
 800a77e:	4611      	mov	r1, r2
 800a780:	602b      	str	r3, [r5, #0]
 800a782:	f7f8 fd5c 	bl	800323e <_kill>
 800a786:	1c43      	adds	r3, r0, #1
 800a788:	d102      	bne.n	800a790 <_kill_r+0x1c>
 800a78a:	682b      	ldr	r3, [r5, #0]
 800a78c:	b103      	cbz	r3, 800a790 <_kill_r+0x1c>
 800a78e:	6023      	str	r3, [r4, #0]
 800a790:	bd38      	pop	{r3, r4, r5, pc}
 800a792:	bf00      	nop
 800a794:	200006ec 	.word	0x200006ec

0800a798 <_getpid_r>:
 800a798:	f7f8 bd4a 	b.w	8003230 <_getpid>

0800a79c <__swhatbuf_r>:
 800a79c:	b570      	push	{r4, r5, r6, lr}
 800a79e:	460c      	mov	r4, r1
 800a7a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7a4:	4615      	mov	r5, r2
 800a7a6:	2900      	cmp	r1, #0
 800a7a8:	461e      	mov	r6, r3
 800a7aa:	b096      	sub	sp, #88	@ 0x58
 800a7ac:	da0c      	bge.n	800a7c8 <__swhatbuf_r+0x2c>
 800a7ae:	89a3      	ldrh	r3, [r4, #12]
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a7b6:	bf14      	ite	ne
 800a7b8:	2340      	movne	r3, #64	@ 0x40
 800a7ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a7be:	2000      	movs	r0, #0
 800a7c0:	6031      	str	r1, [r6, #0]
 800a7c2:	602b      	str	r3, [r5, #0]
 800a7c4:	b016      	add	sp, #88	@ 0x58
 800a7c6:	bd70      	pop	{r4, r5, r6, pc}
 800a7c8:	466a      	mov	r2, sp
 800a7ca:	f000 f849 	bl	800a860 <_fstat_r>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	dbed      	blt.n	800a7ae <__swhatbuf_r+0x12>
 800a7d2:	9901      	ldr	r1, [sp, #4]
 800a7d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a7d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a7dc:	4259      	negs	r1, r3
 800a7de:	4159      	adcs	r1, r3
 800a7e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7e4:	e7eb      	b.n	800a7be <__swhatbuf_r+0x22>

0800a7e6 <__smakebuf_r>:
 800a7e6:	898b      	ldrh	r3, [r1, #12]
 800a7e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7ea:	079d      	lsls	r5, r3, #30
 800a7ec:	4606      	mov	r6, r0
 800a7ee:	460c      	mov	r4, r1
 800a7f0:	d507      	bpl.n	800a802 <__smakebuf_r+0x1c>
 800a7f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a7f6:	6023      	str	r3, [r4, #0]
 800a7f8:	6123      	str	r3, [r4, #16]
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	6163      	str	r3, [r4, #20]
 800a7fe:	b003      	add	sp, #12
 800a800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a802:	466a      	mov	r2, sp
 800a804:	ab01      	add	r3, sp, #4
 800a806:	f7ff ffc9 	bl	800a79c <__swhatbuf_r>
 800a80a:	9f00      	ldr	r7, [sp, #0]
 800a80c:	4605      	mov	r5, r0
 800a80e:	4639      	mov	r1, r7
 800a810:	4630      	mov	r0, r6
 800a812:	f7ff f86f 	bl	80098f4 <_malloc_r>
 800a816:	b948      	cbnz	r0, 800a82c <__smakebuf_r+0x46>
 800a818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a81c:	059a      	lsls	r2, r3, #22
 800a81e:	d4ee      	bmi.n	800a7fe <__smakebuf_r+0x18>
 800a820:	f023 0303 	bic.w	r3, r3, #3
 800a824:	f043 0302 	orr.w	r3, r3, #2
 800a828:	81a3      	strh	r3, [r4, #12]
 800a82a:	e7e2      	b.n	800a7f2 <__smakebuf_r+0xc>
 800a82c:	89a3      	ldrh	r3, [r4, #12]
 800a82e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a836:	81a3      	strh	r3, [r4, #12]
 800a838:	9b01      	ldr	r3, [sp, #4]
 800a83a:	6020      	str	r0, [r4, #0]
 800a83c:	b15b      	cbz	r3, 800a856 <__smakebuf_r+0x70>
 800a83e:	4630      	mov	r0, r6
 800a840:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a844:	f000 f81e 	bl	800a884 <_isatty_r>
 800a848:	b128      	cbz	r0, 800a856 <__smakebuf_r+0x70>
 800a84a:	89a3      	ldrh	r3, [r4, #12]
 800a84c:	f023 0303 	bic.w	r3, r3, #3
 800a850:	f043 0301 	orr.w	r3, r3, #1
 800a854:	81a3      	strh	r3, [r4, #12]
 800a856:	89a3      	ldrh	r3, [r4, #12]
 800a858:	431d      	orrs	r5, r3
 800a85a:	81a5      	strh	r5, [r4, #12]
 800a85c:	e7cf      	b.n	800a7fe <__smakebuf_r+0x18>
	...

0800a860 <_fstat_r>:
 800a860:	b538      	push	{r3, r4, r5, lr}
 800a862:	2300      	movs	r3, #0
 800a864:	4d06      	ldr	r5, [pc, #24]	@ (800a880 <_fstat_r+0x20>)
 800a866:	4604      	mov	r4, r0
 800a868:	4608      	mov	r0, r1
 800a86a:	4611      	mov	r1, r2
 800a86c:	602b      	str	r3, [r5, #0]
 800a86e:	f7f8 fd45 	bl	80032fc <_fstat>
 800a872:	1c43      	adds	r3, r0, #1
 800a874:	d102      	bne.n	800a87c <_fstat_r+0x1c>
 800a876:	682b      	ldr	r3, [r5, #0]
 800a878:	b103      	cbz	r3, 800a87c <_fstat_r+0x1c>
 800a87a:	6023      	str	r3, [r4, #0]
 800a87c:	bd38      	pop	{r3, r4, r5, pc}
 800a87e:	bf00      	nop
 800a880:	200006ec 	.word	0x200006ec

0800a884 <_isatty_r>:
 800a884:	b538      	push	{r3, r4, r5, lr}
 800a886:	2300      	movs	r3, #0
 800a888:	4d05      	ldr	r5, [pc, #20]	@ (800a8a0 <_isatty_r+0x1c>)
 800a88a:	4604      	mov	r4, r0
 800a88c:	4608      	mov	r0, r1
 800a88e:	602b      	str	r3, [r5, #0]
 800a890:	f7f8 fd43 	bl	800331a <_isatty>
 800a894:	1c43      	adds	r3, r0, #1
 800a896:	d102      	bne.n	800a89e <_isatty_r+0x1a>
 800a898:	682b      	ldr	r3, [r5, #0]
 800a89a:	b103      	cbz	r3, 800a89e <_isatty_r+0x1a>
 800a89c:	6023      	str	r3, [r4, #0]
 800a89e:	bd38      	pop	{r3, r4, r5, pc}
 800a8a0:	200006ec 	.word	0x200006ec

0800a8a4 <pow>:
 800a8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8a8:	4614      	mov	r4, r2
 800a8aa:	461d      	mov	r5, r3
 800a8ac:	4680      	mov	r8, r0
 800a8ae:	4689      	mov	r9, r1
 800a8b0:	f000 faf6 	bl	800aea0 <__ieee754_pow>
 800a8b4:	4622      	mov	r2, r4
 800a8b6:	4606      	mov	r6, r0
 800a8b8:	460f      	mov	r7, r1
 800a8ba:	462b      	mov	r3, r5
 800a8bc:	4620      	mov	r0, r4
 800a8be:	4629      	mov	r1, r5
 800a8c0:	f7f6 f910 	bl	8000ae4 <__aeabi_dcmpun>
 800a8c4:	bbc8      	cbnz	r0, 800a93a <pow+0x96>
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4640      	mov	r0, r8
 800a8cc:	4649      	mov	r1, r9
 800a8ce:	f7f6 f8d7 	bl	8000a80 <__aeabi_dcmpeq>
 800a8d2:	b1b8      	cbz	r0, 800a904 <pow+0x60>
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	4620      	mov	r0, r4
 800a8da:	4629      	mov	r1, r5
 800a8dc:	f7f6 f8d0 	bl	8000a80 <__aeabi_dcmpeq>
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	d141      	bne.n	800a968 <pow+0xc4>
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	f000 f9fe 	bl	800ace8 <finite>
 800a8ec:	b328      	cbz	r0, 800a93a <pow+0x96>
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	4629      	mov	r1, r5
 800a8f6:	f7f6 f8cd 	bl	8000a94 <__aeabi_dcmplt>
 800a8fa:	b1f0      	cbz	r0, 800a93a <pow+0x96>
 800a8fc:	f7fe f8fa 	bl	8008af4 <__errno>
 800a900:	2322      	movs	r3, #34	@ 0x22
 800a902:	e019      	b.n	800a938 <pow+0x94>
 800a904:	4630      	mov	r0, r6
 800a906:	4639      	mov	r1, r7
 800a908:	f000 f9ee 	bl	800ace8 <finite>
 800a90c:	b9c8      	cbnz	r0, 800a942 <pow+0x9e>
 800a90e:	4640      	mov	r0, r8
 800a910:	4649      	mov	r1, r9
 800a912:	f000 f9e9 	bl	800ace8 <finite>
 800a916:	b1a0      	cbz	r0, 800a942 <pow+0x9e>
 800a918:	4620      	mov	r0, r4
 800a91a:	4629      	mov	r1, r5
 800a91c:	f000 f9e4 	bl	800ace8 <finite>
 800a920:	b178      	cbz	r0, 800a942 <pow+0x9e>
 800a922:	4632      	mov	r2, r6
 800a924:	463b      	mov	r3, r7
 800a926:	4630      	mov	r0, r6
 800a928:	4639      	mov	r1, r7
 800a92a:	f7f6 f8db 	bl	8000ae4 <__aeabi_dcmpun>
 800a92e:	2800      	cmp	r0, #0
 800a930:	d0e4      	beq.n	800a8fc <pow+0x58>
 800a932:	f7fe f8df 	bl	8008af4 <__errno>
 800a936:	2321      	movs	r3, #33	@ 0x21
 800a938:	6003      	str	r3, [r0, #0]
 800a93a:	4630      	mov	r0, r6
 800a93c:	4639      	mov	r1, r7
 800a93e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a942:	2200      	movs	r2, #0
 800a944:	2300      	movs	r3, #0
 800a946:	4630      	mov	r0, r6
 800a948:	4639      	mov	r1, r7
 800a94a:	f7f6 f899 	bl	8000a80 <__aeabi_dcmpeq>
 800a94e:	2800      	cmp	r0, #0
 800a950:	d0f3      	beq.n	800a93a <pow+0x96>
 800a952:	4640      	mov	r0, r8
 800a954:	4649      	mov	r1, r9
 800a956:	f000 f9c7 	bl	800ace8 <finite>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d0ed      	beq.n	800a93a <pow+0x96>
 800a95e:	4620      	mov	r0, r4
 800a960:	4629      	mov	r1, r5
 800a962:	f000 f9c1 	bl	800ace8 <finite>
 800a966:	e7c8      	b.n	800a8fa <pow+0x56>
 800a968:	2600      	movs	r6, #0
 800a96a:	4f01      	ldr	r7, [pc, #4]	@ (800a970 <pow+0xcc>)
 800a96c:	e7e5      	b.n	800a93a <pow+0x96>
 800a96e:	bf00      	nop
 800a970:	3ff00000 	.word	0x3ff00000

0800a974 <sqrt>:
 800a974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a976:	4606      	mov	r6, r0
 800a978:	460f      	mov	r7, r1
 800a97a:	f000 f9bb 	bl	800acf4 <__ieee754_sqrt>
 800a97e:	4632      	mov	r2, r6
 800a980:	4604      	mov	r4, r0
 800a982:	460d      	mov	r5, r1
 800a984:	463b      	mov	r3, r7
 800a986:	4630      	mov	r0, r6
 800a988:	4639      	mov	r1, r7
 800a98a:	f7f6 f8ab 	bl	8000ae4 <__aeabi_dcmpun>
 800a98e:	b990      	cbnz	r0, 800a9b6 <sqrt+0x42>
 800a990:	2200      	movs	r2, #0
 800a992:	2300      	movs	r3, #0
 800a994:	4630      	mov	r0, r6
 800a996:	4639      	mov	r1, r7
 800a998:	f7f6 f87c 	bl	8000a94 <__aeabi_dcmplt>
 800a99c:	b158      	cbz	r0, 800a9b6 <sqrt+0x42>
 800a99e:	f7fe f8a9 	bl	8008af4 <__errno>
 800a9a2:	2321      	movs	r3, #33	@ 0x21
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	6003      	str	r3, [r0, #0]
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	4610      	mov	r0, r2
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	f7f5 ff29 	bl	8000804 <__aeabi_ddiv>
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	460d      	mov	r5, r1
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9bc:	0000      	movs	r0, r0
	...

0800a9c0 <atan>:
 800a9c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c4:	4bbc      	ldr	r3, [pc, #752]	@ (800acb8 <atan+0x2f8>)
 800a9c6:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800a9ca:	429e      	cmp	r6, r3
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	460d      	mov	r5, r1
 800a9d0:	468b      	mov	fp, r1
 800a9d2:	d918      	bls.n	800aa06 <atan+0x46>
 800a9d4:	4bb9      	ldr	r3, [pc, #740]	@ (800acbc <atan+0x2fc>)
 800a9d6:	429e      	cmp	r6, r3
 800a9d8:	d801      	bhi.n	800a9de <atan+0x1e>
 800a9da:	d109      	bne.n	800a9f0 <atan+0x30>
 800a9dc:	b140      	cbz	r0, 800a9f0 <atan+0x30>
 800a9de:	4622      	mov	r2, r4
 800a9e0:	462b      	mov	r3, r5
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	4629      	mov	r1, r5
 800a9e6:	f7f5 fc2d 	bl	8000244 <__adddf3>
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	460d      	mov	r5, r1
 800a9ee:	e006      	b.n	800a9fe <atan+0x3e>
 800a9f0:	f1bb 0f00 	cmp.w	fp, #0
 800a9f4:	f340 8123 	ble.w	800ac3e <atan+0x27e>
 800a9f8:	a593      	add	r5, pc, #588	@ (adr r5, 800ac48 <atan+0x288>)
 800a9fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a9fe:	4620      	mov	r0, r4
 800aa00:	4629      	mov	r1, r5
 800aa02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa06:	4bae      	ldr	r3, [pc, #696]	@ (800acc0 <atan+0x300>)
 800aa08:	429e      	cmp	r6, r3
 800aa0a:	d811      	bhi.n	800aa30 <atan+0x70>
 800aa0c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800aa10:	429e      	cmp	r6, r3
 800aa12:	d80a      	bhi.n	800aa2a <atan+0x6a>
 800aa14:	a38e      	add	r3, pc, #568	@ (adr r3, 800ac50 <atan+0x290>)
 800aa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1a:	f7f5 fc13 	bl	8000244 <__adddf3>
 800aa1e:	2200      	movs	r2, #0
 800aa20:	4ba8      	ldr	r3, [pc, #672]	@ (800acc4 <atan+0x304>)
 800aa22:	f7f6 f855 	bl	8000ad0 <__aeabi_dcmpgt>
 800aa26:	2800      	cmp	r0, #0
 800aa28:	d1e9      	bne.n	800a9fe <atan+0x3e>
 800aa2a:	f04f 3aff 	mov.w	sl, #4294967295
 800aa2e:	e027      	b.n	800aa80 <atan+0xc0>
 800aa30:	f000 f956 	bl	800ace0 <fabs>
 800aa34:	4ba4      	ldr	r3, [pc, #656]	@ (800acc8 <atan+0x308>)
 800aa36:	4604      	mov	r4, r0
 800aa38:	429e      	cmp	r6, r3
 800aa3a:	460d      	mov	r5, r1
 800aa3c:	f200 80b8 	bhi.w	800abb0 <atan+0x1f0>
 800aa40:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800aa44:	429e      	cmp	r6, r3
 800aa46:	f200 809c 	bhi.w	800ab82 <atan+0x1c2>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	f7f5 fbf9 	bl	8000244 <__adddf3>
 800aa52:	2200      	movs	r2, #0
 800aa54:	4b9b      	ldr	r3, [pc, #620]	@ (800acc4 <atan+0x304>)
 800aa56:	f7f5 fbf3 	bl	8000240 <__aeabi_dsub>
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	4606      	mov	r6, r0
 800aa5e:	460f      	mov	r7, r1
 800aa60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aa64:	4620      	mov	r0, r4
 800aa66:	4629      	mov	r1, r5
 800aa68:	f7f5 fbec 	bl	8000244 <__adddf3>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	460b      	mov	r3, r1
 800aa70:	4630      	mov	r0, r6
 800aa72:	4639      	mov	r1, r7
 800aa74:	f7f5 fec6 	bl	8000804 <__aeabi_ddiv>
 800aa78:	f04f 0a00 	mov.w	sl, #0
 800aa7c:	4604      	mov	r4, r0
 800aa7e:	460d      	mov	r5, r1
 800aa80:	4622      	mov	r2, r4
 800aa82:	462b      	mov	r3, r5
 800aa84:	4620      	mov	r0, r4
 800aa86:	4629      	mov	r1, r5
 800aa88:	f7f5 fd92 	bl	80005b0 <__aeabi_dmul>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	460b      	mov	r3, r1
 800aa90:	4680      	mov	r8, r0
 800aa92:	4689      	mov	r9, r1
 800aa94:	f7f5 fd8c 	bl	80005b0 <__aeabi_dmul>
 800aa98:	a36f      	add	r3, pc, #444	@ (adr r3, 800ac58 <atan+0x298>)
 800aa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9e:	4606      	mov	r6, r0
 800aaa0:	460f      	mov	r7, r1
 800aaa2:	f7f5 fd85 	bl	80005b0 <__aeabi_dmul>
 800aaa6:	a36e      	add	r3, pc, #440	@ (adr r3, 800ac60 <atan+0x2a0>)
 800aaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaac:	f7f5 fbca 	bl	8000244 <__adddf3>
 800aab0:	4632      	mov	r2, r6
 800aab2:	463b      	mov	r3, r7
 800aab4:	f7f5 fd7c 	bl	80005b0 <__aeabi_dmul>
 800aab8:	a36b      	add	r3, pc, #428	@ (adr r3, 800ac68 <atan+0x2a8>)
 800aaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabe:	f7f5 fbc1 	bl	8000244 <__adddf3>
 800aac2:	4632      	mov	r2, r6
 800aac4:	463b      	mov	r3, r7
 800aac6:	f7f5 fd73 	bl	80005b0 <__aeabi_dmul>
 800aaca:	a369      	add	r3, pc, #420	@ (adr r3, 800ac70 <atan+0x2b0>)
 800aacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad0:	f7f5 fbb8 	bl	8000244 <__adddf3>
 800aad4:	4632      	mov	r2, r6
 800aad6:	463b      	mov	r3, r7
 800aad8:	f7f5 fd6a 	bl	80005b0 <__aeabi_dmul>
 800aadc:	a366      	add	r3, pc, #408	@ (adr r3, 800ac78 <atan+0x2b8>)
 800aade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae2:	f7f5 fbaf 	bl	8000244 <__adddf3>
 800aae6:	4632      	mov	r2, r6
 800aae8:	463b      	mov	r3, r7
 800aaea:	f7f5 fd61 	bl	80005b0 <__aeabi_dmul>
 800aaee:	a364      	add	r3, pc, #400	@ (adr r3, 800ac80 <atan+0x2c0>)
 800aaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf4:	f7f5 fba6 	bl	8000244 <__adddf3>
 800aaf8:	4642      	mov	r2, r8
 800aafa:	464b      	mov	r3, r9
 800aafc:	f7f5 fd58 	bl	80005b0 <__aeabi_dmul>
 800ab00:	a361      	add	r3, pc, #388	@ (adr r3, 800ac88 <atan+0x2c8>)
 800ab02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab06:	4680      	mov	r8, r0
 800ab08:	4689      	mov	r9, r1
 800ab0a:	4630      	mov	r0, r6
 800ab0c:	4639      	mov	r1, r7
 800ab0e:	f7f5 fd4f 	bl	80005b0 <__aeabi_dmul>
 800ab12:	a35f      	add	r3, pc, #380	@ (adr r3, 800ac90 <atan+0x2d0>)
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	f7f5 fb92 	bl	8000240 <__aeabi_dsub>
 800ab1c:	4632      	mov	r2, r6
 800ab1e:	463b      	mov	r3, r7
 800ab20:	f7f5 fd46 	bl	80005b0 <__aeabi_dmul>
 800ab24:	a35c      	add	r3, pc, #368	@ (adr r3, 800ac98 <atan+0x2d8>)
 800ab26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2a:	f7f5 fb89 	bl	8000240 <__aeabi_dsub>
 800ab2e:	4632      	mov	r2, r6
 800ab30:	463b      	mov	r3, r7
 800ab32:	f7f5 fd3d 	bl	80005b0 <__aeabi_dmul>
 800ab36:	a35a      	add	r3, pc, #360	@ (adr r3, 800aca0 <atan+0x2e0>)
 800ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3c:	f7f5 fb80 	bl	8000240 <__aeabi_dsub>
 800ab40:	4632      	mov	r2, r6
 800ab42:	463b      	mov	r3, r7
 800ab44:	f7f5 fd34 	bl	80005b0 <__aeabi_dmul>
 800ab48:	a357      	add	r3, pc, #348	@ (adr r3, 800aca8 <atan+0x2e8>)
 800ab4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4e:	f7f5 fb77 	bl	8000240 <__aeabi_dsub>
 800ab52:	4632      	mov	r2, r6
 800ab54:	463b      	mov	r3, r7
 800ab56:	f7f5 fd2b 	bl	80005b0 <__aeabi_dmul>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	4640      	mov	r0, r8
 800ab60:	4649      	mov	r1, r9
 800ab62:	f7f5 fb6f 	bl	8000244 <__adddf3>
 800ab66:	4622      	mov	r2, r4
 800ab68:	462b      	mov	r3, r5
 800ab6a:	f7f5 fd21 	bl	80005b0 <__aeabi_dmul>
 800ab6e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ab72:	4602      	mov	r2, r0
 800ab74:	460b      	mov	r3, r1
 800ab76:	d144      	bne.n	800ac02 <atan+0x242>
 800ab78:	4620      	mov	r0, r4
 800ab7a:	4629      	mov	r1, r5
 800ab7c:	f7f5 fb60 	bl	8000240 <__aeabi_dsub>
 800ab80:	e733      	b.n	800a9ea <atan+0x2a>
 800ab82:	2200      	movs	r2, #0
 800ab84:	4b4f      	ldr	r3, [pc, #316]	@ (800acc4 <atan+0x304>)
 800ab86:	f7f5 fb5b 	bl	8000240 <__aeabi_dsub>
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	4606      	mov	r6, r0
 800ab8e:	460f      	mov	r7, r1
 800ab90:	4620      	mov	r0, r4
 800ab92:	4629      	mov	r1, r5
 800ab94:	4b4b      	ldr	r3, [pc, #300]	@ (800acc4 <atan+0x304>)
 800ab96:	f7f5 fb55 	bl	8000244 <__adddf3>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	4630      	mov	r0, r6
 800aba0:	4639      	mov	r1, r7
 800aba2:	f7f5 fe2f 	bl	8000804 <__aeabi_ddiv>
 800aba6:	f04f 0a01 	mov.w	sl, #1
 800abaa:	4604      	mov	r4, r0
 800abac:	460d      	mov	r5, r1
 800abae:	e767      	b.n	800aa80 <atan+0xc0>
 800abb0:	4b46      	ldr	r3, [pc, #280]	@ (800accc <atan+0x30c>)
 800abb2:	429e      	cmp	r6, r3
 800abb4:	d21a      	bcs.n	800abec <atan+0x22c>
 800abb6:	2200      	movs	r2, #0
 800abb8:	4b45      	ldr	r3, [pc, #276]	@ (800acd0 <atan+0x310>)
 800abba:	f7f5 fb41 	bl	8000240 <__aeabi_dsub>
 800abbe:	2200      	movs	r2, #0
 800abc0:	4606      	mov	r6, r0
 800abc2:	460f      	mov	r7, r1
 800abc4:	4620      	mov	r0, r4
 800abc6:	4629      	mov	r1, r5
 800abc8:	4b41      	ldr	r3, [pc, #260]	@ (800acd0 <atan+0x310>)
 800abca:	f7f5 fcf1 	bl	80005b0 <__aeabi_dmul>
 800abce:	2200      	movs	r2, #0
 800abd0:	4b3c      	ldr	r3, [pc, #240]	@ (800acc4 <atan+0x304>)
 800abd2:	f7f5 fb37 	bl	8000244 <__adddf3>
 800abd6:	4602      	mov	r2, r0
 800abd8:	460b      	mov	r3, r1
 800abda:	4630      	mov	r0, r6
 800abdc:	4639      	mov	r1, r7
 800abde:	f7f5 fe11 	bl	8000804 <__aeabi_ddiv>
 800abe2:	f04f 0a02 	mov.w	sl, #2
 800abe6:	4604      	mov	r4, r0
 800abe8:	460d      	mov	r5, r1
 800abea:	e749      	b.n	800aa80 <atan+0xc0>
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	2000      	movs	r0, #0
 800abf2:	4938      	ldr	r1, [pc, #224]	@ (800acd4 <atan+0x314>)
 800abf4:	f7f5 fe06 	bl	8000804 <__aeabi_ddiv>
 800abf8:	f04f 0a03 	mov.w	sl, #3
 800abfc:	4604      	mov	r4, r0
 800abfe:	460d      	mov	r5, r1
 800ac00:	e73e      	b.n	800aa80 <atan+0xc0>
 800ac02:	4b35      	ldr	r3, [pc, #212]	@ (800acd8 <atan+0x318>)
 800ac04:	4e35      	ldr	r6, [pc, #212]	@ (800acdc <atan+0x31c>)
 800ac06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ac0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0e:	f7f5 fb17 	bl	8000240 <__aeabi_dsub>
 800ac12:	4622      	mov	r2, r4
 800ac14:	462b      	mov	r3, r5
 800ac16:	f7f5 fb13 	bl	8000240 <__aeabi_dsub>
 800ac1a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ac1e:	4602      	mov	r2, r0
 800ac20:	460b      	mov	r3, r1
 800ac22:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ac26:	f7f5 fb0b 	bl	8000240 <__aeabi_dsub>
 800ac2a:	f1bb 0f00 	cmp.w	fp, #0
 800ac2e:	4604      	mov	r4, r0
 800ac30:	460d      	mov	r5, r1
 800ac32:	f6bf aee4 	bge.w	800a9fe <atan+0x3e>
 800ac36:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac3a:	461d      	mov	r5, r3
 800ac3c:	e6df      	b.n	800a9fe <atan+0x3e>
 800ac3e:	a51c      	add	r5, pc, #112	@ (adr r5, 800acb0 <atan+0x2f0>)
 800ac40:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ac44:	e6db      	b.n	800a9fe <atan+0x3e>
 800ac46:	bf00      	nop
 800ac48:	54442d18 	.word	0x54442d18
 800ac4c:	3ff921fb 	.word	0x3ff921fb
 800ac50:	8800759c 	.word	0x8800759c
 800ac54:	7e37e43c 	.word	0x7e37e43c
 800ac58:	e322da11 	.word	0xe322da11
 800ac5c:	3f90ad3a 	.word	0x3f90ad3a
 800ac60:	24760deb 	.word	0x24760deb
 800ac64:	3fa97b4b 	.word	0x3fa97b4b
 800ac68:	a0d03d51 	.word	0xa0d03d51
 800ac6c:	3fb10d66 	.word	0x3fb10d66
 800ac70:	c54c206e 	.word	0xc54c206e
 800ac74:	3fb745cd 	.word	0x3fb745cd
 800ac78:	920083ff 	.word	0x920083ff
 800ac7c:	3fc24924 	.word	0x3fc24924
 800ac80:	5555550d 	.word	0x5555550d
 800ac84:	3fd55555 	.word	0x3fd55555
 800ac88:	2c6a6c2f 	.word	0x2c6a6c2f
 800ac8c:	bfa2b444 	.word	0xbfa2b444
 800ac90:	52defd9a 	.word	0x52defd9a
 800ac94:	3fadde2d 	.word	0x3fadde2d
 800ac98:	af749a6d 	.word	0xaf749a6d
 800ac9c:	3fb3b0f2 	.word	0x3fb3b0f2
 800aca0:	fe231671 	.word	0xfe231671
 800aca4:	3fbc71c6 	.word	0x3fbc71c6
 800aca8:	9998ebc4 	.word	0x9998ebc4
 800acac:	3fc99999 	.word	0x3fc99999
 800acb0:	54442d18 	.word	0x54442d18
 800acb4:	bff921fb 	.word	0xbff921fb
 800acb8:	440fffff 	.word	0x440fffff
 800acbc:	7ff00000 	.word	0x7ff00000
 800acc0:	3fdbffff 	.word	0x3fdbffff
 800acc4:	3ff00000 	.word	0x3ff00000
 800acc8:	3ff2ffff 	.word	0x3ff2ffff
 800accc:	40038000 	.word	0x40038000
 800acd0:	3ff80000 	.word	0x3ff80000
 800acd4:	bff00000 	.word	0xbff00000
 800acd8:	0800bde0 	.word	0x0800bde0
 800acdc:	0800be00 	.word	0x0800be00

0800ace0 <fabs>:
 800ace0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ace4:	4619      	mov	r1, r3
 800ace6:	4770      	bx	lr

0800ace8 <finite>:
 800ace8:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800acec:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800acf0:	0fc0      	lsrs	r0, r0, #31
 800acf2:	4770      	bx	lr

0800acf4 <__ieee754_sqrt>:
 800acf4:	4a67      	ldr	r2, [pc, #412]	@ (800ae94 <__ieee754_sqrt+0x1a0>)
 800acf6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acfa:	438a      	bics	r2, r1
 800acfc:	4606      	mov	r6, r0
 800acfe:	460f      	mov	r7, r1
 800ad00:	460b      	mov	r3, r1
 800ad02:	4604      	mov	r4, r0
 800ad04:	d10e      	bne.n	800ad24 <__ieee754_sqrt+0x30>
 800ad06:	4602      	mov	r2, r0
 800ad08:	f7f5 fc52 	bl	80005b0 <__aeabi_dmul>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	460b      	mov	r3, r1
 800ad10:	4630      	mov	r0, r6
 800ad12:	4639      	mov	r1, r7
 800ad14:	f7f5 fa96 	bl	8000244 <__adddf3>
 800ad18:	4606      	mov	r6, r0
 800ad1a:	460f      	mov	r7, r1
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	4639      	mov	r1, r7
 800ad20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad24:	2900      	cmp	r1, #0
 800ad26:	dc0c      	bgt.n	800ad42 <__ieee754_sqrt+0x4e>
 800ad28:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800ad2c:	4302      	orrs	r2, r0
 800ad2e:	d0f5      	beq.n	800ad1c <__ieee754_sqrt+0x28>
 800ad30:	b189      	cbz	r1, 800ad56 <__ieee754_sqrt+0x62>
 800ad32:	4602      	mov	r2, r0
 800ad34:	f7f5 fa84 	bl	8000240 <__aeabi_dsub>
 800ad38:	4602      	mov	r2, r0
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	f7f5 fd62 	bl	8000804 <__aeabi_ddiv>
 800ad40:	e7ea      	b.n	800ad18 <__ieee754_sqrt+0x24>
 800ad42:	150a      	asrs	r2, r1, #20
 800ad44:	d115      	bne.n	800ad72 <__ieee754_sqrt+0x7e>
 800ad46:	2100      	movs	r1, #0
 800ad48:	e009      	b.n	800ad5e <__ieee754_sqrt+0x6a>
 800ad4a:	0ae3      	lsrs	r3, r4, #11
 800ad4c:	3a15      	subs	r2, #21
 800ad4e:	0564      	lsls	r4, r4, #21
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d0fa      	beq.n	800ad4a <__ieee754_sqrt+0x56>
 800ad54:	e7f7      	b.n	800ad46 <__ieee754_sqrt+0x52>
 800ad56:	460a      	mov	r2, r1
 800ad58:	e7fa      	b.n	800ad50 <__ieee754_sqrt+0x5c>
 800ad5a:	005b      	lsls	r3, r3, #1
 800ad5c:	3101      	adds	r1, #1
 800ad5e:	02d8      	lsls	r0, r3, #11
 800ad60:	d5fb      	bpl.n	800ad5a <__ieee754_sqrt+0x66>
 800ad62:	1e48      	subs	r0, r1, #1
 800ad64:	1a12      	subs	r2, r2, r0
 800ad66:	f1c1 0020 	rsb	r0, r1, #32
 800ad6a:	fa24 f000 	lsr.w	r0, r4, r0
 800ad6e:	4303      	orrs	r3, r0
 800ad70:	408c      	lsls	r4, r1
 800ad72:	2600      	movs	r6, #0
 800ad74:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800ad78:	2116      	movs	r1, #22
 800ad7a:	07d2      	lsls	r2, r2, #31
 800ad7c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800ad80:	4632      	mov	r2, r6
 800ad82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad8a:	bf5c      	itt	pl
 800ad8c:	005b      	lslpl	r3, r3, #1
 800ad8e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800ad92:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ad96:	bf58      	it	pl
 800ad98:	0064      	lslpl	r4, r4, #1
 800ad9a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ad9e:	107f      	asrs	r7, r7, #1
 800ada0:	0064      	lsls	r4, r4, #1
 800ada2:	1815      	adds	r5, r2, r0
 800ada4:	429d      	cmp	r5, r3
 800ada6:	bfde      	ittt	le
 800ada8:	182a      	addle	r2, r5, r0
 800adaa:	1b5b      	suble	r3, r3, r5
 800adac:	1836      	addle	r6, r6, r0
 800adae:	0fe5      	lsrs	r5, r4, #31
 800adb0:	3901      	subs	r1, #1
 800adb2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800adb6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800adba:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800adbe:	d1f0      	bne.n	800ada2 <__ieee754_sqrt+0xae>
 800adc0:	460d      	mov	r5, r1
 800adc2:	f04f 0a20 	mov.w	sl, #32
 800adc6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800adca:	429a      	cmp	r2, r3
 800adcc:	eb01 0c00 	add.w	ip, r1, r0
 800add0:	db02      	blt.n	800add8 <__ieee754_sqrt+0xe4>
 800add2:	d113      	bne.n	800adfc <__ieee754_sqrt+0x108>
 800add4:	45a4      	cmp	ip, r4
 800add6:	d811      	bhi.n	800adfc <__ieee754_sqrt+0x108>
 800add8:	f1bc 0f00 	cmp.w	ip, #0
 800addc:	eb0c 0100 	add.w	r1, ip, r0
 800ade0:	da42      	bge.n	800ae68 <__ieee754_sqrt+0x174>
 800ade2:	2900      	cmp	r1, #0
 800ade4:	db40      	blt.n	800ae68 <__ieee754_sqrt+0x174>
 800ade6:	f102 0e01 	add.w	lr, r2, #1
 800adea:	1a9b      	subs	r3, r3, r2
 800adec:	4672      	mov	r2, lr
 800adee:	45a4      	cmp	ip, r4
 800adf0:	bf88      	it	hi
 800adf2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800adf6:	eba4 040c 	sub.w	r4, r4, ip
 800adfa:	4405      	add	r5, r0
 800adfc:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800ae00:	f1ba 0a01 	subs.w	sl, sl, #1
 800ae04:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800ae08:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ae0c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800ae10:	d1db      	bne.n	800adca <__ieee754_sqrt+0xd6>
 800ae12:	431c      	orrs	r4, r3
 800ae14:	d01a      	beq.n	800ae4c <__ieee754_sqrt+0x158>
 800ae16:	4c20      	ldr	r4, [pc, #128]	@ (800ae98 <__ieee754_sqrt+0x1a4>)
 800ae18:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800ae9c <__ieee754_sqrt+0x1a8>
 800ae1c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ae20:	e9db 2300 	ldrd	r2, r3, [fp]
 800ae24:	f7f5 fa0c 	bl	8000240 <__aeabi_dsub>
 800ae28:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	460b      	mov	r3, r1
 800ae30:	4640      	mov	r0, r8
 800ae32:	4649      	mov	r1, r9
 800ae34:	f7f5 fe38 	bl	8000aa8 <__aeabi_dcmple>
 800ae38:	b140      	cbz	r0, 800ae4c <__ieee754_sqrt+0x158>
 800ae3a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ae3e:	e9db 2300 	ldrd	r2, r3, [fp]
 800ae42:	f1b5 3fff 	cmp.w	r5, #4294967295
 800ae46:	d111      	bne.n	800ae6c <__ieee754_sqrt+0x178>
 800ae48:	4655      	mov	r5, sl
 800ae4a:	3601      	adds	r6, #1
 800ae4c:	1072      	asrs	r2, r6, #1
 800ae4e:	086b      	lsrs	r3, r5, #1
 800ae50:	07f1      	lsls	r1, r6, #31
 800ae52:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ae56:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ae5a:	bf48      	it	mi
 800ae5c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ae60:	4618      	mov	r0, r3
 800ae62:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800ae66:	e757      	b.n	800ad18 <__ieee754_sqrt+0x24>
 800ae68:	4696      	mov	lr, r2
 800ae6a:	e7be      	b.n	800adea <__ieee754_sqrt+0xf6>
 800ae6c:	f7f5 f9ea 	bl	8000244 <__adddf3>
 800ae70:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ae74:	4602      	mov	r2, r0
 800ae76:	460b      	mov	r3, r1
 800ae78:	4640      	mov	r0, r8
 800ae7a:	4649      	mov	r1, r9
 800ae7c:	f7f5 fe0a 	bl	8000a94 <__aeabi_dcmplt>
 800ae80:	b120      	cbz	r0, 800ae8c <__ieee754_sqrt+0x198>
 800ae82:	1ca8      	adds	r0, r5, #2
 800ae84:	bf08      	it	eq
 800ae86:	3601      	addeq	r6, #1
 800ae88:	3502      	adds	r5, #2
 800ae8a:	e7df      	b.n	800ae4c <__ieee754_sqrt+0x158>
 800ae8c:	1c6b      	adds	r3, r5, #1
 800ae8e:	f023 0501 	bic.w	r5, r3, #1
 800ae92:	e7db      	b.n	800ae4c <__ieee754_sqrt+0x158>
 800ae94:	7ff00000 	.word	0x7ff00000
 800ae98:	20000228 	.word	0x20000228
 800ae9c:	20000220 	.word	0x20000220

0800aea0 <__ieee754_pow>:
 800aea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea4:	b091      	sub	sp, #68	@ 0x44
 800aea6:	e9cd 2300 	strd	r2, r3, [sp]
 800aeaa:	468b      	mov	fp, r1
 800aeac:	e9dd 1800 	ldrd	r1, r8, [sp]
 800aeb0:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800aeb4:	4682      	mov	sl, r0
 800aeb6:	ea57 0001 	orrs.w	r0, r7, r1
 800aeba:	d112      	bne.n	800aee2 <__ieee754_pow+0x42>
 800aebc:	4653      	mov	r3, sl
 800aebe:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800aec2:	18db      	adds	r3, r3, r3
 800aec4:	4152      	adcs	r2, r2
 800aec6:	4298      	cmp	r0, r3
 800aec8:	4b91      	ldr	r3, [pc, #580]	@ (800b110 <__ieee754_pow+0x270>)
 800aeca:	4193      	sbcs	r3, r2
 800aecc:	f080 84ce 	bcs.w	800b86c <__ieee754_pow+0x9cc>
 800aed0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aed4:	4650      	mov	r0, sl
 800aed6:	4659      	mov	r1, fp
 800aed8:	f7f5 f9b4 	bl	8000244 <__adddf3>
 800aedc:	b011      	add	sp, #68	@ 0x44
 800aede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aee2:	4b8c      	ldr	r3, [pc, #560]	@ (800b114 <__ieee754_pow+0x274>)
 800aee4:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800aee8:	429e      	cmp	r6, r3
 800aeea:	465d      	mov	r5, fp
 800aeec:	46d1      	mov	r9, sl
 800aeee:	d807      	bhi.n	800af00 <__ieee754_pow+0x60>
 800aef0:	d102      	bne.n	800aef8 <__ieee754_pow+0x58>
 800aef2:	f1ba 0f00 	cmp.w	sl, #0
 800aef6:	d1eb      	bne.n	800aed0 <__ieee754_pow+0x30>
 800aef8:	429f      	cmp	r7, r3
 800aefa:	d801      	bhi.n	800af00 <__ieee754_pow+0x60>
 800aefc:	d10f      	bne.n	800af1e <__ieee754_pow+0x7e>
 800aefe:	b171      	cbz	r1, 800af1e <__ieee754_pow+0x7e>
 800af00:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800af04:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800af08:	ea55 0509 	orrs.w	r5, r5, r9
 800af0c:	d1e0      	bne.n	800aed0 <__ieee754_pow+0x30>
 800af0e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800af12:	18db      	adds	r3, r3, r3
 800af14:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800af18:	4152      	adcs	r2, r2
 800af1a:	429d      	cmp	r5, r3
 800af1c:	e7d4      	b.n	800aec8 <__ieee754_pow+0x28>
 800af1e:	2d00      	cmp	r5, #0
 800af20:	4633      	mov	r3, r6
 800af22:	da39      	bge.n	800af98 <__ieee754_pow+0xf8>
 800af24:	4a7c      	ldr	r2, [pc, #496]	@ (800b118 <__ieee754_pow+0x278>)
 800af26:	4297      	cmp	r7, r2
 800af28:	d84e      	bhi.n	800afc8 <__ieee754_pow+0x128>
 800af2a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800af2e:	4297      	cmp	r7, r2
 800af30:	f240 84ab 	bls.w	800b88a <__ieee754_pow+0x9ea>
 800af34:	153a      	asrs	r2, r7, #20
 800af36:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800af3a:	2a14      	cmp	r2, #20
 800af3c:	dd0f      	ble.n	800af5e <__ieee754_pow+0xbe>
 800af3e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800af42:	fa21 f402 	lsr.w	r4, r1, r2
 800af46:	fa04 f202 	lsl.w	r2, r4, r2
 800af4a:	428a      	cmp	r2, r1
 800af4c:	f040 849d 	bne.w	800b88a <__ieee754_pow+0x9ea>
 800af50:	f004 0401 	and.w	r4, r4, #1
 800af54:	f1c4 0402 	rsb	r4, r4, #2
 800af58:	2900      	cmp	r1, #0
 800af5a:	d15a      	bne.n	800b012 <__ieee754_pow+0x172>
 800af5c:	e00e      	b.n	800af7c <__ieee754_pow+0xdc>
 800af5e:	2900      	cmp	r1, #0
 800af60:	d156      	bne.n	800b010 <__ieee754_pow+0x170>
 800af62:	f1c2 0214 	rsb	r2, r2, #20
 800af66:	fa47 f402 	asr.w	r4, r7, r2
 800af6a:	fa04 f202 	lsl.w	r2, r4, r2
 800af6e:	42ba      	cmp	r2, r7
 800af70:	f040 8488 	bne.w	800b884 <__ieee754_pow+0x9e4>
 800af74:	f004 0401 	and.w	r4, r4, #1
 800af78:	f1c4 0402 	rsb	r4, r4, #2
 800af7c:	4a67      	ldr	r2, [pc, #412]	@ (800b11c <__ieee754_pow+0x27c>)
 800af7e:	4297      	cmp	r7, r2
 800af80:	d130      	bne.n	800afe4 <__ieee754_pow+0x144>
 800af82:	f1b8 0f00 	cmp.w	r8, #0
 800af86:	f280 8479 	bge.w	800b87c <__ieee754_pow+0x9dc>
 800af8a:	4652      	mov	r2, sl
 800af8c:	465b      	mov	r3, fp
 800af8e:	2000      	movs	r0, #0
 800af90:	4962      	ldr	r1, [pc, #392]	@ (800b11c <__ieee754_pow+0x27c>)
 800af92:	f7f5 fc37 	bl	8000804 <__aeabi_ddiv>
 800af96:	e7a1      	b.n	800aedc <__ieee754_pow+0x3c>
 800af98:	2400      	movs	r4, #0
 800af9a:	2900      	cmp	r1, #0
 800af9c:	d139      	bne.n	800b012 <__ieee754_pow+0x172>
 800af9e:	4a5d      	ldr	r2, [pc, #372]	@ (800b114 <__ieee754_pow+0x274>)
 800afa0:	4297      	cmp	r7, r2
 800afa2:	d1eb      	bne.n	800af7c <__ieee754_pow+0xdc>
 800afa4:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800afa8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800afac:	ea53 0309 	orrs.w	r3, r3, r9
 800afb0:	f000 845c 	beq.w	800b86c <__ieee754_pow+0x9cc>
 800afb4:	4b5a      	ldr	r3, [pc, #360]	@ (800b120 <__ieee754_pow+0x280>)
 800afb6:	429e      	cmp	r6, r3
 800afb8:	d908      	bls.n	800afcc <__ieee754_pow+0x12c>
 800afba:	f1b8 0f00 	cmp.w	r8, #0
 800afbe:	f2c0 8459 	blt.w	800b874 <__ieee754_pow+0x9d4>
 800afc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afc6:	e789      	b.n	800aedc <__ieee754_pow+0x3c>
 800afc8:	2402      	movs	r4, #2
 800afca:	e7e6      	b.n	800af9a <__ieee754_pow+0xfa>
 800afcc:	f1b8 0f00 	cmp.w	r8, #0
 800afd0:	f04f 0000 	mov.w	r0, #0
 800afd4:	f04f 0100 	mov.w	r1, #0
 800afd8:	da80      	bge.n	800aedc <__ieee754_pow+0x3c>
 800afda:	e9dd 0300 	ldrd	r0, r3, [sp]
 800afde:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800afe2:	e77b      	b.n	800aedc <__ieee754_pow+0x3c>
 800afe4:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800afe8:	d106      	bne.n	800aff8 <__ieee754_pow+0x158>
 800afea:	4652      	mov	r2, sl
 800afec:	465b      	mov	r3, fp
 800afee:	4650      	mov	r0, sl
 800aff0:	4659      	mov	r1, fp
 800aff2:	f7f5 fadd 	bl	80005b0 <__aeabi_dmul>
 800aff6:	e771      	b.n	800aedc <__ieee754_pow+0x3c>
 800aff8:	4a4a      	ldr	r2, [pc, #296]	@ (800b124 <__ieee754_pow+0x284>)
 800affa:	4590      	cmp	r8, r2
 800affc:	d109      	bne.n	800b012 <__ieee754_pow+0x172>
 800affe:	2d00      	cmp	r5, #0
 800b000:	db07      	blt.n	800b012 <__ieee754_pow+0x172>
 800b002:	4650      	mov	r0, sl
 800b004:	4659      	mov	r1, fp
 800b006:	b011      	add	sp, #68	@ 0x44
 800b008:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b00c:	f7ff be72 	b.w	800acf4 <__ieee754_sqrt>
 800b010:	2400      	movs	r4, #0
 800b012:	4650      	mov	r0, sl
 800b014:	4659      	mov	r1, fp
 800b016:	9302      	str	r3, [sp, #8]
 800b018:	f7ff fe62 	bl	800ace0 <fabs>
 800b01c:	9b02      	ldr	r3, [sp, #8]
 800b01e:	f1b9 0f00 	cmp.w	r9, #0
 800b022:	d127      	bne.n	800b074 <__ieee754_pow+0x1d4>
 800b024:	4a3d      	ldr	r2, [pc, #244]	@ (800b11c <__ieee754_pow+0x27c>)
 800b026:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800b02a:	4594      	cmp	ip, r2
 800b02c:	d000      	beq.n	800b030 <__ieee754_pow+0x190>
 800b02e:	bb0e      	cbnz	r6, 800b074 <__ieee754_pow+0x1d4>
 800b030:	f1b8 0f00 	cmp.w	r8, #0
 800b034:	da05      	bge.n	800b042 <__ieee754_pow+0x1a2>
 800b036:	4602      	mov	r2, r0
 800b038:	460b      	mov	r3, r1
 800b03a:	2000      	movs	r0, #0
 800b03c:	4937      	ldr	r1, [pc, #220]	@ (800b11c <__ieee754_pow+0x27c>)
 800b03e:	f7f5 fbe1 	bl	8000804 <__aeabi_ddiv>
 800b042:	2d00      	cmp	r5, #0
 800b044:	f6bf af4a 	bge.w	800aedc <__ieee754_pow+0x3c>
 800b048:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800b04c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800b050:	4326      	orrs	r6, r4
 800b052:	d108      	bne.n	800b066 <__ieee754_pow+0x1c6>
 800b054:	4602      	mov	r2, r0
 800b056:	460b      	mov	r3, r1
 800b058:	4610      	mov	r0, r2
 800b05a:	4619      	mov	r1, r3
 800b05c:	f7f5 f8f0 	bl	8000240 <__aeabi_dsub>
 800b060:	4602      	mov	r2, r0
 800b062:	460b      	mov	r3, r1
 800b064:	e795      	b.n	800af92 <__ieee754_pow+0xf2>
 800b066:	2c01      	cmp	r4, #1
 800b068:	f47f af38 	bne.w	800aedc <__ieee754_pow+0x3c>
 800b06c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b070:	4619      	mov	r1, r3
 800b072:	e733      	b.n	800aedc <__ieee754_pow+0x3c>
 800b074:	0fea      	lsrs	r2, r5, #31
 800b076:	3a01      	subs	r2, #1
 800b078:	ea52 0c04 	orrs.w	ip, r2, r4
 800b07c:	d102      	bne.n	800b084 <__ieee754_pow+0x1e4>
 800b07e:	4652      	mov	r2, sl
 800b080:	465b      	mov	r3, fp
 800b082:	e7e9      	b.n	800b058 <__ieee754_pow+0x1b8>
 800b084:	f04f 0900 	mov.w	r9, #0
 800b088:	3c01      	subs	r4, #1
 800b08a:	4314      	orrs	r4, r2
 800b08c:	bf14      	ite	ne
 800b08e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800b11c <__ieee754_pow+0x27c>
 800b092:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800b128 <__ieee754_pow+0x288>
 800b096:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800b09a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800b09e:	f240 8107 	bls.w	800b2b0 <__ieee754_pow+0x410>
 800b0a2:	4b22      	ldr	r3, [pc, #136]	@ (800b12c <__ieee754_pow+0x28c>)
 800b0a4:	429f      	cmp	r7, r3
 800b0a6:	4b1e      	ldr	r3, [pc, #120]	@ (800b120 <__ieee754_pow+0x280>)
 800b0a8:	d913      	bls.n	800b0d2 <__ieee754_pow+0x232>
 800b0aa:	429e      	cmp	r6, r3
 800b0ac:	d808      	bhi.n	800b0c0 <__ieee754_pow+0x220>
 800b0ae:	f1b8 0f00 	cmp.w	r8, #0
 800b0b2:	da08      	bge.n	800b0c6 <__ieee754_pow+0x226>
 800b0b4:	2000      	movs	r0, #0
 800b0b6:	b011      	add	sp, #68	@ 0x44
 800b0b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0bc:	f000 bcb0 	b.w	800ba20 <__math_oflow>
 800b0c0:	f1b8 0f00 	cmp.w	r8, #0
 800b0c4:	dcf6      	bgt.n	800b0b4 <__ieee754_pow+0x214>
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	b011      	add	sp, #68	@ 0x44
 800b0ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ce:	f000 bca2 	b.w	800ba16 <__math_uflow>
 800b0d2:	429e      	cmp	r6, r3
 800b0d4:	d20c      	bcs.n	800b0f0 <__ieee754_pow+0x250>
 800b0d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	2300      	movs	r3, #0
 800b0de:	f7f5 fcd9 	bl	8000a94 <__aeabi_dcmplt>
 800b0e2:	3800      	subs	r0, #0
 800b0e4:	bf18      	it	ne
 800b0e6:	2001      	movne	r0, #1
 800b0e8:	f1b8 0f00 	cmp.w	r8, #0
 800b0ec:	daec      	bge.n	800b0c8 <__ieee754_pow+0x228>
 800b0ee:	e7e2      	b.n	800b0b6 <__ieee754_pow+0x216>
 800b0f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b11c <__ieee754_pow+0x27c>)
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	429e      	cmp	r6, r3
 800b0f6:	d91b      	bls.n	800b130 <__ieee754_pow+0x290>
 800b0f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	f7f5 fcc9 	bl	8000a94 <__aeabi_dcmplt>
 800b102:	3800      	subs	r0, #0
 800b104:	bf18      	it	ne
 800b106:	2001      	movne	r0, #1
 800b108:	f1b8 0f00 	cmp.w	r8, #0
 800b10c:	dcd3      	bgt.n	800b0b6 <__ieee754_pow+0x216>
 800b10e:	e7db      	b.n	800b0c8 <__ieee754_pow+0x228>
 800b110:	fff00000 	.word	0xfff00000
 800b114:	7ff00000 	.word	0x7ff00000
 800b118:	433fffff 	.word	0x433fffff
 800b11c:	3ff00000 	.word	0x3ff00000
 800b120:	3fefffff 	.word	0x3fefffff
 800b124:	3fe00000 	.word	0x3fe00000
 800b128:	bff00000 	.word	0xbff00000
 800b12c:	43f00000 	.word	0x43f00000
 800b130:	4b5b      	ldr	r3, [pc, #364]	@ (800b2a0 <__ieee754_pow+0x400>)
 800b132:	f7f5 f885 	bl	8000240 <__aeabi_dsub>
 800b136:	a352      	add	r3, pc, #328	@ (adr r3, 800b280 <__ieee754_pow+0x3e0>)
 800b138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13c:	4604      	mov	r4, r0
 800b13e:	460d      	mov	r5, r1
 800b140:	f7f5 fa36 	bl	80005b0 <__aeabi_dmul>
 800b144:	a350      	add	r3, pc, #320	@ (adr r3, 800b288 <__ieee754_pow+0x3e8>)
 800b146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14a:	4606      	mov	r6, r0
 800b14c:	460f      	mov	r7, r1
 800b14e:	4620      	mov	r0, r4
 800b150:	4629      	mov	r1, r5
 800b152:	f7f5 fa2d 	bl	80005b0 <__aeabi_dmul>
 800b156:	2200      	movs	r2, #0
 800b158:	4682      	mov	sl, r0
 800b15a:	468b      	mov	fp, r1
 800b15c:	4620      	mov	r0, r4
 800b15e:	4629      	mov	r1, r5
 800b160:	4b50      	ldr	r3, [pc, #320]	@ (800b2a4 <__ieee754_pow+0x404>)
 800b162:	f7f5 fa25 	bl	80005b0 <__aeabi_dmul>
 800b166:	4602      	mov	r2, r0
 800b168:	460b      	mov	r3, r1
 800b16a:	a149      	add	r1, pc, #292	@ (adr r1, 800b290 <__ieee754_pow+0x3f0>)
 800b16c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b170:	f7f5 f866 	bl	8000240 <__aeabi_dsub>
 800b174:	4622      	mov	r2, r4
 800b176:	462b      	mov	r3, r5
 800b178:	f7f5 fa1a 	bl	80005b0 <__aeabi_dmul>
 800b17c:	4602      	mov	r2, r0
 800b17e:	460b      	mov	r3, r1
 800b180:	2000      	movs	r0, #0
 800b182:	4949      	ldr	r1, [pc, #292]	@ (800b2a8 <__ieee754_pow+0x408>)
 800b184:	f7f5 f85c 	bl	8000240 <__aeabi_dsub>
 800b188:	4622      	mov	r2, r4
 800b18a:	4680      	mov	r8, r0
 800b18c:	4689      	mov	r9, r1
 800b18e:	462b      	mov	r3, r5
 800b190:	4620      	mov	r0, r4
 800b192:	4629      	mov	r1, r5
 800b194:	f7f5 fa0c 	bl	80005b0 <__aeabi_dmul>
 800b198:	4602      	mov	r2, r0
 800b19a:	460b      	mov	r3, r1
 800b19c:	4640      	mov	r0, r8
 800b19e:	4649      	mov	r1, r9
 800b1a0:	f7f5 fa06 	bl	80005b0 <__aeabi_dmul>
 800b1a4:	a33c      	add	r3, pc, #240	@ (adr r3, 800b298 <__ieee754_pow+0x3f8>)
 800b1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1aa:	f7f5 fa01 	bl	80005b0 <__aeabi_dmul>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	4650      	mov	r0, sl
 800b1b4:	4659      	mov	r1, fp
 800b1b6:	f7f5 f843 	bl	8000240 <__aeabi_dsub>
 800b1ba:	2400      	movs	r4, #0
 800b1bc:	4602      	mov	r2, r0
 800b1be:	460b      	mov	r3, r1
 800b1c0:	4680      	mov	r8, r0
 800b1c2:	4689      	mov	r9, r1
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	4639      	mov	r1, r7
 800b1c8:	f7f5 f83c 	bl	8000244 <__adddf3>
 800b1cc:	4632      	mov	r2, r6
 800b1ce:	463b      	mov	r3, r7
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	460d      	mov	r5, r1
 800b1d4:	f7f5 f834 	bl	8000240 <__aeabi_dsub>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	460b      	mov	r3, r1
 800b1dc:	4640      	mov	r0, r8
 800b1de:	4649      	mov	r1, r9
 800b1e0:	f7f5 f82e 	bl	8000240 <__aeabi_dsub>
 800b1e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	9304      	str	r3, [sp, #16]
 800b1f0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b1f4:	4606      	mov	r6, r0
 800b1f6:	460f      	mov	r7, r1
 800b1f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1fc:	4652      	mov	r2, sl
 800b1fe:	465b      	mov	r3, fp
 800b200:	f7f5 f81e 	bl	8000240 <__aeabi_dsub>
 800b204:	4622      	mov	r2, r4
 800b206:	462b      	mov	r3, r5
 800b208:	f7f5 f9d2 	bl	80005b0 <__aeabi_dmul>
 800b20c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b210:	4680      	mov	r8, r0
 800b212:	4689      	mov	r9, r1
 800b214:	4630      	mov	r0, r6
 800b216:	4639      	mov	r1, r7
 800b218:	f7f5 f9ca 	bl	80005b0 <__aeabi_dmul>
 800b21c:	4602      	mov	r2, r0
 800b21e:	460b      	mov	r3, r1
 800b220:	4640      	mov	r0, r8
 800b222:	4649      	mov	r1, r9
 800b224:	f7f5 f80e 	bl	8000244 <__adddf3>
 800b228:	4652      	mov	r2, sl
 800b22a:	465b      	mov	r3, fp
 800b22c:	4606      	mov	r6, r0
 800b22e:	460f      	mov	r7, r1
 800b230:	4620      	mov	r0, r4
 800b232:	4629      	mov	r1, r5
 800b234:	f7f5 f9bc 	bl	80005b0 <__aeabi_dmul>
 800b238:	460b      	mov	r3, r1
 800b23a:	4602      	mov	r2, r0
 800b23c:	4680      	mov	r8, r0
 800b23e:	4689      	mov	r9, r1
 800b240:	4630      	mov	r0, r6
 800b242:	4639      	mov	r1, r7
 800b244:	f7f4 fffe 	bl	8000244 <__adddf3>
 800b248:	4b18      	ldr	r3, [pc, #96]	@ (800b2ac <__ieee754_pow+0x40c>)
 800b24a:	4604      	mov	r4, r0
 800b24c:	4299      	cmp	r1, r3
 800b24e:	460d      	mov	r5, r1
 800b250:	468a      	mov	sl, r1
 800b252:	468b      	mov	fp, r1
 800b254:	f340 82e0 	ble.w	800b818 <__ieee754_pow+0x978>
 800b258:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800b25c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800b260:	4303      	orrs	r3, r0
 800b262:	f000 81df 	beq.w	800b624 <__ieee754_pow+0x784>
 800b266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b26a:	2200      	movs	r2, #0
 800b26c:	2300      	movs	r3, #0
 800b26e:	f7f5 fc11 	bl	8000a94 <__aeabi_dcmplt>
 800b272:	3800      	subs	r0, #0
 800b274:	bf18      	it	ne
 800b276:	2001      	movne	r0, #1
 800b278:	e71d      	b.n	800b0b6 <__ieee754_pow+0x216>
 800b27a:	bf00      	nop
 800b27c:	f3af 8000 	nop.w
 800b280:	60000000 	.word	0x60000000
 800b284:	3ff71547 	.word	0x3ff71547
 800b288:	f85ddf44 	.word	0xf85ddf44
 800b28c:	3e54ae0b 	.word	0x3e54ae0b
 800b290:	55555555 	.word	0x55555555
 800b294:	3fd55555 	.word	0x3fd55555
 800b298:	652b82fe 	.word	0x652b82fe
 800b29c:	3ff71547 	.word	0x3ff71547
 800b2a0:	3ff00000 	.word	0x3ff00000
 800b2a4:	3fd00000 	.word	0x3fd00000
 800b2a8:	3fe00000 	.word	0x3fe00000
 800b2ac:	408fffff 	.word	0x408fffff
 800b2b0:	4ad3      	ldr	r2, [pc, #844]	@ (800b600 <__ieee754_pow+0x760>)
 800b2b2:	402a      	ands	r2, r5
 800b2b4:	2a00      	cmp	r2, #0
 800b2b6:	f040 817a 	bne.w	800b5ae <__ieee754_pow+0x70e>
 800b2ba:	4bd2      	ldr	r3, [pc, #840]	@ (800b604 <__ieee754_pow+0x764>)
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f7f5 f977 	bl	80005b0 <__aeabi_dmul>
 800b2c2:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	151a      	asrs	r2, r3, #20
 800b2ca:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b2ce:	4422      	add	r2, r4
 800b2d0:	920a      	str	r2, [sp, #40]	@ 0x28
 800b2d2:	4acd      	ldr	r2, [pc, #820]	@ (800b608 <__ieee754_pow+0x768>)
 800b2d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2d8:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b2e2:	dd08      	ble.n	800b2f6 <__ieee754_pow+0x456>
 800b2e4:	4ac9      	ldr	r2, [pc, #804]	@ (800b60c <__ieee754_pow+0x76c>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	f340 8163 	ble.w	800b5b2 <__ieee754_pow+0x712>
 800b2ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2ee:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2f6:	2600      	movs	r6, #0
 800b2f8:	00f3      	lsls	r3, r6, #3
 800b2fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2fc:	4bc4      	ldr	r3, [pc, #784]	@ (800b610 <__ieee754_pow+0x770>)
 800b2fe:	4629      	mov	r1, r5
 800b300:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b304:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b308:	461a      	mov	r2, r3
 800b30a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b30e:	4623      	mov	r3, r4
 800b310:	4682      	mov	sl, r0
 800b312:	f7f4 ff95 	bl	8000240 <__aeabi_dsub>
 800b316:	4652      	mov	r2, sl
 800b318:	462b      	mov	r3, r5
 800b31a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800b31e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b322:	f7f4 ff8f 	bl	8000244 <__adddf3>
 800b326:	4602      	mov	r2, r0
 800b328:	460b      	mov	r3, r1
 800b32a:	2000      	movs	r0, #0
 800b32c:	49b9      	ldr	r1, [pc, #740]	@ (800b614 <__ieee754_pow+0x774>)
 800b32e:	f7f5 fa69 	bl	8000804 <__aeabi_ddiv>
 800b332:	4602      	mov	r2, r0
 800b334:	460b      	mov	r3, r1
 800b336:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b33a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b33e:	f7f5 f937 	bl	80005b0 <__aeabi_dmul>
 800b342:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b346:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b34a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b34e:	2300      	movs	r3, #0
 800b350:	2200      	movs	r2, #0
 800b352:	46ab      	mov	fp, r5
 800b354:	106d      	asrs	r5, r5, #1
 800b356:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800b35a:	9304      	str	r3, [sp, #16]
 800b35c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800b360:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b364:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800b368:	4640      	mov	r0, r8
 800b36a:	4649      	mov	r1, r9
 800b36c:	4614      	mov	r4, r2
 800b36e:	461d      	mov	r5, r3
 800b370:	f7f5 f91e 	bl	80005b0 <__aeabi_dmul>
 800b374:	4602      	mov	r2, r0
 800b376:	460b      	mov	r3, r1
 800b378:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b37c:	f7f4 ff60 	bl	8000240 <__aeabi_dsub>
 800b380:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b384:	4606      	mov	r6, r0
 800b386:	460f      	mov	r7, r1
 800b388:	4620      	mov	r0, r4
 800b38a:	4629      	mov	r1, r5
 800b38c:	f7f4 ff58 	bl	8000240 <__aeabi_dsub>
 800b390:	4602      	mov	r2, r0
 800b392:	460b      	mov	r3, r1
 800b394:	4650      	mov	r0, sl
 800b396:	4659      	mov	r1, fp
 800b398:	f7f4 ff52 	bl	8000240 <__aeabi_dsub>
 800b39c:	4642      	mov	r2, r8
 800b39e:	464b      	mov	r3, r9
 800b3a0:	f7f5 f906 	bl	80005b0 <__aeabi_dmul>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	4639      	mov	r1, r7
 800b3ac:	f7f4 ff48 	bl	8000240 <__aeabi_dsub>
 800b3b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b3b4:	f7f5 f8fc 	bl	80005b0 <__aeabi_dmul>
 800b3b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3bc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b3c0:	4610      	mov	r0, r2
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	f7f5 f8f4 	bl	80005b0 <__aeabi_dmul>
 800b3c8:	a37b      	add	r3, pc, #492	@ (adr r3, 800b5b8 <__ieee754_pow+0x718>)
 800b3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ce:	4604      	mov	r4, r0
 800b3d0:	460d      	mov	r5, r1
 800b3d2:	f7f5 f8ed 	bl	80005b0 <__aeabi_dmul>
 800b3d6:	a37a      	add	r3, pc, #488	@ (adr r3, 800b5c0 <__ieee754_pow+0x720>)
 800b3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3dc:	f7f4 ff32 	bl	8000244 <__adddf3>
 800b3e0:	4622      	mov	r2, r4
 800b3e2:	462b      	mov	r3, r5
 800b3e4:	f7f5 f8e4 	bl	80005b0 <__aeabi_dmul>
 800b3e8:	a377      	add	r3, pc, #476	@ (adr r3, 800b5c8 <__ieee754_pow+0x728>)
 800b3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ee:	f7f4 ff29 	bl	8000244 <__adddf3>
 800b3f2:	4622      	mov	r2, r4
 800b3f4:	462b      	mov	r3, r5
 800b3f6:	f7f5 f8db 	bl	80005b0 <__aeabi_dmul>
 800b3fa:	a375      	add	r3, pc, #468	@ (adr r3, 800b5d0 <__ieee754_pow+0x730>)
 800b3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b400:	f7f4 ff20 	bl	8000244 <__adddf3>
 800b404:	4622      	mov	r2, r4
 800b406:	462b      	mov	r3, r5
 800b408:	f7f5 f8d2 	bl	80005b0 <__aeabi_dmul>
 800b40c:	a372      	add	r3, pc, #456	@ (adr r3, 800b5d8 <__ieee754_pow+0x738>)
 800b40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b412:	f7f4 ff17 	bl	8000244 <__adddf3>
 800b416:	4622      	mov	r2, r4
 800b418:	462b      	mov	r3, r5
 800b41a:	f7f5 f8c9 	bl	80005b0 <__aeabi_dmul>
 800b41e:	a370      	add	r3, pc, #448	@ (adr r3, 800b5e0 <__ieee754_pow+0x740>)
 800b420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b424:	f7f4 ff0e 	bl	8000244 <__adddf3>
 800b428:	4622      	mov	r2, r4
 800b42a:	4606      	mov	r6, r0
 800b42c:	460f      	mov	r7, r1
 800b42e:	462b      	mov	r3, r5
 800b430:	4620      	mov	r0, r4
 800b432:	4629      	mov	r1, r5
 800b434:	f7f5 f8bc 	bl	80005b0 <__aeabi_dmul>
 800b438:	4602      	mov	r2, r0
 800b43a:	460b      	mov	r3, r1
 800b43c:	4630      	mov	r0, r6
 800b43e:	4639      	mov	r1, r7
 800b440:	f7f5 f8b6 	bl	80005b0 <__aeabi_dmul>
 800b444:	4604      	mov	r4, r0
 800b446:	460d      	mov	r5, r1
 800b448:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b44c:	4642      	mov	r2, r8
 800b44e:	464b      	mov	r3, r9
 800b450:	f7f4 fef8 	bl	8000244 <__adddf3>
 800b454:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b458:	f7f5 f8aa 	bl	80005b0 <__aeabi_dmul>
 800b45c:	4622      	mov	r2, r4
 800b45e:	462b      	mov	r3, r5
 800b460:	f7f4 fef0 	bl	8000244 <__adddf3>
 800b464:	4642      	mov	r2, r8
 800b466:	4682      	mov	sl, r0
 800b468:	468b      	mov	fp, r1
 800b46a:	464b      	mov	r3, r9
 800b46c:	4640      	mov	r0, r8
 800b46e:	4649      	mov	r1, r9
 800b470:	f7f5 f89e 	bl	80005b0 <__aeabi_dmul>
 800b474:	2200      	movs	r2, #0
 800b476:	4b68      	ldr	r3, [pc, #416]	@ (800b618 <__ieee754_pow+0x778>)
 800b478:	4606      	mov	r6, r0
 800b47a:	460f      	mov	r7, r1
 800b47c:	f7f4 fee2 	bl	8000244 <__adddf3>
 800b480:	4652      	mov	r2, sl
 800b482:	465b      	mov	r3, fp
 800b484:	f7f4 fede 	bl	8000244 <__adddf3>
 800b488:	2400      	movs	r4, #0
 800b48a:	460d      	mov	r5, r1
 800b48c:	4622      	mov	r2, r4
 800b48e:	460b      	mov	r3, r1
 800b490:	4640      	mov	r0, r8
 800b492:	4649      	mov	r1, r9
 800b494:	f7f5 f88c 	bl	80005b0 <__aeabi_dmul>
 800b498:	2200      	movs	r2, #0
 800b49a:	4680      	mov	r8, r0
 800b49c:	4689      	mov	r9, r1
 800b49e:	4620      	mov	r0, r4
 800b4a0:	4629      	mov	r1, r5
 800b4a2:	4b5d      	ldr	r3, [pc, #372]	@ (800b618 <__ieee754_pow+0x778>)
 800b4a4:	f7f4 fecc 	bl	8000240 <__aeabi_dsub>
 800b4a8:	4632      	mov	r2, r6
 800b4aa:	463b      	mov	r3, r7
 800b4ac:	f7f4 fec8 	bl	8000240 <__aeabi_dsub>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	4650      	mov	r0, sl
 800b4b6:	4659      	mov	r1, fp
 800b4b8:	f7f4 fec2 	bl	8000240 <__aeabi_dsub>
 800b4bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4c0:	f7f5 f876 	bl	80005b0 <__aeabi_dmul>
 800b4c4:	4622      	mov	r2, r4
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	460f      	mov	r7, r1
 800b4ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b4ce:	462b      	mov	r3, r5
 800b4d0:	f7f5 f86e 	bl	80005b0 <__aeabi_dmul>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	4630      	mov	r0, r6
 800b4da:	4639      	mov	r1, r7
 800b4dc:	f7f4 feb2 	bl	8000244 <__adddf3>
 800b4e0:	2400      	movs	r4, #0
 800b4e2:	4606      	mov	r6, r0
 800b4e4:	460f      	mov	r7, r1
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	4640      	mov	r0, r8
 800b4ec:	4649      	mov	r1, r9
 800b4ee:	f7f4 fea9 	bl	8000244 <__adddf3>
 800b4f2:	a33d      	add	r3, pc, #244	@ (adr r3, 800b5e8 <__ieee754_pow+0x748>)
 800b4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	460d      	mov	r5, r1
 800b4fc:	f7f5 f858 	bl	80005b0 <__aeabi_dmul>
 800b500:	4642      	mov	r2, r8
 800b502:	464b      	mov	r3, r9
 800b504:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b508:	4620      	mov	r0, r4
 800b50a:	4629      	mov	r1, r5
 800b50c:	f7f4 fe98 	bl	8000240 <__aeabi_dsub>
 800b510:	4602      	mov	r2, r0
 800b512:	460b      	mov	r3, r1
 800b514:	4630      	mov	r0, r6
 800b516:	4639      	mov	r1, r7
 800b518:	f7f4 fe92 	bl	8000240 <__aeabi_dsub>
 800b51c:	a334      	add	r3, pc, #208	@ (adr r3, 800b5f0 <__ieee754_pow+0x750>)
 800b51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b522:	f7f5 f845 	bl	80005b0 <__aeabi_dmul>
 800b526:	a334      	add	r3, pc, #208	@ (adr r3, 800b5f8 <__ieee754_pow+0x758>)
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	4606      	mov	r6, r0
 800b52e:	460f      	mov	r7, r1
 800b530:	4620      	mov	r0, r4
 800b532:	4629      	mov	r1, r5
 800b534:	f7f5 f83c 	bl	80005b0 <__aeabi_dmul>
 800b538:	4602      	mov	r2, r0
 800b53a:	460b      	mov	r3, r1
 800b53c:	4630      	mov	r0, r6
 800b53e:	4639      	mov	r1, r7
 800b540:	f7f4 fe80 	bl	8000244 <__adddf3>
 800b544:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b546:	4b35      	ldr	r3, [pc, #212]	@ (800b61c <__ieee754_pow+0x77c>)
 800b548:	2400      	movs	r4, #0
 800b54a:	4413      	add	r3, r2
 800b54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b550:	f7f4 fe78 	bl	8000244 <__adddf3>
 800b554:	4682      	mov	sl, r0
 800b556:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b558:	468b      	mov	fp, r1
 800b55a:	f7f4 ffbf 	bl	80004dc <__aeabi_i2d>
 800b55e:	4606      	mov	r6, r0
 800b560:	460f      	mov	r7, r1
 800b562:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b564:	4b2e      	ldr	r3, [pc, #184]	@ (800b620 <__ieee754_pow+0x780>)
 800b566:	4413      	add	r3, r2
 800b568:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b56c:	4652      	mov	r2, sl
 800b56e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b572:	465b      	mov	r3, fp
 800b574:	f7f4 fe66 	bl	8000244 <__adddf3>
 800b578:	4642      	mov	r2, r8
 800b57a:	464b      	mov	r3, r9
 800b57c:	f7f4 fe62 	bl	8000244 <__adddf3>
 800b580:	4632      	mov	r2, r6
 800b582:	463b      	mov	r3, r7
 800b584:	f7f4 fe5e 	bl	8000244 <__adddf3>
 800b588:	4632      	mov	r2, r6
 800b58a:	463b      	mov	r3, r7
 800b58c:	4620      	mov	r0, r4
 800b58e:	460d      	mov	r5, r1
 800b590:	f7f4 fe56 	bl	8000240 <__aeabi_dsub>
 800b594:	4642      	mov	r2, r8
 800b596:	464b      	mov	r3, r9
 800b598:	f7f4 fe52 	bl	8000240 <__aeabi_dsub>
 800b59c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5a0:	f7f4 fe4e 	bl	8000240 <__aeabi_dsub>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	4650      	mov	r0, sl
 800b5aa:	4659      	mov	r1, fp
 800b5ac:	e618      	b.n	800b1e0 <__ieee754_pow+0x340>
 800b5ae:	2400      	movs	r4, #0
 800b5b0:	e68a      	b.n	800b2c8 <__ieee754_pow+0x428>
 800b5b2:	2601      	movs	r6, #1
 800b5b4:	e6a0      	b.n	800b2f8 <__ieee754_pow+0x458>
 800b5b6:	bf00      	nop
 800b5b8:	4a454eef 	.word	0x4a454eef
 800b5bc:	3fca7e28 	.word	0x3fca7e28
 800b5c0:	93c9db65 	.word	0x93c9db65
 800b5c4:	3fcd864a 	.word	0x3fcd864a
 800b5c8:	a91d4101 	.word	0xa91d4101
 800b5cc:	3fd17460 	.word	0x3fd17460
 800b5d0:	518f264d 	.word	0x518f264d
 800b5d4:	3fd55555 	.word	0x3fd55555
 800b5d8:	db6fabff 	.word	0xdb6fabff
 800b5dc:	3fdb6db6 	.word	0x3fdb6db6
 800b5e0:	33333303 	.word	0x33333303
 800b5e4:	3fe33333 	.word	0x3fe33333
 800b5e8:	e0000000 	.word	0xe0000000
 800b5ec:	3feec709 	.word	0x3feec709
 800b5f0:	dc3a03fd 	.word	0xdc3a03fd
 800b5f4:	3feec709 	.word	0x3feec709
 800b5f8:	145b01f5 	.word	0x145b01f5
 800b5fc:	be3e2fe0 	.word	0xbe3e2fe0
 800b600:	7ff00000 	.word	0x7ff00000
 800b604:	43400000 	.word	0x43400000
 800b608:	0003988e 	.word	0x0003988e
 800b60c:	000bb679 	.word	0x000bb679
 800b610:	0800be40 	.word	0x0800be40
 800b614:	3ff00000 	.word	0x3ff00000
 800b618:	40080000 	.word	0x40080000
 800b61c:	0800be20 	.word	0x0800be20
 800b620:	0800be30 	.word	0x0800be30
 800b624:	a39a      	add	r3, pc, #616	@ (adr r3, 800b890 <__ieee754_pow+0x9f0>)
 800b626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62a:	4630      	mov	r0, r6
 800b62c:	4639      	mov	r1, r7
 800b62e:	f7f4 fe09 	bl	8000244 <__adddf3>
 800b632:	4642      	mov	r2, r8
 800b634:	e9cd 0100 	strd	r0, r1, [sp]
 800b638:	464b      	mov	r3, r9
 800b63a:	4620      	mov	r0, r4
 800b63c:	4629      	mov	r1, r5
 800b63e:	f7f4 fdff 	bl	8000240 <__aeabi_dsub>
 800b642:	4602      	mov	r2, r0
 800b644:	460b      	mov	r3, r1
 800b646:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b64a:	f7f5 fa41 	bl	8000ad0 <__aeabi_dcmpgt>
 800b64e:	2800      	cmp	r0, #0
 800b650:	f47f ae09 	bne.w	800b266 <__ieee754_pow+0x3c6>
 800b654:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b658:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b65c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800b660:	fa43 fa0a 	asr.w	sl, r3, sl
 800b664:	44da      	add	sl, fp
 800b666:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b66a:	489b      	ldr	r0, [pc, #620]	@ (800b8d8 <__ieee754_pow+0xa38>)
 800b66c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b670:	4108      	asrs	r0, r1
 800b672:	ea00 030a 	and.w	r3, r0, sl
 800b676:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b67a:	f1c1 0114 	rsb	r1, r1, #20
 800b67e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b682:	4640      	mov	r0, r8
 800b684:	fa4a fa01 	asr.w	sl, sl, r1
 800b688:	f1bb 0f00 	cmp.w	fp, #0
 800b68c:	4649      	mov	r1, r9
 800b68e:	f04f 0200 	mov.w	r2, #0
 800b692:	bfb8      	it	lt
 800b694:	f1ca 0a00 	rsblt	sl, sl, #0
 800b698:	f7f4 fdd2 	bl	8000240 <__aeabi_dsub>
 800b69c:	4680      	mov	r8, r0
 800b69e:	4689      	mov	r9, r1
 800b6a0:	2400      	movs	r4, #0
 800b6a2:	4632      	mov	r2, r6
 800b6a4:	463b      	mov	r3, r7
 800b6a6:	4640      	mov	r0, r8
 800b6a8:	4649      	mov	r1, r9
 800b6aa:	f7f4 fdcb 	bl	8000244 <__adddf3>
 800b6ae:	a37a      	add	r3, pc, #488	@ (adr r3, 800b898 <__ieee754_pow+0x9f8>)
 800b6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	460d      	mov	r5, r1
 800b6b8:	f7f4 ff7a 	bl	80005b0 <__aeabi_dmul>
 800b6bc:	4642      	mov	r2, r8
 800b6be:	464b      	mov	r3, r9
 800b6c0:	e9cd 0100 	strd	r0, r1, [sp]
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	4629      	mov	r1, r5
 800b6c8:	f7f4 fdba 	bl	8000240 <__aeabi_dsub>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	4639      	mov	r1, r7
 800b6d4:	f7f4 fdb4 	bl	8000240 <__aeabi_dsub>
 800b6d8:	a371      	add	r3, pc, #452	@ (adr r3, 800b8a0 <__ieee754_pow+0xa00>)
 800b6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6de:	f7f4 ff67 	bl	80005b0 <__aeabi_dmul>
 800b6e2:	a371      	add	r3, pc, #452	@ (adr r3, 800b8a8 <__ieee754_pow+0xa08>)
 800b6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e8:	4680      	mov	r8, r0
 800b6ea:	4689      	mov	r9, r1
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	f7f4 ff5e 	bl	80005b0 <__aeabi_dmul>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	4640      	mov	r0, r8
 800b6fa:	4649      	mov	r1, r9
 800b6fc:	f7f4 fda2 	bl	8000244 <__adddf3>
 800b700:	4604      	mov	r4, r0
 800b702:	460d      	mov	r5, r1
 800b704:	4602      	mov	r2, r0
 800b706:	460b      	mov	r3, r1
 800b708:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b70c:	f7f4 fd9a 	bl	8000244 <__adddf3>
 800b710:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b714:	4680      	mov	r8, r0
 800b716:	4689      	mov	r9, r1
 800b718:	f7f4 fd92 	bl	8000240 <__aeabi_dsub>
 800b71c:	4602      	mov	r2, r0
 800b71e:	460b      	mov	r3, r1
 800b720:	4620      	mov	r0, r4
 800b722:	4629      	mov	r1, r5
 800b724:	f7f4 fd8c 	bl	8000240 <__aeabi_dsub>
 800b728:	4642      	mov	r2, r8
 800b72a:	4606      	mov	r6, r0
 800b72c:	460f      	mov	r7, r1
 800b72e:	464b      	mov	r3, r9
 800b730:	4640      	mov	r0, r8
 800b732:	4649      	mov	r1, r9
 800b734:	f7f4 ff3c 	bl	80005b0 <__aeabi_dmul>
 800b738:	a35d      	add	r3, pc, #372	@ (adr r3, 800b8b0 <__ieee754_pow+0xa10>)
 800b73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73e:	4604      	mov	r4, r0
 800b740:	460d      	mov	r5, r1
 800b742:	f7f4 ff35 	bl	80005b0 <__aeabi_dmul>
 800b746:	a35c      	add	r3, pc, #368	@ (adr r3, 800b8b8 <__ieee754_pow+0xa18>)
 800b748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74c:	f7f4 fd78 	bl	8000240 <__aeabi_dsub>
 800b750:	4622      	mov	r2, r4
 800b752:	462b      	mov	r3, r5
 800b754:	f7f4 ff2c 	bl	80005b0 <__aeabi_dmul>
 800b758:	a359      	add	r3, pc, #356	@ (adr r3, 800b8c0 <__ieee754_pow+0xa20>)
 800b75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75e:	f7f4 fd71 	bl	8000244 <__adddf3>
 800b762:	4622      	mov	r2, r4
 800b764:	462b      	mov	r3, r5
 800b766:	f7f4 ff23 	bl	80005b0 <__aeabi_dmul>
 800b76a:	a357      	add	r3, pc, #348	@ (adr r3, 800b8c8 <__ieee754_pow+0xa28>)
 800b76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b770:	f7f4 fd66 	bl	8000240 <__aeabi_dsub>
 800b774:	4622      	mov	r2, r4
 800b776:	462b      	mov	r3, r5
 800b778:	f7f4 ff1a 	bl	80005b0 <__aeabi_dmul>
 800b77c:	a354      	add	r3, pc, #336	@ (adr r3, 800b8d0 <__ieee754_pow+0xa30>)
 800b77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b782:	f7f4 fd5f 	bl	8000244 <__adddf3>
 800b786:	4622      	mov	r2, r4
 800b788:	462b      	mov	r3, r5
 800b78a:	f7f4 ff11 	bl	80005b0 <__aeabi_dmul>
 800b78e:	4602      	mov	r2, r0
 800b790:	460b      	mov	r3, r1
 800b792:	4640      	mov	r0, r8
 800b794:	4649      	mov	r1, r9
 800b796:	f7f4 fd53 	bl	8000240 <__aeabi_dsub>
 800b79a:	4604      	mov	r4, r0
 800b79c:	460d      	mov	r5, r1
 800b79e:	4602      	mov	r2, r0
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	4640      	mov	r0, r8
 800b7a4:	4649      	mov	r1, r9
 800b7a6:	f7f4 ff03 	bl	80005b0 <__aeabi_dmul>
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	e9cd 0100 	strd	r0, r1, [sp]
 800b7b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	4629      	mov	r1, r5
 800b7b8:	f7f4 fd42 	bl	8000240 <__aeabi_dsub>
 800b7bc:	4602      	mov	r2, r0
 800b7be:	460b      	mov	r3, r1
 800b7c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7c4:	f7f5 f81e 	bl	8000804 <__aeabi_ddiv>
 800b7c8:	4632      	mov	r2, r6
 800b7ca:	4604      	mov	r4, r0
 800b7cc:	460d      	mov	r5, r1
 800b7ce:	463b      	mov	r3, r7
 800b7d0:	4640      	mov	r0, r8
 800b7d2:	4649      	mov	r1, r9
 800b7d4:	f7f4 feec 	bl	80005b0 <__aeabi_dmul>
 800b7d8:	4632      	mov	r2, r6
 800b7da:	463b      	mov	r3, r7
 800b7dc:	f7f4 fd32 	bl	8000244 <__adddf3>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	f7f4 fd2a 	bl	8000240 <__aeabi_dsub>
 800b7ec:	4642      	mov	r2, r8
 800b7ee:	464b      	mov	r3, r9
 800b7f0:	f7f4 fd26 	bl	8000240 <__aeabi_dsub>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	4938      	ldr	r1, [pc, #224]	@ (800b8dc <__ieee754_pow+0xa3c>)
 800b7fc:	f7f4 fd20 	bl	8000240 <__aeabi_dsub>
 800b800:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b804:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800b808:	da2e      	bge.n	800b868 <__ieee754_pow+0x9c8>
 800b80a:	4652      	mov	r2, sl
 800b80c:	f000 f870 	bl	800b8f0 <scalbn>
 800b810:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b814:	f7ff bbed 	b.w	800aff2 <__ieee754_pow+0x152>
 800b818:	4c31      	ldr	r4, [pc, #196]	@ (800b8e0 <__ieee754_pow+0xa40>)
 800b81a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b81e:	42a3      	cmp	r3, r4
 800b820:	d91a      	bls.n	800b858 <__ieee754_pow+0x9b8>
 800b822:	4b30      	ldr	r3, [pc, #192]	@ (800b8e4 <__ieee754_pow+0xa44>)
 800b824:	440b      	add	r3, r1
 800b826:	4303      	orrs	r3, r0
 800b828:	d009      	beq.n	800b83e <__ieee754_pow+0x99e>
 800b82a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b82e:	2200      	movs	r2, #0
 800b830:	2300      	movs	r3, #0
 800b832:	f7f5 f92f 	bl	8000a94 <__aeabi_dcmplt>
 800b836:	3800      	subs	r0, #0
 800b838:	bf18      	it	ne
 800b83a:	2001      	movne	r0, #1
 800b83c:	e444      	b.n	800b0c8 <__ieee754_pow+0x228>
 800b83e:	4642      	mov	r2, r8
 800b840:	464b      	mov	r3, r9
 800b842:	f7f4 fcfd 	bl	8000240 <__aeabi_dsub>
 800b846:	4632      	mov	r2, r6
 800b848:	463b      	mov	r3, r7
 800b84a:	f7f5 f937 	bl	8000abc <__aeabi_dcmpge>
 800b84e:	2800      	cmp	r0, #0
 800b850:	d1eb      	bne.n	800b82a <__ieee754_pow+0x98a>
 800b852:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800b8e8 <__ieee754_pow+0xa48>
 800b856:	e6fd      	b.n	800b654 <__ieee754_pow+0x7b4>
 800b858:	469a      	mov	sl, r3
 800b85a:	4b24      	ldr	r3, [pc, #144]	@ (800b8ec <__ieee754_pow+0xa4c>)
 800b85c:	459a      	cmp	sl, r3
 800b85e:	f63f aef9 	bhi.w	800b654 <__ieee754_pow+0x7b4>
 800b862:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b866:	e71b      	b.n	800b6a0 <__ieee754_pow+0x800>
 800b868:	4621      	mov	r1, r4
 800b86a:	e7d1      	b.n	800b810 <__ieee754_pow+0x970>
 800b86c:	2000      	movs	r0, #0
 800b86e:	491b      	ldr	r1, [pc, #108]	@ (800b8dc <__ieee754_pow+0xa3c>)
 800b870:	f7ff bb34 	b.w	800aedc <__ieee754_pow+0x3c>
 800b874:	2000      	movs	r0, #0
 800b876:	2100      	movs	r1, #0
 800b878:	f7ff bb30 	b.w	800aedc <__ieee754_pow+0x3c>
 800b87c:	4650      	mov	r0, sl
 800b87e:	4659      	mov	r1, fp
 800b880:	f7ff bb2c 	b.w	800aedc <__ieee754_pow+0x3c>
 800b884:	460c      	mov	r4, r1
 800b886:	f7ff bb79 	b.w	800af7c <__ieee754_pow+0xdc>
 800b88a:	2400      	movs	r4, #0
 800b88c:	f7ff bb64 	b.w	800af58 <__ieee754_pow+0xb8>
 800b890:	652b82fe 	.word	0x652b82fe
 800b894:	3c971547 	.word	0x3c971547
 800b898:	00000000 	.word	0x00000000
 800b89c:	3fe62e43 	.word	0x3fe62e43
 800b8a0:	fefa39ef 	.word	0xfefa39ef
 800b8a4:	3fe62e42 	.word	0x3fe62e42
 800b8a8:	0ca86c39 	.word	0x0ca86c39
 800b8ac:	be205c61 	.word	0xbe205c61
 800b8b0:	72bea4d0 	.word	0x72bea4d0
 800b8b4:	3e663769 	.word	0x3e663769
 800b8b8:	c5d26bf1 	.word	0xc5d26bf1
 800b8bc:	3ebbbd41 	.word	0x3ebbbd41
 800b8c0:	af25de2c 	.word	0xaf25de2c
 800b8c4:	3f11566a 	.word	0x3f11566a
 800b8c8:	16bebd93 	.word	0x16bebd93
 800b8cc:	3f66c16c 	.word	0x3f66c16c
 800b8d0:	5555553e 	.word	0x5555553e
 800b8d4:	3fc55555 	.word	0x3fc55555
 800b8d8:	fff00000 	.word	0xfff00000
 800b8dc:	3ff00000 	.word	0x3ff00000
 800b8e0:	4090cbff 	.word	0x4090cbff
 800b8e4:	3f6f3400 	.word	0x3f6f3400
 800b8e8:	4090cc00 	.word	0x4090cc00
 800b8ec:	3fe00000 	.word	0x3fe00000

0800b8f0 <scalbn>:
 800b8f0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800b8f4:	4616      	mov	r6, r2
 800b8f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b8fa:	4683      	mov	fp, r0
 800b8fc:	468c      	mov	ip, r1
 800b8fe:	460b      	mov	r3, r1
 800b900:	b982      	cbnz	r2, 800b924 <scalbn+0x34>
 800b902:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b906:	4303      	orrs	r3, r0
 800b908:	d039      	beq.n	800b97e <scalbn+0x8e>
 800b90a:	4b2f      	ldr	r3, [pc, #188]	@ (800b9c8 <scalbn+0xd8>)
 800b90c:	2200      	movs	r2, #0
 800b90e:	f7f4 fe4f 	bl	80005b0 <__aeabi_dmul>
 800b912:	4b2e      	ldr	r3, [pc, #184]	@ (800b9cc <scalbn+0xdc>)
 800b914:	4683      	mov	fp, r0
 800b916:	429e      	cmp	r6, r3
 800b918:	468c      	mov	ip, r1
 800b91a:	da0d      	bge.n	800b938 <scalbn+0x48>
 800b91c:	a326      	add	r3, pc, #152	@ (adr r3, 800b9b8 <scalbn+0xc8>)
 800b91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b922:	e01b      	b.n	800b95c <scalbn+0x6c>
 800b924:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800b928:	42ba      	cmp	r2, r7
 800b92a:	d109      	bne.n	800b940 <scalbn+0x50>
 800b92c:	4602      	mov	r2, r0
 800b92e:	f7f4 fc89 	bl	8000244 <__adddf3>
 800b932:	4683      	mov	fp, r0
 800b934:	468c      	mov	ip, r1
 800b936:	e022      	b.n	800b97e <scalbn+0x8e>
 800b938:	460b      	mov	r3, r1
 800b93a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b93e:	3a36      	subs	r2, #54	@ 0x36
 800b940:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b944:	428e      	cmp	r6, r1
 800b946:	dd0c      	ble.n	800b962 <scalbn+0x72>
 800b948:	a31d      	add	r3, pc, #116	@ (adr r3, 800b9c0 <scalbn+0xd0>)
 800b94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94e:	461c      	mov	r4, r3
 800b950:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800b954:	f361 74df 	bfi	r4, r1, #31, #1
 800b958:	4621      	mov	r1, r4
 800b95a:	481d      	ldr	r0, [pc, #116]	@ (800b9d0 <scalbn+0xe0>)
 800b95c:	f7f4 fe28 	bl	80005b0 <__aeabi_dmul>
 800b960:	e7e7      	b.n	800b932 <scalbn+0x42>
 800b962:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b966:	4432      	add	r2, r6
 800b968:	428a      	cmp	r2, r1
 800b96a:	dced      	bgt.n	800b948 <scalbn+0x58>
 800b96c:	2a00      	cmp	r2, #0
 800b96e:	dd0a      	ble.n	800b986 <scalbn+0x96>
 800b970:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b974:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b978:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b97c:	46ac      	mov	ip, r5
 800b97e:	4658      	mov	r0, fp
 800b980:	4661      	mov	r1, ip
 800b982:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800b986:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b98a:	da09      	bge.n	800b9a0 <scalbn+0xb0>
 800b98c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800b990:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800b994:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800b998:	480e      	ldr	r0, [pc, #56]	@ (800b9d4 <scalbn+0xe4>)
 800b99a:	f041 011f 	orr.w	r1, r1, #31
 800b99e:	e7bd      	b.n	800b91c <scalbn+0x2c>
 800b9a0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b9a4:	3236      	adds	r2, #54	@ 0x36
 800b9a6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b9aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b9ae:	4658      	mov	r0, fp
 800b9b0:	4629      	mov	r1, r5
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	4b08      	ldr	r3, [pc, #32]	@ (800b9d8 <scalbn+0xe8>)
 800b9b6:	e7d1      	b.n	800b95c <scalbn+0x6c>
 800b9b8:	c2f8f359 	.word	0xc2f8f359
 800b9bc:	01a56e1f 	.word	0x01a56e1f
 800b9c0:	8800759c 	.word	0x8800759c
 800b9c4:	7e37e43c 	.word	0x7e37e43c
 800b9c8:	43500000 	.word	0x43500000
 800b9cc:	ffff3cb0 	.word	0xffff3cb0
 800b9d0:	8800759c 	.word	0x8800759c
 800b9d4:	c2f8f359 	.word	0xc2f8f359
 800b9d8:	3c900000 	.word	0x3c900000

0800b9dc <with_errno>:
 800b9dc:	b570      	push	{r4, r5, r6, lr}
 800b9de:	4604      	mov	r4, r0
 800b9e0:	460d      	mov	r5, r1
 800b9e2:	4616      	mov	r6, r2
 800b9e4:	f7fd f886 	bl	8008af4 <__errno>
 800b9e8:	4629      	mov	r1, r5
 800b9ea:	6006      	str	r6, [r0, #0]
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	bd70      	pop	{r4, r5, r6, pc}

0800b9f0 <xflow>:
 800b9f0:	b513      	push	{r0, r1, r4, lr}
 800b9f2:	4604      	mov	r4, r0
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	4610      	mov	r0, r2
 800b9f8:	b10c      	cbz	r4, 800b9fe <xflow+0xe>
 800b9fa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b9fe:	e9cd 2300 	strd	r2, r3, [sp]
 800ba02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba06:	f7f4 fdd3 	bl	80005b0 <__aeabi_dmul>
 800ba0a:	2222      	movs	r2, #34	@ 0x22
 800ba0c:	b002      	add	sp, #8
 800ba0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba12:	f7ff bfe3 	b.w	800b9dc <with_errno>

0800ba16 <__math_uflow>:
 800ba16:	2200      	movs	r2, #0
 800ba18:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ba1c:	f7ff bfe8 	b.w	800b9f0 <xflow>

0800ba20 <__math_oflow>:
 800ba20:	2200      	movs	r2, #0
 800ba22:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800ba26:	f7ff bfe3 	b.w	800b9f0 <xflow>
	...

0800ba2c <_init>:
 800ba2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba2e:	bf00      	nop
 800ba30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba32:	bc08      	pop	{r3}
 800ba34:	469e      	mov	lr, r3
 800ba36:	4770      	bx	lr

0800ba38 <_fini>:
 800ba38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba3a:	bf00      	nop
 800ba3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba3e:	bc08      	pop	{r3}
 800ba40:	469e      	mov	lr, r3
 800ba42:	4770      	bx	lr
